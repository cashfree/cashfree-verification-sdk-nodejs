/* tslint:disable */
/* eslint-disable */
/**
 * Cashfree Verification API\'s.
 * Cashfree\'s Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';
import { CFEnvironment } from './configuration'
import * as Sentry from "@sentry/node";
import * as crypto from "crypto";
import FormData from 'form-data';

/**
 * 
 * @export
 * @interface AadhaarDetails
 */
export interface AadhaarDetails {
    /**
     * 
     * @type {string}
     * @memberof AadhaarDetails
     */
    'last_verified_at': string;
    /**
     * 
     * @type {string}
     * @memberof AadhaarDetails
     */
    'care_of': string;
    /**
     * 
     * @type {string}
     * @memberof AadhaarDetails
     */
    'dob': string;
    /**
     * 
     * @type {string}
     * @memberof AadhaarDetails
     */
    'gender': AadhaarDetailsGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof AadhaarDetails
     */
    'name': string;
    /**
     * 
     * @type {Address}
     * @memberof AadhaarDetails
     */
    'split_address'?: Address;
    /**
     * 
     * @type {string}
     * @memberof AadhaarDetails
     */
    'photo_link': string;
}

export const AadhaarDetailsGenderEnum = {
    M: 'M',
    F: 'F',
    O: 'O',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;

export type AadhaarDetailsGenderEnum = typeof AadhaarDetailsGenderEnum[keyof typeof AadhaarDetailsGenderEnum];

/**
 * Success response for Aadhaar Masking API
 * @export
 * @interface AadhaarMaskingResponseSchema
 */
export interface AadhaarMaskingResponseSchema {
    /**
     * It displays the status of the aadhaar information.
     * @type {string}
     * @memberof AadhaarMaskingResponseSchema
     */
    'status'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof AadhaarMaskingResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the unique ID you created to identify the verification request
     * @type {string}
     * @memberof AadhaarMaskingResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the URL of the image.
     * @type {string}
     * @memberof AadhaarMaskingResponseSchema
     */
    'image_link'?: string;
}
/**
 * Request body schema for Aadhaar Verification via OCR.
 * @export
 * @interface AadhaarOcrRequestSchema
 */
export interface AadhaarOcrRequestSchema {
    /**
     * 
     * @type {string}
     * @memberof AadhaarOcrRequestSchema
     */
    'verification_id': string;
    /**
     * It is the scanned image of the back of the aadhaar card. Allowed file type - JPEG/JPG/PNG. The max file size of both the files is 10MB.
     * @type {File}
     * @memberof AadhaarOcrRequestSchema
     */
    'back_image'?: File;
    /**
     * It is the scanned image of the front of the aadhaar card. Allowed file type - JPEG/JPG/PNG. The max file size of both the files is 10MB.
     * @type {File}
     * @memberof AadhaarOcrRequestSchema
     */
    'front_image': File;
}
/**
 * Success response for Aadhaar Verification via OCR
 * @export
 * @interface AadhaarOcrResponseSchema
 */
export interface AadhaarOcrResponseSchema {
    /**
     * It displays the name of the aadhaar card holder.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'name'?: string;
    /**
     * It displays the year of birth of the aadhaar card holder.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'yob'?: string;
    /**
     * It displays the father\'s name of the aadhaar card holder.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'father'?: string;
    /**
     * It displays the gender of the aadhaar card holder.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'gender'?: string;
    /**
     * It displays the UID information as present in the aadhaar card.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'uid'?: string;
    /**
     * It displays the name of the state as present in the aadhaar card.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'state'?: string;
    /**
     * It displays the PIN code information as present in the aadhaar card.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'pincode'?: string;
    /**
     * It displays the address information of the aadhaar card holder.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'address'?: string;
    /**
     * It displays whether the aadhaar card is valid or not.
     * @type {boolean}
     * @memberof AadhaarOcrResponseSchema
     */
    'valid'?: boolean;
    /**
     * It displays the status of the aadhaar card.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'status'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'reference_id'?: string;
    /**
     * It displays the unique ID you created to identify this request.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the confidence score for this aadhaar card verification request.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'confidence_score'?: string;
    /**
     * It displays details about the success or failure of the API request.
     * @type {string}
     * @memberof AadhaarOcrResponseSchema
     */
    'message'?: string;
}
/**
 * Find the request parameters to mask aadhaar information
 * @export
 * @interface Aadhaarmaskingrequestschema
 */
export interface Aadhaarmaskingrequestschema {
    /**
     * It is the image file of the aadhaar card that needs masking. Accepted formats - short, long, and PVC. Allowed file type - JPEG/JPG/PNG. The maximum file size should be 10 MB.
     * @type {File}
     * @memberof Aadhaarmaskingrequestschema
     */
    'image': File;
    /**
     * It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof Aadhaarmaskingrequestschema
     */
    'verification_id': string;
}
/**
 * 
 * @export
 * @interface AddUserRequestSchema
 */
export interface AddUserRequestSchema {
    /**
     * It is the unique ID you create to identify the user. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed. **Auto-generated if not passed.**
     * @type {string}
     * @memberof AddUserRequestSchema
     */
    'user_id'?: string;
    /**
     * The phone number of the user.
     * @type {string}
     * @memberof AddUserRequestSchema
     */
    'phone': string;
    /**
     * The email address of the user.
     * @type {string}
     * @memberof AddUserRequestSchema
     */
    'email'?: string;
    /**
     * The name of the user.
     * @type {string}
     * @memberof AddUserRequestSchema
     */
    'name'?: string;
    /**
     * The address address of the user.
     * @type {string}
     * @memberof AddUserRequestSchema
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'dist': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'house': string;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    'pincode': number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'po'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'street': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'subdist'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'vtc'?: string;
}
/**
 * It contains the address information of the individual.
 * @export
 * @interface AddressDetails
 */
export interface AddressDetails {
    /**
     * It displays the complete address information of the individual.
     * @type {string}
     * @memberof AddressDetails
     */
    'complete_address'?: string;
    /**
     * It displays the type of the address information.
     * @type {string}
     * @memberof AddressDetails
     */
    'type'?: string;
    /**
     * 
     * @type {AddressDetailsSplitAddress}
     * @memberof AddressDetails
     */
    'split_address'?: AddressDetailsSplitAddress;
}
/**
 * It displays the address information in individual components.
 * @export
 * @interface AddressDetailsSplitAddress
 */
export interface AddressDetailsSplitAddress {
    /**
     * It displays the name of the district.
     * @type {Array<string>}
     * @memberof AddressDetailsSplitAddress
     */
    'district'?: Array<string>;
    /**
     * It displays the name of the state.
     * @type {Array<Array<string>>}
     * @memberof AddressDetailsSplitAddress
     */
    'state'?: Array<Array<string>>;
    /**
     * It displays the name of the city.
     * @type {Array<string>}
     * @memberof AddressDetailsSplitAddress
     */
    'city'?: Array<string>;
    /**
     * It displays the PIN code information.
     * @type {string}
     * @memberof AddressDetailsSplitAddress
     */
    'pincode'?: string;
    /**
     * It displays the name of the country.
     * @type {Array<string>}
     * @memberof AddressDetailsSplitAddress
     */
    'country'?: Array<string>;
    /**
     * It displays the address information.
     * @type {string}
     * @memberof AddressDetailsSplitAddress
     */
    'address_line'?: string;
}
/**
 * Find the request parameters to retrieve employment infomration
 * @export
 * @interface AdvanceEmploymentRequestSchema
 */
export interface AdvanceEmploymentRequestSchema {
    /**
     * It is the unique ID you create to identify the API request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof AdvanceEmploymentRequestSchema
     */
    'verification_id': string;
    /**
     * It is the phone number of the employee. (conditonal mandatory)
     * @type {string}
     * @memberof AdvanceEmploymentRequestSchema
     */
    'phone'?: string;
    /**
     * It is the PAN information of the employee. (conditonal mandatory)
     * @type {string}
     * @memberof AdvanceEmploymentRequestSchema
     */
    'pan'?: string;
    /**
     * It is the unique number assigned to every employee contributing to the Employees\' Provident Fund (EPF).(conditonal mandatory)
     * @type {string}
     * @memberof AdvanceEmploymentRequestSchema
     */
    'uan'?: string;
    /**
     * It is the date of birth information of the employee. The format is YYYY-MM-DD.Employee date of birth (conditonal mandatory)
     * @type {string}
     * @memberof AdvanceEmploymentRequestSchema
     */
    'dob'?: string;
    /**
     * It is the name of the employee. (conditonal mandatory)
     * @type {string}
     * @memberof AdvanceEmploymentRequestSchema
     */
    'employee_name'?: string;
    /**
     * It is the name of the employer. (conditonal mandatory)
     * @type {string}
     * @memberof AdvanceEmploymentRequestSchema
     */
    'employer_name'?: string;
}
/**
 * Success response for Get Employment Details
 * @export
 * @interface AdvanceEmploymentResponse
 */
export interface AdvanceEmploymentResponse {
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof AdvanceEmploymentResponse
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof AdvanceEmploymentResponse
     */
    'reference_id'?: number;
    /**
     * It displays the status of the API request.
     * @type {string}
     * @memberof AdvanceEmploymentResponse
     */
    'status'?: string;
    /**
     * 
     * @type {AdvanceEmploymentResponseInput}
     * @memberof AdvanceEmploymentResponse
     */
    'input'?: AdvanceEmploymentResponseInput;
    /**
     * It contains the UAN information.
     * @type {Array<AdvanceEmploymentResponseUanDetailsInner>}
     * @memberof AdvanceEmploymentResponse
     */
    'uan_details'?: Array<AdvanceEmploymentResponseUanDetailsInner>;
    /**
     * 
     * @type {AdvanceEmploymentResponseRecentEmploymentDetails}
     * @memberof AdvanceEmploymentResponse
     */
    'recent_employment_details'?: AdvanceEmploymentResponseRecentEmploymentDetails;
}
/**
 * It contains the information entered in the API request.
 * @export
 * @interface AdvanceEmploymentResponseInput
 */
export interface AdvanceEmploymentResponseInput {
    /**
     * It displays the phone number of the employee.
     * @type {string}
     * @memberof AdvanceEmploymentResponseInput
     */
    'phone'?: string;
    /**
     * It displays the PAN information of the employee.
     * @type {string}
     * @memberof AdvanceEmploymentResponseInput
     */
    'pan'?: string;
    /**
     * It displays the UAN information of the employee.
     * @type {string}
     * @memberof AdvanceEmploymentResponseInput
     */
    'uan'?: string;
    /**
     * It displays the date of birth of the employee.
     * @type {string}
     * @memberof AdvanceEmploymentResponseInput
     */
    'dob'?: string;
    /**
     * It displays the name of the employee.
     * @type {string}
     * @memberof AdvanceEmploymentResponseInput
     */
    'employee_name'?: string;
    /**
     * It displays the name of the employer.
     * @type {string}
     * @memberof AdvanceEmploymentResponseInput
     */
    'employer_name'?: string;
}
/**
 * It contains the employment details of the individual.
 * @export
 * @interface AdvanceEmploymentResponseRecentEmploymentDetails
 */
export interface AdvanceEmploymentResponseRecentEmploymentDetails {
    /**
     * 
     * @type {AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetails
     */
    'employee_details'?: AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails;
    /**
     * 
     * @type {AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetails
     */
    'employer_details'?: AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails;
}
/**
 * It contains the details of the individual as an employee.
 * @export
 * @interface AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
 */
export interface AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails {
    /**
     * It displays the unique ID assigned to an individual.
     * @type {string}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
     */
    'member_id'?: string;
    /**
     * It displays the last working day of the employee in the organisation.
     * @type {string}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
     */
    'exit_date'?: string;
    /**
     * It displays the first working day of the employee in the organisation.
     * @type {string}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
     */
    'joining_date'?: string;
    /**
     * It displays the Universal Account Number (UAN) information of the employee.
     * @type {string}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
     */
    'uan'?: string;
    /**
     * 
     * @type {AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
     */
    'epfo'?: AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo;
    /**
     * It displays whether the individual is employed.
     * @type {boolean}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
     */
    'employed'?: boolean;
    /**
     * It displays whether the individual\'s name matches with the name found in EPFO.
     * @type {boolean}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
     */
    'employee_name_match'?: boolean;
    /**
     * It displays whether the last working  
     * @type {boolean}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
     */
    'exit_date_marked'?: boolean;
}
/**
 * It contains the information found in Employees\' Provident Fund Organisation (EPFO)
 * @export
 * @interface AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo
 */
export interface AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo {
    /**
     * It displays whether the retrieved information is recent.
     * @type {boolean}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo
     */
    'recent'?: boolean;
    /**
     * It displays whether the retrieved name is unique.
     * @type {boolean}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo
     */
    'name_unique'?: boolean;
    /**
     * It displays whether the PF filing details are true.
     * @type {boolean}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo
     */
    'pf_filings_details'?: boolean;
}
/**
 * 
 * @export
 * @interface AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails
 */
export interface AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails {
    /**
     * 
     * @type {string}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails
     */
    'establishment_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails
     */
    'establishment_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails
     */
    'setup_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails
     */
    'ownership_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails
     */
    'employer_confidence_score'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails
     */
    'employer_name_match'?: boolean;
    /**
     * 
     * @type {Array<AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetailsPfFilingDetailsInner>}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails
     */
    'pf_filing_details'?: Array<AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetailsPfFilingDetailsInner>;
}
/**
 * 
 * @export
 * @interface AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetailsPfFilingDetailsInner
 */
export interface AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetailsPfFilingDetailsInner {
    /**
     * 
     * @type {number}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetailsPfFilingDetailsInner
     */
    'total_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetailsPfFilingDetailsInner
     */
    'employees_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetailsPfFilingDetailsInner
     */
    'wage_month'?: string;
}
/**
 * It contains the information in individual components.
 * @export
 * @interface AdvanceEmploymentResponseUanDetailsInner
 */
export interface AdvanceEmploymentResponseUanDetailsInner {
    /**
     * It displays the Universal Account Number (UAN) information of the employee.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInner
     */
    'uan'?: string;
    /**
     * It displays the
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInner
     */
    'source'?: string;
    /**
     * It displays the
     * @type {number}
     * @memberof AdvanceEmploymentResponseUanDetailsInner
     */
    'source_score'?: number;
    /**
     * 
     * @type {AdvanceEmploymentResponseUanDetailsInnerBasicDetails}
     * @memberof AdvanceEmploymentResponseUanDetailsInner
     */
    'basic_details'?: AdvanceEmploymentResponseUanDetailsInnerBasicDetails;
    /**
     * 
     * @type {AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails}
     * @memberof AdvanceEmploymentResponseUanDetailsInner
     */
    'employment_details'?: AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails;
    /**
     * 
     * @type {AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails}
     * @memberof AdvanceEmploymentResponseUanDetailsInner
     */
    'additional_details'?: AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails;
}
/**
 * It contains additional information of the individual.
 * @export
 * @interface AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails
 */
export interface AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails {
    /**
     * It displays the aadhaar information of the individual.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails
     */
    'aadhaar'?: string;
    /**
     * It displays the email address of the individual.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails
     */
    'email'?: string;
    /**
     * It displays the PAN information of the individual.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails
     */
    'pan'?: string;
    /**
     * It displays the IFSC information of the individual\'s bank account.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails
     */
    'ifsc'?: string;
    /**
     * It displays the bank account number of the individual.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails
     */
    'bank_account'?: string;
    /**
     * It displays the address of the bank.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails
     */
    'bank_address'?: string;
    /**
     * It displays the realtionship of the individual with the relative.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails
     */
    'relation'?: string;
    /**
     * It displays the name of the relative.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails
     */
    'relative_name'?: string;
}
/**
 * It displays the basic information of the employee.
 * @export
 * @interface AdvanceEmploymentResponseUanDetailsInnerBasicDetails
 */
export interface AdvanceEmploymentResponseUanDetailsInnerBasicDetails {
    /**
     * It displays the gender of the employee.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerBasicDetails
     */
    'gender'?: string;
    /**
     * It displays the date of birth of the employee.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerBasicDetails
     */
    'dob'?: string;
    /**
     * It displays the confidence score for the employee.
     * @type {number}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerBasicDetails
     */
    'employee_confidence_score'?: number;
    /**
     * It displays the name of the employee.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerBasicDetails
     */
    'employee_name'?: string;
    /**
     * It displays the phone number of the employee.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerBasicDetails
     */
    'phone'?: string;
    /**
     * It displays where the aadhaar information of the employee is verified.
     * @type {boolean}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerBasicDetails
     */
    'aadhaar_verified'?: boolean;
}
/**
 * It contains the employement details of the individual.
 * @export
 * @interface AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails
 */
export interface AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails {
    /**
     * It displays the unique ID assigned to an individual.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails
     */
    'member_id'?: string;
    /**
     * It displays the unique ID assigned to a specific establishment or business entity.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails
     */
    'establishment_id'?: string;
    /**
     * It displays the last working day of the employee in the organisation.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails
     */
    'exit_date'?: string;
    /**
     * It displays the first working day of the employee in the organisation.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails
     */
    'joining_date'?: string;
    /**
     * It displays the reason for leaving the previous job.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails
     */
    'leave_reason'?: string;
    /**
     * It displays the name of the organisation.
     * @type {string}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails
     */
    'establishment_name'?: string;
    /**
     * It displays the
     * @type {number}
     * @memberof AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails
     */
    'employer_confidence_score'?: number;
}
/**
 * 
 * @export
 * @interface AuthResponseSchema
 */
export interface AuthResponseSchema {
    /**
     * The timestamp (in IST) when the token will expire. A new token must be generated after this time.
     * @type {string}
     * @memberof AuthResponseSchema
     */
    'expiry'?: string;
    /**
     * The generated access token to be used for subsequent VKYC API calls.
     * @type {string}
     * @memberof AuthResponseSchema
     */
    'access_token'?: string;
}
/**
 * It contains information regarding any badges or emblems affixed to the vehicle. These badges could indicate various things such as the vehicle\'s model, trim level, special editions, or manufacturer-specific badges.
 * @export
 * @interface BadgeDetails
 */
export interface BadgeDetails {
    /**
     * It displays the date of the badge issued.
     * @type {string}
     * @memberof BadgeDetails
     */
    'badge_issue_date'?: string;
    /**
     * It displays the number of the badge issued.
     * @type {string}
     * @memberof BadgeDetails
     */
    'badge_no'?: string;
    /**
     * It displays the class of the vehicle.
     * @type {Array<string>}
     * @memberof BadgeDetails
     */
    'class_of_vehicle'?: Array<string>;
}
/**
 * Find the request parameters to verify a large number of PAN information
 * @export
 * @interface BulkPanRequestSchema
 */
export interface BulkPanRequestSchema {
    /**
     * It is the unique ID you create to identify the API request. Only alphanumeric and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof BulkPanRequestSchema
     */
    'bulk_verification_id'?: string;
    /**
     * It is the array of PAN details for verification. PAN and name should be included. The name parameter is optional.
     * @type {Array<BulkPanRequestSchemaEntriesInner>}
     * @memberof BulkPanRequestSchema
     */
    'entries'?: Array<BulkPanRequestSchemaEntriesInner>;
}
/**
 * 
 * @export
 * @interface BulkPanRequestSchemaEntriesInner
 */
export interface BulkPanRequestSchemaEntriesInner {
    /**
     * It is the name of the individual as registered in the PAN information.
     * @type {string}
     * @memberof BulkPanRequestSchemaEntriesInner
     */
    'name': string;
    /**
     * It is the PAN information of the individual.
     * @type {string}
     * @memberof BulkPanRequestSchemaEntriesInner
     */
    'pan': string;
}
/**
 * Find the request parameters to retrieve CIN information
 * @export
 * @interface CinRequestSchema
 */
export interface CinRequestSchema {
    /**
     * It is the unique ID you create to identify the API request. The maximum character limit is 50. Alphanumeric, period (.), hyphen (-). and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof CinRequestSchema
     */
    'verification_id': string;
    /**
     * It is the unique alphanumeric identifier assigned to companies registered under the Ministry of Corporate Affairs, India.
     * @type {string}
     * @memberof CinRequestSchema
     */
    'cin': string;
}
/**
 * Success response for retrieving CIN information
 * @export
 * @interface CinResponseSchema
 */
export interface CinResponseSchema {
    /**
     * It displays the unique ID you created to identify the API request.
     * @type {string}
     * @memberof CinResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof CinResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the status of the CIN information
     * @type {string}
     * @memberof CinResponseSchema
     */
    'status'?: string;
    /**
     * It displays the entered CIN information.
     * @type {string}
     * @memberof CinResponseSchema
     */
    'cin'?: string;
    /**
     * It displays the name of the company registered under the Ministry of Corporate Affaris.
     * @type {string}
     * @memberof CinResponseSchema
     */
    'company_name'?: string;
    /**
     * It displays the registration number of the company.
     * @type {number}
     * @memberof CinResponseSchema
     */
    'registration_number'?: number;
    /**
     * It displays the date of incorporation of the company.
     * @type {string}
     * @memberof CinResponseSchema
     */
    'incorporation_date'?: string;
    /**
     * It displays the granular level status of the CIN information.
     * @type {string}
     * @memberof CinResponseSchema
     */
    'cin_status'?: string;
    /**
     * It displays the email ID of the company registered under the Ministry of Company Affairs.
     * @type {string}
     * @memberof CinResponseSchema
     */
    'email'?: string;
    /**
     * It displays the name of the country where the company is located.
     * @type {string}
     * @memberof CinResponseSchema
     */
    'incorporation_country'?: string;
    /**
     * 
     * @type {Array<CinResponseSchemaDirectorDetailsInner>}
     * @memberof CinResponseSchema
     */
    'director_details'?: Array<CinResponseSchemaDirectorDetailsInner>;
}
/**
 * It displays the details of the director of the company.
 * @export
 * @interface CinResponseSchemaDirectorDetailsInner
 */
export interface CinResponseSchemaDirectorDetailsInner {
    /**
     * It displays the date of birth of the director.
     * @type {string}
     * @memberof CinResponseSchemaDirectorDetailsInner
     */
    'dob'?: string;
    /**
     * It displays the designation of the director.
     * @type {string}
     * @memberof CinResponseSchemaDirectorDetailsInner
     */
    'designation'?: string;
    /**
     * It displays the address information of the director.
     * @type {string}
     * @memberof CinResponseSchemaDirectorDetailsInner
     */
    'address'?: string;
    /**
     * It displays the unique identification number assigned to individuals who are appointed as directors of companies in India.
     * @type {string}
     * @memberof CinResponseSchemaDirectorDetailsInner
     */
    'din'?: string;
    /**
     * It displays the name of the director.
     * @type {string}
     * @memberof CinResponseSchemaDirectorDetailsInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CreateAuthRequestSchema
 */
export interface CreateAuthRequestSchema {
    /**
     * It is the unique identifier for the OAuth application. This is used to authenticate and authorize the application making the request. **Note**: Please contact your Account Manager to create an `app_id` for the VKYC product. In the future, this will be self-serve via the Merchant Dashboard.
     * @type {string}
     * @memberof CreateAuthRequestSchema
     */
    'app_id': string;
    /**
     * The product for which the authentication token is generated. In this case, it should be \"VKYC\".
     * @type {string}
     * @memberof CreateAuthRequestSchema
     */
    'product': string;
    /**
     * 
     * @type {CreateAuthRequestSchemaMetadata}
     * @memberof CreateAuthRequestSchema
     */
    'metadata': CreateAuthRequestSchemaMetadata;
    /**
     * 
     * @type {CreateAuthRequestSchemaAuthenticatedUser}
     * @memberof CreateAuthRequestSchema
     */
    'authenticated_user': CreateAuthRequestSchemaAuthenticatedUser;
}
/**
 * The identifier of the authenticated user.
 * @export
 * @interface CreateAuthRequestSchemaAuthenticatedUser
 */
export interface CreateAuthRequestSchemaAuthenticatedUser {
    /**
     * It defines the type of identifier used to identify the user.
     * @type {string}
     * @memberof CreateAuthRequestSchemaAuthenticatedUser
     */
    'identifier_type': string;
    /**
     * It is the value of the identifier used to identify the user.
     * @type {string}
     * @memberof CreateAuthRequestSchemaAuthenticatedUser
     */
    'identifier_value': string;
}
/**
 * The metadata associated with the authentication token.
 * @export
 * @interface CreateAuthRequestSchemaMetadata
 */
export interface CreateAuthRequestSchemaMetadata {
    /**
     * It is the unique identifier for the VKYC request, used for associating the access token with a specific verification session.
     * @type {string}
     * @memberof CreateAuthRequestSchemaMetadata
     */
    'vkyc_request_id': string;
}
/**
 * Find the request parameters to create a reverse penny order request
 * @export
 * @interface CreateRequestRequestSchema
 */
export interface CreateRequestRequestSchema {
    /**
     * It is the unique ID you create to identify the API request. The maximum character limit is 50. Only alphanumeric, hyphen (-), period (.), and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof CreateRequestRequestSchema
     */
    'verification_id'?: string;
    /**
     * It is the name of the UPI VPA account holder.
     * @type {string}
     * @memberof CreateRequestRequestSchema
     */
    'name'?: string;
}
/**
 * Success response for creating a reverse penny order request=
 * @export
 * @interface CreateRequestResponseSchema
 */
export interface CreateRequestResponseSchema {
    /**
     * It displays the unique ID you created to identify this API request.
     * @type {string}
     * @memberof CreateRequestResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof CreateRequestResponseSchema
     */
    'ref_id'?: number;
    /**
     * It displays the time validity of the order request,
     * @type {string}
     * @memberof CreateRequestResponseSchema
     */
    'valid_upto'?: string;
    /**
     * It displays the generated UPI link for the reverse penny order request.
     * @type {string}
     * @memberof CreateRequestResponseSchema
     */
    'upi_link'?: string;
    /**
     * It displays the generated Paytm link for the reverse penny order request.
     * @type {string}
     * @memberof CreateRequestResponseSchema
     */
    'paytm'?: string;
    /**
     * It displays the generated BHIM link for the reverse penny order request.
     * @type {string}
     * @memberof CreateRequestResponseSchema
     */
    'bhim'?: string;
    /**
     * It displays the generated Gpay link for the reverse penny order request.
     * @type {string}
     * @memberof CreateRequestResponseSchema
     */
    'gpay'?: string;
    /**
     * It displays the generated Phonepe link for the reverse penny order request.
     * @type {string}
     * @memberof CreateRequestResponseSchema
     */
    'phonepe'?: string;
    /**
     * It displays the generated QR code for the reverse penny order request.
     * @type {string}
     * @memberof CreateRequestResponseSchema
     */
    'qr_code'?: string;
}
/**
 * Find the request parameters to create a DigiLocker URL for document verification
 * @export
 * @interface DigiLockerVerificationCreateUrlRequestSchema
 */
export interface DigiLockerVerificationCreateUrlRequestSchema {
    /**
     * It is the unique ID you create to identify the API request. The maximum character limit is 50. Alphanumeric, period (.), hyphen (-). and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof DigiLockerVerificationCreateUrlRequestSchema
     */
    'verification_id': string;
    /**
     * It is the list of customer documents required for verification.
     * @type {Array<string>}
     * @memberof DigiLockerVerificationCreateUrlRequestSchema
     */
    'document_requested': Array<DigiLockerVerificationCreateUrlRequestSchemaDocumentRequestedEnum>;
    /**
     * It is the URL that you need to provide that takes the user to after completing the DigiLocker journey. It will contain the verification_id that can be used to get the status of the verification.
     * @type {string}
     * @memberof DigiLockerVerificationCreateUrlRequestSchema
     */
    'redirect_url'?: string;
}

export const DigiLockerVerificationCreateUrlRequestSchemaDocumentRequestedEnum = {
    AADHAAR: 'AADHAAR',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;

export type DigiLockerVerificationCreateUrlRequestSchemaDocumentRequestedEnum = typeof DigiLockerVerificationCreateUrlRequestSchemaDocumentRequestedEnum[keyof typeof DigiLockerVerificationCreateUrlRequestSchemaDocumentRequestedEnum];

/**
 * Success response for creating a DigiLocker URL for document verification
 * @export
 * @interface DigiLockerVerificationCreateUrlResponseSchema
 */
export interface DigiLockerVerificationCreateUrlResponseSchema {
    /**
     * It displays the unique ID you created to identify this API request.
     * @type {string}
     * @memberof DigiLockerVerificationCreateUrlResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof DigiLockerVerificationCreateUrlResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the URL received to retrieve and verify aadhaar information from DigiLocker.
     * @type {string}
     * @memberof DigiLockerVerificationCreateUrlResponseSchema
     */
    'url'?: string;
    /**
     * It displays the status of the verification request.
     * @type {string}
     * @memberof DigiLockerVerificationCreateUrlResponseSchema
     */
    'status'?: string;
    /**
     * It displays the list of documents requested for verification.
     * @type {Array<string>}
     * @memberof DigiLockerVerificationCreateUrlResponseSchema
     */
    'document_requested'?: Array<string>;
    /**
     * It displays the URL entered in the request that takes the user to after completing the DigiLocker journey. 
     * @type {string}
     * @memberof DigiLockerVerificationCreateUrlResponseSchema
     */
    'redirect_url'?: string;
}
/**
 * Success response for Get DigiLocker Document API
 * @export
 * @interface DigiLockerVerificationGetDocumentResponseSchema
 */
export interface DigiLockerVerificationGetDocumentResponseSchema {
    /**
     * It displays the name of the parent or guardian.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchema
     */
    'care_of'?: string;
    /**
     * It displays the date of birth of the individual.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchema
     */
    'dob'?: string;
    /**
     * It displays the gender of the individual.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchema
     */
    'gender'?: string;
    /**
     * It displays the name of the individual.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchema
     */
    'name'?: string;
    /**
     * It displays the link to the photo of the individual present in the document.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchema
     */
    'photo_link'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof DigiLockerVerificationGetDocumentResponseSchema
     */
    'reference_id'?: number;
    /**
     * 
     * @type {DigiLockerVerificationGetDocumentResponseSchemaSplitAddress}
     * @memberof DigiLockerVerificationGetDocumentResponseSchema
     */
    'split_address'?: DigiLockerVerificationGetDocumentResponseSchemaSplitAddress;
    /**
     * It displays the unique number assigned to the individual when applying for the aadhaar card.]
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchema
     */
    'uid'?: string;
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchema
     */
    'verification_id'?: string;
}
/**
 * It contains the address information in individual components.
 * @export
 * @interface DigiLockerVerificationGetDocumentResponseSchemaSplitAddress
 */
export interface DigiLockerVerificationGetDocumentResponseSchemaSplitAddress {
    /**
     * It displays the name of the country as present in the document.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchemaSplitAddress
     */
    'country'?: string;
    /**
     * It displays the name of the district as present in the document.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchemaSplitAddress
     */
    'dist'?: string;
    /**
     * It displays the name of the house as present in the document.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchemaSplitAddress
     */
    'house'?: string;
    /**
     * It displays the name of the landmark as present in the document.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchemaSplitAddress
     */
    'landmark'?: string;
    /**
     * It displays the PIN code as present in the document.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchemaSplitAddress
     */
    'pincode'?: string;
    /**
     * It displays the name of the post office as present in the document.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchemaSplitAddress
     */
    'po'?: string;
    /**
     * It displays the name of the state as present in the document.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchemaSplitAddress
     */
    'state'?: string;
    /**
     * It displays the name of the street as present in the document.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchemaSplitAddress
     */
    'street'?: string;
    /**
     * It displays the name of the sub district as present in the document.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchemaSplitAddress
     */
    'subdist'?: string;
    /**
     * It displays the name of the VTC (village, town, city) as present in the address.
     * @type {string}
     * @memberof DigiLockerVerificationGetDocumentResponseSchemaSplitAddress
     */
    'vtc'?: string;
}
/**
 * Success response of Get DigiLocker Verification Status
 * @export
 * @interface DigiLockerVerificationGetStatusResponseSchema
 */
export interface DigiLockerVerificationGetStatusResponseSchema {
    /**
     * 
     * @type {DigiLockerVerificationGetStatusResponseSchemaUserDetails}
     * @memberof DigiLockerVerificationGetStatusResponseSchema
     */
    'user_details'?: DigiLockerVerificationGetStatusResponseSchemaUserDetails;
    /**
     * It displays the status of the API request.
     * @type {string}
     * @memberof DigiLockerVerificationGetStatusResponseSchema
     */
    'status'?: string;
    /**
     * It contains the information of the requested document(s) for verification.
     * @type {Array<string>}
     * @memberof DigiLockerVerificationGetStatusResponseSchema
     */
    'document_requested'?: Array<string>;
    /**
     * It displays the consent of the individual(user) for document verification.
     * @type {Array<string>}
     * @memberof DigiLockerVerificationGetStatusResponseSchema
     */
    'document_consent'?: Array<string>;
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof DigiLockerVerificationGetStatusResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof DigiLockerVerificationGetStatusResponseSchema
     */
    'reference_id'?: number;
}
/**
 * It displays the details of the individual(user).
 * @export
 * @interface DigiLockerVerificationGetStatusResponseSchemaUserDetails
 */
export interface DigiLockerVerificationGetStatusResponseSchemaUserDetails {
    /**
     * It displays the name of the individual.
     * @type {string}
     * @memberof DigiLockerVerificationGetStatusResponseSchemaUserDetails
     */
    'name'?: string;
    /**
     * It displays the date of birth of the individual.
     * @type {string}
     * @memberof DigiLockerVerificationGetStatusResponseSchemaUserDetails
     */
    'dob'?: string;
    /**
     * It displays the gender of the individual.
     * @type {string}
     * @memberof DigiLockerVerificationGetStatusResponseSchemaUserDetails
     */
    'gender'?: string;
    /**
     * It displays the e aadhaar availability of the individual.
     * @type {string}
     * @memberof DigiLockerVerificationGetStatusResponseSchemaUserDetails
     */
    'eaadhaar'?: string;
    /**
     * It displays the mobile number of the individual.
     * @type {string}
     * @memberof DigiLockerVerificationGetStatusResponseSchemaUserDetails
     */
    'mobile'?: string;
}
/**
 * It contains the details of the driving licence.
 * @export
 * @interface DrivingLicenceDetails
 */
export interface DrivingLicenceDetails {
    /**
     * 
     * @type {string}
     * @memberof DrivingLicenceDetails
     */
    'date_of_issue'?: string;
    /**
     * 
     * @type {string}
     * @memberof DrivingLicenceDetails
     */
    'date_of_last_transaction'?: string;
    /**
     * 
     * @type {string}
     * @memberof DrivingLicenceDetails
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof DrivingLicenceDetails
     */
    'last_transacted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DrivingLicenceDetails
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DrivingLicenceDetails
     */
    'father_or_husband_name'?: string;
    /**
     * 
     * @type {Array<AddressDetails>}
     * @memberof DrivingLicenceDetails
     */
    'address_list'?: Array<AddressDetails>;
    /**
     * 
     * @type {string}
     * @memberof DrivingLicenceDetails
     */
    'address'?: string;
    /**
     * 
     * @type {DrivingLicenceDetailsSplitAddress}
     * @memberof DrivingLicenceDetails
     */
    'split_address'?: DrivingLicenceDetailsSplitAddress;
    /**
     * 
     * @type {Array<object>}
     * @memberof DrivingLicenceDetails
     */
    'cov_details'?: Array<object>;
}
/**
 * 
 * @export
 * @interface DrivingLicenceDetailsSplitAddress
 */
export interface DrivingLicenceDetailsSplitAddress {
    /**
     * 
     * @type {Array<string>}
     * @memberof DrivingLicenceDetailsSplitAddress
     */
    'district'?: Array<string>;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof DrivingLicenceDetailsSplitAddress
     */
    'state'?: Array<Array<string>>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DrivingLicenceDetailsSplitAddress
     */
    'city'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DrivingLicenceDetailsSplitAddress
     */
    'pincode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DrivingLicenceDetailsSplitAddress
     */
    'country'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DrivingLicenceDetailsSplitAddress
     */
    'address_line'?: string;
}
/**
 * Find the request parameters to retrieve driving licence information
 * @export
 * @interface DrivingLicenseRequestSchema
 */
export interface DrivingLicenseRequestSchema {
    /**
     * It is the unique ID you create to identify the verification request. A maximum of 50 characters are allowed. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof DrivingLicenseRequestSchema
     */
    'verification_id': string;
    /**
     * It is the driving licence number of the individual for verification.
     * @type {string}
     * @memberof DrivingLicenseRequestSchema
     */
    'dl_number': string;
    /**
     * It is the date of birth of the individual as present in the driving licence. The accepted format is YYYY-MM-DD.
     * @type {string}
     * @memberof DrivingLicenseRequestSchema
     */
    'dob': string;
}
/**
 * Success response for retrieving driving licence information
 * @export
 * @interface DrivingLicenseResponseSchema
 */
export interface DrivingLicenseResponseSchema {
    /**
     * It displays the unique ID you created to identify this API request.
     * @type {string}
     * @memberof DrivingLicenseResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof DrivingLicenseResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the unique number assigned to the driving licence.
     * @type {string}
     * @memberof DrivingLicenseResponseSchema
     */
    'dl_number'?: string;
    /**
     * It displays the date of birth of the individual as present in the driving licence.
     * @type {string}
     * @memberof DrivingLicenseResponseSchema
     */
    'dob'?: string;
    /**
     * It displays whether the driving licence is valid.
     * @type {string}
     * @memberof DrivingLicenseResponseSchema
     */
    'status'?: string;
    /**
     * It contains the...
     * @type {Array<BadgeDetails>}
     * @memberof DrivingLicenseResponseSchema
     */
    'badge_details'?: Array<BadgeDetails>;
    /**
     * 
     * @type {DrivingLicenseResponseSchemaDlValidity}
     * @memberof DrivingLicenseResponseSchema
     */
    'dl_validity'?: DrivingLicenseResponseSchemaDlValidity;
    /**
     * 
     * @type {DrivingLicenceDetails}
     * @memberof DrivingLicenseResponseSchema
     */
    'details_of_driving_licence'?: DrivingLicenceDetails;
}
/**
 * It contains the different information regarding the validity of the licence.
 * @export
 * @interface DrivingLicenseResponseSchemaDlValidity
 */
export interface DrivingLicenseResponseSchemaDlValidity {
    /**
     * 
     * @type {ValidityDetails}
     * @memberof DrivingLicenseResponseSchemaDlValidity
     */
    'non_transport'?: ValidityDetails;
    /**
     * It displays till when the individual can drive hazardous vehicle.
     * @type {string}
     * @memberof DrivingLicenseResponseSchemaDlValidity
     */
    'hazardous_valid_till'?: string;
    /**
     * 
     * @type {ValidityDetails}
     * @memberof DrivingLicenseResponseSchemaDlValidity
     */
    'transport'?: ValidityDetails;
    /**
     * It displays till when the individual can drive the vehicle in hill and mountain regions.
     * @type {string}
     * @memberof DrivingLicenseResponseSchemaDlValidity
     */
    'hill_valid_till'?: string;
}
/**
 * 400 response for duplicate verification_id
 * @export
 * @interface DuplicateVerificationId
 */
export interface DuplicateVerificationId {
    /**
     * It displays the type of error.
     * @type {string}
     * @memberof DuplicateVerificationId
     */
    'type'?: string;
    /**
     * It displays the outcome or status of the API request.
     * @type {string}
     * @memberof DuplicateVerificationId
     */
    'code'?: string;
    /**
     * It displays details about the failure of the API request.
     * @type {string}
     * @memberof DuplicateVerificationId
     */
    'message'?: string;
}
/**
 * Find the request parameters to add the details of the document and signer(s)
 * @export
 * @interface ESignVerificationCreateSignatureRequestSchema
 */
export interface ESignVerificationCreateSignatureRequestSchema {
    /**
     * It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof ESignVerificationCreateSignatureRequestSchema
     */
    'verification_id': string;
    /**
     * It is the unique ID received in the Upload Document for E-Sign API response.
     * @type {number}
     * @memberof ESignVerificationCreateSignatureRequestSchema
     */
    'document_id': number;
    /**
     * It is how you want to notify the signee about the e-sign details.
     * @type {Array<string>}
     * @memberof ESignVerificationCreateSignatureRequestSchema
     */
    'notification_modes': Array<ESignVerificationCreateSignatureRequestSchemaNotificationModesEnum>;
    /**
     * It is the type of authentication to be used for signature.
     * @type {string}
     * @memberof ESignVerificationCreateSignatureRequestSchema
     */
    'auth_type': ESignVerificationCreateSignatureRequestSchemaAuthTypeEnum;
    /**
     * It is the expiry of the signing link for each signer in days. The maximum allowed time is 15 days.
     * @type {string}
     * @memberof ESignVerificationCreateSignatureRequestSchema
     */
    'expiry_in_days': string;
    /**
     * It should contain the details of the signer(s).
     * @type {Array<ESignVerificationCreateSignatureRequestSchemaSignersInner>}
     * @memberof ESignVerificationCreateSignatureRequestSchema
     */
    'signers': Array<ESignVerificationCreateSignatureRequestSchemaSignersInner>;
    /**
     * It is the URL that you need to provide that takes the user to after completing the e-sign journey. It will contain the verification_id that can be used to get the status of the verification.
     * @type {string}
     * @memberof ESignVerificationCreateSignatureRequestSchema
     */
    'redirect_url'?: string;
}

export const ESignVerificationCreateSignatureRequestSchemaNotificationModesEnum = {
    EMAIL: 'email',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;

export type ESignVerificationCreateSignatureRequestSchemaNotificationModesEnum = typeof ESignVerificationCreateSignatureRequestSchemaNotificationModesEnum[keyof typeof ESignVerificationCreateSignatureRequestSchemaNotificationModesEnum];
export const ESignVerificationCreateSignatureRequestSchemaAuthTypeEnum = {
    AADHAAR: 'AADHAAR',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;

export type ESignVerificationCreateSignatureRequestSchemaAuthTypeEnum = typeof ESignVerificationCreateSignatureRequestSchemaAuthTypeEnum[keyof typeof ESignVerificationCreateSignatureRequestSchemaAuthTypeEnum];

/**
 * 
 * @export
 * @interface ESignVerificationCreateSignatureRequestSchemaSignersInner
 */
export interface ESignVerificationCreateSignatureRequestSchemaSignersInner {
    /**
     * It is the name of the signer.
     * @type {string}
     * @memberof ESignVerificationCreateSignatureRequestSchemaSignersInner
     */
    'name': string;
    /**
     * It is the email ID of the signer.
     * @type {string}
     * @memberof ESignVerificationCreateSignatureRequestSchemaSignersInner
     */
    'email': string;
    /**
     * It is the phone number of the signer.
     * @type {string}
     * @memberof ESignVerificationCreateSignatureRequestSchemaSignersInner
     */
    'phone'?: string;
    /**
     * It displays the sequence of the signer to sign the document. The value can be between 1 to n where n is number of signers.
     * @type {number}
     * @memberof ESignVerificationCreateSignatureRequestSchemaSignersInner
     */
    'sequence': number;
    /**
     * It displays the page wise coordinates of the rectangular space for signature placement.
     * @type {Array<ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner>}
     * @memberof ESignVerificationCreateSignatureRequestSchemaSignersInner
     */
    'sign_positions': Array<ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner>;
}
/**
 * 
 * @export
 * @interface ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner
 */
export interface ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner {
    /**
     * It is the page number where the signer places the signature.
     * @type {number}
     * @memberof ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner
     */
    'page': number;
    /**
     * It is the top left X coordinate of the signature area (rectangular).
     * @type {number}
     * @memberof ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner
     */
    'top_left_x_coordinate': number;
    /**
     * It is the bottom right X coordinate of the signature area (rectangular).
     * @type {number}
     * @memberof ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner
     */
    'bottom_right_x_coordinate': number;
    /**
     * It is the top left Y coordinate of the signature area (rectangular).
     * @type {number}
     * @memberof ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner
     */
    'top_left_y_coordinate': number;
    /**
     * It is the bottom right Y coordinate of the signature area (rectangular).
     * @type {number}
     * @memberof ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner
     */
    'bottom_right_y_coordinate': number;
}
/**
 * Success response for Create E-Sign RequestR
 * @export
 * @interface ESignVerificationCreateSignatureResponseSchema
 */
export interface ESignVerificationCreateSignatureResponseSchema {
    /**
     * It displays the status of the API request.
     * @type {string}
     * @memberof ESignVerificationCreateSignatureResponseSchema
     */
    'status'?: string;
    /**
     * It displays the unique ID you created to identify the API request.
     * @type {string}
     * @memberof ESignVerificationCreateSignatureResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof ESignVerificationCreateSignatureResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the unique ID created by Cashfree Payments to identify the document. You receive this ID in the response of Upload Document For E-Sign API.
     * @type {number}
     * @memberof ESignVerificationCreateSignatureResponseSchema
     */
    'document_id'?: number;
    /**
     * It displays the link to proceed with the e-signature of the document.
     * @type {string}
     * @memberof ESignVerificationCreateSignatureResponseSchema
     */
    'signing_link'?: string;
}
/**
 * Success response for Get E-Sign Status
 * @export
 * @interface ESignVerificationGetStatusResponseSchema
 */
export interface ESignVerificationGetStatusResponseSchema {
    /**
     * It displays the status of the e-signature.
     * @type {string}
     * @memberof ESignVerificationGetStatusResponseSchema
     */
    'status'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof ESignVerificationGetStatusResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the unique ID created by you to identify the API request.
     * @type {string}
     * @memberof ESignVerificationGetStatusResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments to identify the uploaded document.
     * @type {number}
     * @memberof ESignVerificationGetStatusResponseSchema
     */
    'document_id'?: number;
    /**
     * It contains the details of the signer(s).
     * @type {Array<ESignVerificationGetStatusResponseSchemaSignersInner>}
     * @memberof ESignVerificationGetStatusResponseSchema
     */
    'signers'?: Array<ESignVerificationGetStatusResponseSchemaSignersInner>;
    /**
     * It displays the link of the signed document.
     * @type {string}
     * @memberof ESignVerificationGetStatusResponseSchema
     */
    'signed_doc_url'?: string;
}
/**
 * 
 * @export
 * @interface ESignVerificationGetStatusResponseSchemaSignersInner
 */
export interface ESignVerificationGetStatusResponseSchemaSignersInner {
    /**
     * It displays the name of the signer.
     * @type {string}
     * @memberof ESignVerificationGetStatusResponseSchemaSignersInner
     */
    'name': string;
    /**
     * It displays the signature status of the signer.
     * @type {string}
     * @memberof ESignVerificationGetStatusResponseSchemaSignersInner
     */
    'status': string;
    /**
     * It displays whether the signer is informed of the e-signature of the document.
     * @type {boolean}
     * @memberof ESignVerificationGetStatusResponseSchemaSignersInner
     */
    'is_notified': boolean;
}
/**
 * Find the request parameters to upload the document that requires an e-signature.
 * @export
 * @interface ESignVerificationUploadDocumentRequestSchema
 */
export interface ESignVerificationUploadDocumentRequestSchema {
    /**
     * Upload the document that requires an e-sign. Allowed file type - PDF. Max file size allowed - 10MB.
     * @type {File}
     * @memberof ESignVerificationUploadDocumentRequestSchema
     */
    'document': File;
}
/**
 * Success response for Upload Document For E-Sign
 * @export
 * @interface ESignVerificationUploadDocumentResponseSchema
 */
export interface ESignVerificationUploadDocumentResponseSchema {
    /**
     * It displays the status of the API request.
     * @type {string}
     * @memberof ESignVerificationUploadDocumentResponseSchema
     */
    'status'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments to identify the uploaded document.
     * @type {number}
     * @memberof ESignVerificationUploadDocumentResponseSchema
     */
    'document_id'?: number;
}
/**
 * Response in case of error.
 * @export
 * @interface ErrorResponseSchema
 */
export interface ErrorResponseSchema {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseSchema
     */
    'code'?: string;
    /**
     * 
     * @type {object}
     * @memberof ErrorResponseSchema
     */
    'error'?: object;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseSchema
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseSchema
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface FaceLiveness200ResponseSchema
 */
export interface FaceLiveness200ResponseSchema {
    /**
     * Unique reference ID generated by Cashfree.
     * @type {number}
     * @memberof FaceLiveness200ResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the unique ID you created to identify this API request.
     * @type {string}
     * @memberof FaceLiveness200ResponseSchema
     */
    'verification_id'?: string;
    /**
     * The status of the face liveness verification request.  Possible values: - SUCCESS: Face verification completed successfully - REAL_FACE_NOT_DETECTED: The submitted image does not contain a real face - MULTIPLE_FACES_DETECTED: More than one face detected in the image - FACE_NOT_DETECTED: No face detected in the submitted image 
     * @type {string}
     * @memberof FaceLiveness200ResponseSchema
     */
    'status'?: string;
    /**
     * Indicates whether the detected face exhibits signs of being from a live person.
     * @type {boolean}
     * @memberof FaceLiveness200ResponseSchema
     */
    'liveness'?: boolean;
    /**
     * A confidence score between 0 and 1 indicating the probability that the face is from a live person.
     * @type {number}
     * @memberof FaceLiveness200ResponseSchema
     */
    'liveness_score'?: number;
    /**
     * 
     * @type {FaceLiveness200ResponseSchemaGender}
     * @memberof FaceLiveness200ResponseSchema
     */
    'gender'?: FaceLiveness200ResponseSchemaGender;
    /**
     * 
     * @type {FaceLiveness200ResponseSchemaAgeRange}
     * @memberof FaceLiveness200ResponseSchema
     */
    'age_range'?: FaceLiveness200ResponseSchemaAgeRange;
    /**
     * 
     * @type {FaceLiveness200ResponseSchemaEyeWear}
     * @memberof FaceLiveness200ResponseSchema
     */
    'eye_wear'?: FaceLiveness200ResponseSchemaEyeWear;
    /**
     * 
     * @type {FaceLiveness200ResponseSchemaFaceOccluded}
     * @memberof FaceLiveness200ResponseSchema
     */
    'face_occluded'?: FaceLiveness200ResponseSchemaFaceOccluded;
    /**
     * 
     * @type {FaceLiveness200ResponseSchemaQuality}
     * @memberof FaceLiveness200ResponseSchema
     */
    'quality'?: FaceLiveness200ResponseSchemaQuality;
    /**
     * 
     * @type {FaceLiveness200ResponseSchemaPose}
     * @memberof FaceLiveness200ResponseSchema
     */
    'pose'?: FaceLiveness200ResponseSchemaPose;
    /**
     * 
     * @type {FaceLiveness200ResponseSchemaEyesOpen}
     * @memberof FaceLiveness200ResponseSchema
     */
    'eyes_open'?: FaceLiveness200ResponseSchemaEyesOpen;
}
/**
 * 
 * @export
 * @interface FaceLiveness200ResponseSchemaAgeRange
 */
export interface FaceLiveness200ResponseSchemaAgeRange {
    /**
     * Lower bound of the estimated age range.
     * @type {number}
     * @memberof FaceLiveness200ResponseSchemaAgeRange
     */
    'min'?: number;
    /**
     * Upper bound of the estimated age range.
     * @type {number}
     * @memberof FaceLiveness200ResponseSchemaAgeRange
     */
    'max'?: number;
}
/**
 * 
 * @export
 * @interface FaceLiveness200ResponseSchemaEyeWear
 */
export interface FaceLiveness200ResponseSchemaEyeWear {
    /**
     * Indicates whether the person is wearing glasses or other eyewear.
     * @type {boolean}
     * @memberof FaceLiveness200ResponseSchemaEyeWear
     */
    'value'?: boolean;
    /**
     * Confidence score for eyewear detection (0-100).
     * @type {number}
     * @memberof FaceLiveness200ResponseSchemaEyeWear
     */
    'confidence'?: number;
}
/**
 * 
 * @export
 * @interface FaceLiveness200ResponseSchemaEyesOpen
 */
export interface FaceLiveness200ResponseSchemaEyesOpen {
    /**
     * Indicates whether both eyes are open in the image.
     * @type {boolean}
     * @memberof FaceLiveness200ResponseSchemaEyesOpen
     */
    'value'?: boolean;
    /**
     * Confidence score for eyes open detection (0-100).
     * @type {number}
     * @memberof FaceLiveness200ResponseSchemaEyesOpen
     */
    'confidence'?: number;
}
/**
 * 
 * @export
 * @interface FaceLiveness200ResponseSchemaFaceOccluded
 */
export interface FaceLiveness200ResponseSchemaFaceOccluded {
    /**
     * Indicates whether the face is partially covered or obscured.
     * @type {boolean}
     * @memberof FaceLiveness200ResponseSchemaFaceOccluded
     */
    'value'?: boolean;
    /**
     * Confidence score for face occlusion detection (0-100).
     * @type {number}
     * @memberof FaceLiveness200ResponseSchemaFaceOccluded
     */
    'confidence'?: number;
}
/**
 * 
 * @export
 * @interface FaceLiveness200ResponseSchemaGender
 */
export interface FaceLiveness200ResponseSchemaGender {
    /**
     * Detected gender of the person in the image.
     * @type {string}
     * @memberof FaceLiveness200ResponseSchemaGender
     */
    'value'?: string;
    /**
     * Confidence score for gender detection (0-100).
     * @type {number}
     * @memberof FaceLiveness200ResponseSchemaGender
     */
    'confidence'?: number;
}
/**
 * 
 * @export
 * @interface FaceLiveness200ResponseSchemaPose
 */
export interface FaceLiveness200ResponseSchemaPose {
    /**
     * Direction of face alignment in the image.
     * @type {string}
     * @memberof FaceLiveness200ResponseSchemaPose
     */
    'face_alignment'?: FaceLiveness200ResponseSchemaPoseFaceAlignmentEnum;
    /**
     * Indicates whether the head is turned from the frontal position.
     * @type {boolean}
     * @memberof FaceLiveness200ResponseSchemaPose
     */
    'head_turned'?: boolean;
}

export const FaceLiveness200ResponseSchemaPoseFaceAlignmentEnum = {
    LEFT: 'LEFT',
    RIGHT: 'RIGHT',
    CENTRE: 'CENTRE',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;

export type FaceLiveness200ResponseSchemaPoseFaceAlignmentEnum = typeof FaceLiveness200ResponseSchemaPoseFaceAlignmentEnum[keyof typeof FaceLiveness200ResponseSchemaPoseFaceAlignmentEnum];

/**
 * 
 * @export
 * @interface FaceLiveness200ResponseSchemaQuality
 */
export interface FaceLiveness200ResponseSchemaQuality {
    /**
     * Indicates whether the image is blurry.
     * @type {boolean}
     * @memberof FaceLiveness200ResponseSchemaQuality
     */
    'blur'?: boolean;
    /**
     * Indicates whether the image has adequate lighting.
     * @type {boolean}
     * @memberof FaceLiveness200ResponseSchemaQuality
     */
    'bright'?: boolean;
    /**
     * Assessment of image exposure level.
     * @type {string}
     * @memberof FaceLiveness200ResponseSchemaQuality
     */
    'exposure'?: FaceLiveness200ResponseSchemaQualityExposureEnum;
}

export const FaceLiveness200ResponseSchemaQualityExposureEnum = {
    UNDER_EXPOSED: 'UNDER_EXPOSED',
    NEUTRAL: 'NEUTRAL',
    OVER_EXPOSED: 'OVER_EXPOSED',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
} as const;

export type FaceLiveness200ResponseSchemaQualityExposureEnum = typeof FaceLiveness200ResponseSchemaQualityExposureEnum[keyof typeof FaceLiveness200ResponseSchemaQualityExposureEnum];

/**
 * Find the request parameters to verify facial features in two images
 * @export
 * @interface FaceMatchRequestSchema
 */
export interface FaceMatchRequestSchema {
    /**
     * It is the unique ID you need to create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof FaceMatchRequestSchema
     */
    'verification_id': string;
    /**
     * It is the scanned copy of the image 1. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.
     * @type {File}
     * @memberof FaceMatchRequestSchema
     */
    'first_image': File;
    /**
     * It is the scanned copy of the image 2. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.
     * @type {File}
     * @memberof FaceMatchRequestSchema
     */
    'second_image': File;
    /**
     * It is the value to distinguish and match the facial features of the two images. The range is between 0 and 1. The default value is set as 0.7. We conclude that the images match when the analysis is or greater than the value set for threshold.
     * @type {string}
     * @memberof FaceMatchRequestSchema
     */
    'threshold'?: string;
    /**
     * It is a boolean value to identify whether the person in the first image is wearing a mask.
     * @type {boolean}
     * @memberof FaceMatchRequestSchema
     */
    'detect_mask_first_image'?: boolean;
    /**
     * It is a boolean value to identify whether the person in the first image is wearing a mask.
     * @type {boolean}
     * @memberof FaceMatchRequestSchema
     */
    'detect_mask_second_image'?: boolean;
    /**
     * It is a boolean value to align the images horizontally before analysing the facial features.
     * @type {boolean}
     * @memberof FaceMatchRequestSchema
     */
    'align_horizontally'?: boolean;
}
/**
 * Success response for Face Match API
 * @export
 * @interface FaceMatchResponseSchema
 */
export interface FaceMatchResponseSchema {
    /**
     * It displays the status of the API request.
     * @type {string}
     * @memberof FaceMatchResponseSchema
     */
    'status'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof FaceMatchResponseSchema
     */
    'ref_id'?: number;
    /**
     * It displays the unique ID you created to identify the API request.
     * @type {string}
     * @memberof FaceMatchResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the result of the face match verification request.
     * @type {string}
     * @memberof FaceMatchResponseSchema
     */
    'face_match_result'?: string;
    /**
     * It displays the score of the face match verification request.
     * @type {number}
     * @memberof FaceMatchResponseSchema
     */
    'face_match_score'?: number;
    /**
     * It displays whether the individual in the image 1 is wearing a mask.
     * @type {boolean}
     * @memberof FaceMatchResponseSchema
     */
    'maskDetected_first_image'?: boolean;
    /**
     * It displays the score of the mask detection analysis for image 1.
     * @type {string}
     * @memberof FaceMatchResponseSchema
     */
    'maskDetected_score_first_image'?: string;
    /**
     * It displays whether the individual in the image 1 is wearing a mask.
     * @type {boolean}
     * @memberof FaceMatchResponseSchema
     */
    'maskDetected_second_image'?: boolean;
    /**
     * It displays the score of the mask detection analysis for image 2.
     * @type {string}
     * @memberof FaceMatchResponseSchema
     */
    'maskDetected_score_second_image'?: string;
}
/**
 * Response for Verify Bulk PAN API
 * @export
 * @interface GetPanBulkResponseSchema
 */
export interface GetPanBulkResponseSchema {
    /**
     * It displays the unique ID created by you to identify the bulk verification request.
     * @type {string}
     * @memberof GetPanBulkResponseSchema
     */
    'bulk_verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {string}
     * @memberof GetPanBulkResponseSchema
     */
    'reference_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetPanBulkResponseSchema
     */
    'count'?: number;
    /**
     * It contains the details of PAN for verification.
     * @type {Array<GetVerifyPanResponseSchema>}
     * @memberof GetPanBulkResponseSchema
     */
    'entries'?: Array<GetVerifyPanResponseSchema>;
}
/**
 * Reverse penny drop verification successful
 * @export
 * @interface GetStatusRpdResponseSchema
 */
export interface GetStatusRpdResponseSchema {
    /**
     * It displays the bank account number of the individual.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'bank_account'?: string;
    /**
     * It displays the IFSC information of the individual\'s bank account.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'ifsc'?: string;
    /**
     * It displays the UPI VPA information of the individual.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'upi'?: string;
    /**
     * It displays the name of the individual registered in the bank records.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'name_at_bank'?: string;
    /**
     * It displays the unique ID created by you to identify the verifiation request.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'ref_id'?: string;
    /**
     * It displays the unique transaction reference (UTR) number created by the bank to identify the transaction.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'utr'?: string;
    /**
     * It displays the status of the API request.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'status'?: string;
    /**
     * It displays the score of the name match verification.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'name_match_score'?: string;
    /**
     * It displays the result of the name match verification.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'name_match_result'?: string;
    /**
     * It displays the date and time of when the request was added.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'added_on'?: string;
    /**
     * It displays the date and time of when the request was processed.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'processed_on'?: string;
    /**
     * It displays the date and time of when the 1 rupee was collected.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'penny_collected_on'?: string;
    /**
     * It displays the status of the rupee reversal.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'reversal_status'?: string;
    /**
     * It displays the type of account.
     * @type {string}
     * @memberof GetStatusRpdResponseSchema
     */
    'account_type'?: string;
}
/**
 * 
 * @export
 * @interface GetVKYCLinkResponseSchema
 */
export interface GetVKYCLinkResponseSchema {
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof GetVKYCLinkResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes. format: `int64`
     * @type {number}
     * @memberof GetVKYCLinkResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the status of the API request. Refer to [this link](https://www.cashfree.com/docs/api-reference/vrs/v2/video-kyc/vkyc-descriptions#status-substatus-mapping) for all possible values and their meanings.
     * @type {string}
     * @memberof GetVKYCLinkResponseSchema
     */
    'status'?: string;
    /**
     * It displays the sub status of the API request. Refer to [this link](https://www.cashfree.com/docs/api-reference/vrs/v2/video-kyc/vkyc-descriptions#status-substatus-mapping) for all possible values and their meanings.
     * @type {string}
     * @memberof GetVKYCLinkResponseSchema
     */
    'sub_status'?: string;
    /**
     * It displays the URL of the vKYC form.
     * @type {string}
     * @memberof GetVKYCLinkResponseSchema
     */
    'vkyc_link'?: string;
    /**
     * The date on which the vKYC link will expire.
     * @type {string}
     * @memberof GetVKYCLinkResponseSchema
     */
    'link_expiry'?: string;
    /**
     * The reference ID of the user for whom the VKYC link is generated.
     * @type {string}
     * @memberof GetVKYCLinkResponseSchema
     */
    'user_reference_id'?: string;
    /**
     * The user ID of the user for whom the VKYC link is generated.
     * @type {string}
     * @memberof GetVKYCLinkResponseSchema
     */
    'user_id'?: string;
    /**
     * The recording link of the VKYC for the request.
     * @type {string}
     * @memberof GetVKYCLinkResponseSchema
     */
    'recording_link'?: string;
    /**
     * The scheduled time for the VKYC meeting in UTC.
     * @type {string}
     * @memberof GetVKYCLinkResponseSchema
     */
    'meeting_schedule'?: string;
}
/**
 * Success response for Verify PAN Sync API
 * @export
 * @interface GetVerifyPanResponseSchema
 */
export interface GetVerifyPanResponseSchema {
    /**
     * It displays the unique 10-character alphanumeric identifier issued by the Income Tax Department.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'pan'?: string;
    /**
     * It displays the type of the PAN issued.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'type'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof GetVerifyPanResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the name entered in the API request.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'name_provided'?: string;
    /**
     * It displays the PAN registered name.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'registered_name'?: string;
    /**
     * It displays the status of the PAN card.
     * @type {boolean}
     * @memberof GetVerifyPanResponseSchema
     */
    'valid'?: boolean;
    /**
     * It displays the father\'s name of the PAN card holder.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'father_name'?: string;
    /**
     * It displays details about the success or failure of the API request.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'message'?: string;
    /**
     * It displays the score for the name match verification.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'name_match_score'?: string;
    /**
     * It displays the result of the name match verification.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'name_match_result'?: string;
    /**
     * It displays whether the individual linked the aadhaar information with PAN.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'aadhaar_seeding_status'?: string;
    /**
     * It displays the last updated date.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'last_updated_at'?: string;
    /**
     * It displays the name displayed on the PAN card.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'name_pan_card'?: string;
    /**
     * It displays the status of the PAN card.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'pan_status'?: string;
    /**
     * It displays additional information of the linking of aadhaar and PAN card.
     * @type {string}
     * @memberof GetVerifyPanResponseSchema
     */
    'aadhaar_seeding_status_desc'?: string;
}
/**
 * Find the request parameters to verify GSTIN information
 * @export
 * @interface GstinRequestSchema
 */
export interface GstinRequestSchema {
    /**
     * It is the unique number assigned to businesses registered under the Goods and Services Tax (GST) system in India.
     * @type {string}
     * @memberof GstinRequestSchema
     */
    'GSTIN': string;
    /**
     * It is the name of the business to which the GSTIN is issued. The maximum character limit is 100.
     * @type {string}
     * @memberof GstinRequestSchema
     */
    'businessName'?: string;
}
/**
 * Success response for Verify GSTIN
 * @export
 * @interface GstinResponseSchema
 */
export interface GstinResponseSchema {
    /**
     * It displays the unique identification number assigned to business registered under the Goods and Services Tax (GST) system in India.\"
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'GSTIN'?: string;
    /**
     * 
     * @type {Array<GstinResponseSchemaAdditionalAddressArrayInner>}
     * @memberof GstinResponseSchema
     */
    'additional_address_array'?: Array<GstinResponseSchemaAdditionalAddressArrayInner>;
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'cancellation_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'center_jurisdiction'?: string;
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'constitution_of_business'?: string;
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'date_of_registration'?: string;
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'gst_in_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'last_update_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'legal_name_of_business'?: string;
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'message'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GstinResponseSchema
     */
    'nature_of_business_activities'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'principal_place_address'?: string;
    /**
     * 
     * @type {number}
     * @memberof GstinResponseSchema
     */
    'reference_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'state_jurisdiction'?: string;
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'status_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchema
     */
    'taxpayer_type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GstinResponseSchema
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface GstinResponseSchemaAdditionalAddressArrayInner
 */
export interface GstinResponseSchemaAdditionalAddressArrayInner {
    /**
     * 
     * @type {string}
     * @memberof GstinResponseSchemaAdditionalAddressArrayInner
     */
    'address'?: string;
}
/**
 * 400 response for invalid IP address
 * @export
 * @interface InvalidIpAddress
 */
export interface InvalidIpAddress {
    /**
     * It displays the type of error.
     * @type {string}
     * @memberof InvalidIpAddress
     */
    'type'?: string;
    /**
     * It displays the outcome or status of the API request.
     * @type {string}
     * @memberof InvalidIpAddress
     */
    'code'?: string;
    /**
     * It displays details about the failure of the API request.
     * @type {string}
     * @memberof InvalidIpAddress
     */
    'message'?: string;
}
/**
 * Invalid document type response
 * @export
 * @interface Invaliddoctypeschema
 */
export interface Invaliddoctypeschema {
    /**
     * It displays the status of the document type.
     * @type {string}
     * @memberof Invaliddoctypeschema
     */
    'status'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof Invaliddoctypeschema
     */
    'reference_id'?: number;
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof Invaliddoctypeschema
     */
    'verification_id'?: string;
    /**
     * It displays details about the success or failure of the API request
     * @type {string}
     * @memberof Invaliddoctypeschema
     */
    'message'?: string;
}
/**
 * Find the request parameters to verify IP address
 * @export
 * @interface IpVerificationRequestSchema
 */
export interface IpVerificationRequestSchema {
    /**
     * It is the IP address that you need to verify which is assigned to a device connected to a computer network.
     * @type {string}
     * @memberof IpVerificationRequestSchema
     */
    'ip_address': string;
    /**
     * It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof IpVerificationRequestSchema
     */
    'verification_id': string;
}
/**
 * Verify IP success response
 * @export
 * @interface IpVerificationResponseSchema
 */
export interface IpVerificationResponseSchema {
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof IpVerificationResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof IpVerificationResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the status of the IP address.
     * @type {string}
     * @memberof IpVerificationResponseSchema
     */
    'status'?: string;
    /**
     * It displays the entered IP address.
     * @type {string}
     * @memberof IpVerificationResponseSchema
     */
    'ip_address'?: string;
    /**
     * It displays the category or classification of a proxy server based on its functionality and how it handles network requests.
     * @type {string}
     * @memberof IpVerificationResponseSchema
     */
    'proxy_type'?: string;
    /**
     * It displays the country code associated with the geographical location of the device or network to which the IP address is assigned.
     * @type {string}
     * @memberof IpVerificationResponseSchema
     */
    'country_code'?: string;
    /**
     * It displays the name of the country associated with the geographical location of the device or network to which the IP address is assigned.
     * @type {string}
     * @memberof IpVerificationResponseSchema
     */
    'country_name'?: string;
    /**
     * It displays the name of the region associated with the geographical location of the device or network to which the IP address is assigned.
     * @type {string}
     * @memberof IpVerificationResponseSchema
     */
    'region_name'?: string;
    /**
     * It displays the name of the city associated with the geographical location of the device or network to which the IP address is assigned.
     * @type {string}
     * @memberof IpVerificationResponseSchema
     */
    'city_name'?: string;
    /**
     * It displays the risk score associated with a particular city based on factors such as cybersecurity threats, crime rates, or other relevant data.
     * @type {string}
     * @memberof IpVerificationResponseSchema
     */
    'city_risk_score'?: string;
    /**
     * It displays the risk score associated with a particular city based on factors such as cybersecurity threats, crime rates, or other relevant data.
     * @type {string}
     * @memberof IpVerificationResponseSchema
     */
    'proxy_type_risk_score'?: string;
}
/**
 * Find the request parameters to check the liveliness in an image
 * @export
 * @interface LivelinessRequestSchema
 */
export interface LivelinessRequestSchema {
    /**
     * It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof LivelinessRequestSchema
     */
    'verification_id': string;
    /**
     * Upload the image of the individual to verify the liveliness of the image.
     * @type {File}
     * @memberof LivelinessRequestSchema
     */
    'image': File;
    /**
     * It is the boolean value to set the strictness check of the image. Default value for strict_check is false.
     * @type {boolean}
     * @memberof LivelinessRequestSchema
     */
    'strict_check'?: boolean;
}
/**
 * Find the request parameters for the Name Match API
 * @export
 * @interface NameMatchRequestSchema
 */
export interface NameMatchRequestSchema {
    /**
     * It is the unique ID you need to create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof NameMatchRequestSchema
     */
    'verification_id': string;
    /**
     * It is the name you want to verify.
     * @type {string}
     * @memberof NameMatchRequestSchema
     */
    'name_1': string;
    /**
     * It is the name you want to verify with name_1.
     * @type {string}
     * @memberof NameMatchRequestSchema
     */
    'name_2': string;
}
/**
 * Success response for Name Match API
 * @export
 * @interface NameMatchResponseSchema
 */
export interface NameMatchResponseSchema {
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof NameMatchResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof NameMatchResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the name you entered for verification.
     * @type {string}
     * @memberof NameMatchResponseSchema
     */
    'name_1'?: string;
    /**
     * It displays the name you entered for verificaiton with name_1.
     * @type {string}
     * @memberof NameMatchResponseSchema
     */
    'name_2'?: string;
    /**
     * It displays the status of the API request.
     * @type {string}
     * @memberof NameMatchResponseSchema
     */
    'status'?: string;
    /**
     * It displays the score of the name match verification.
     * @type {number}
     * @memberof NameMatchResponseSchema
     */
    'score'?: number;
    /**
     * It justifies the match score for the API request.
     * @type {string}
     * @memberof NameMatchResponseSchema
     */
    'reason'?: string;
}
/**
 * Find the request parameters to generate an OTP for aadhaar verification
 * @export
 * @interface OfflineAadhaarSendOtpRequestSchema
 */
export interface OfflineAadhaarSendOtpRequestSchema {
    /**
     * It is the unique 12-digit identification number issued by the Unique Identification Authority of India (UIDAI).
     * @type {string}
     * @memberof OfflineAadhaarSendOtpRequestSchema
     */
    'aadhaar_number': string;
}
/**
 * Success response for Generate OTP to Verify Aadhaar API
 * @export
 * @interface OfflineAadhaarSendOtpResponseSchema
 */
export interface OfflineAadhaarSendOtpResponseSchema {
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {string}
     * @memberof OfflineAadhaarSendOtpResponseSchema
     */
    'ref_id'?: string;
    /**
     * It displays the status of the API request.
     * @type {string}
     * @memberof OfflineAadhaarSendOtpResponseSchema
     */
    'status'?: string;
    /**
     * It displays details about the success or failure of the API request.
     * @type {string}
     * @memberof OfflineAadhaarSendOtpResponseSchema
     */
    'message'?: string;
}
/**
 * Find the request parameters to submit the OTP for aadhaar verification
 * @export
 * @interface OfflineAadhaarVerifyOtpRequestSchema
 */
export interface OfflineAadhaarVerifyOtpRequestSchema {
    /**
     * It is the OTP received on the registered phone number for offline aadhaar verification.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpRequestSchema
     */
    'otp': string;
    /**
     * It is the unique ID created by Cashfree Payments that you receive in the response of Generate OTP to Verify Aadhaar API.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpRequestSchema
     */
    'ref_id': string;
}
/**
 * Success response for Submit OTP for Aadhaar Verification
 * @export
 * @interface OfflineAadhaarVerifyOtpResponseSchema
 */
export interface OfflineAadhaarVerifyOtpResponseSchema {
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'ref_id'?: string;
    /**
     * It displays the status of the aadhaar information.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'status'?: string;
    /**
     * It displays details about the success or failure of the API request.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'message'?: string;
    /**
     * It displays the parent/guardian of the aadhaar card holder.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'care_of'?: string;
    /**
     * It displays the address information as present in the aadhaar card.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'address'?: string;
    /**
     * It displays the date of birth of the aadhaar card holder.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'dob'?: string;
    /**
     * It displays the email address of the aadhaar card holder.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'email'?: string;
    /**
     * It displays the gender of the aadhaar card holder.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'gender'?: string;
    /**
     * It displays the name of the aadhaar card holder.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'name'?: string;
    /**
     * It displays the year of birth of the aadhaar card holder.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'year_of_birth'?: string;
    /**
     * It displays the unique information about the device\'s hardware, software, and other characteristics.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'mobile_hash'?: string;
    /**
     * It displays the URL to the image present in the aadhaar card.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'photo_link'?: string;
    /**
     * 
     * @type {OfflineAadhaarVerifyOtpResponseSchemaSplitAddress}
     * @memberof OfflineAadhaarVerifyOtpResponseSchema
     */
    'split_address'?: OfflineAadhaarVerifyOtpResponseSchemaSplitAddress;
}
/**
 * It contains the address information in individual components.
 * @export
 * @interface OfflineAadhaarVerifyOtpResponseSchemaSplitAddress
 */
export interface OfflineAadhaarVerifyOtpResponseSchemaSplitAddress {
    /**
     * It displays the name of the country as present in the aadhaar card.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchemaSplitAddress
     */
    'country'?: string;
    /**
     * It displays the name of the district as present in the aadhaar card.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchemaSplitAddress
     */
    'dist'?: string;
    /**
     * It displays the house name/number as present in the aadhaar card.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchemaSplitAddress
     */
    'house'?: string;
    /**
     * It displays the name of the landmark as present in the aadhaar card.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchemaSplitAddress
     */
    'landmark'?: string;
    /**
     * It displays the PIN code information as present in the aadhaar card.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchemaSplitAddress
     */
    'pincode'?: string;
    /**
     * It displays the post office nearest to the address present.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchemaSplitAddress
     */
    'po'?: string;
    /**
     * It displays the name of the state as present in the aadhaar card.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchemaSplitAddress
     */
    'state'?: string;
    /**
     * It displays the name of the street as present in the aadhaar card.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchemaSplitAddress
     */
    'street'?: string;
    /**
     * It displays the name of the sub district as present in the aadhaar card.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchemaSplitAddress
     */
    'subdist'?: string;
    /**
     * It displays the village, town, city information as present in the aadhaar card.
     * @type {string}
     * @memberof OfflineAadhaarVerifyOtpResponseSchemaSplitAddress
     */
    'vtc'?: string;
}
/**
 * Find the request parameters to verify PAN information
 * @export
 * @interface PanAdvanceRequestSchema
 */
export interface PanAdvanceRequestSchema {
    /**
     * It is the unique 10-character alphanumeric identifier of the individual issued by the Income Tax Department. The first 5 should be alphabets followed by 4 numbers and the 10th character should again be an alphabet.
     * @type {string}
     * @memberof PanAdvanceRequestSchema
     */
    'pan': string;
    /**
     * It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof PanAdvanceRequestSchema
     */
    'verification_id': string;
    /**
     * It is the name of the PAN information holder.
     * @type {string}
     * @memberof PanAdvanceRequestSchema
     */
    'name'?: string;
}
/**
 * Success response for PAN Advance
 * @export
 * @interface PanAdvanceResponseSchema
 */
export interface PanAdvanceResponseSchema {
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof PanAdvanceResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the status of the PAN information.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'status'?: string;
    /**
     * It displays details about the success or failure of the API request.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'message'?: string;
    /**
     * It displays the PAN information entered in the API request.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'pan'?: string;
    /**
     * It displays the name entered in the API request.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'name_provided'?: string;
    /**
     * It displays the registererd name as present in the PAN information.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'registered_name'?: string;
    /**
     * It displays the name as present in the PAN information.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'name_pan_card'?: string;
    /**
     * It displays the type of the PAN issued.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'type'?: string;
    /**
     * It displays the gender of the individual as present in the PAN information.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'gender'?: string;
    /**
     * It displays the date of birth of the individual.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'date_of_birth'?: string;
    /**
     * It displays the masked aadhaar number of the individual.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'masked_aadhaar_number'?: string;
    /**
     * It displays the email ID of the individual.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'email'?: string;
    /**
     * It displays the mobile number of the individual.
     * @type {string}
     * @memberof PanAdvanceResponseSchema
     */
    'mobile_number'?: string;
    /**
     * It displays the aadhaar and PAN link status.
     * @type {boolean}
     * @memberof PanAdvanceResponseSchema
     */
    'aadhaar_linked'?: boolean;
    /**
     * 
     * @type {PanAdvanceResponseSchemaAddress}
     * @memberof PanAdvanceResponseSchema
     */
    'address'?: PanAdvanceResponseSchemaAddress;
}
/**
 * It displays the address information of the individual.
 * @export
 * @interface PanAdvanceResponseSchemaAddress
 */
export interface PanAdvanceResponseSchemaAddress {
    /**
     * It displays the complete address of the individual.
     * @type {string}
     * @memberof PanAdvanceResponseSchemaAddress
     */
    'full_address'?: string;
    /**
     * It displays the street name from the individual\'s address.
     * @type {string}
     * @memberof PanAdvanceResponseSchemaAddress
     */
    'street'?: string;
    /**
     * It displays the city name from the individual\'s address.
     * @type {string}
     * @memberof PanAdvanceResponseSchemaAddress
     */
    'city'?: string;
    /**
     * It displays the state name from the individual\'s address.
     * @type {string}
     * @memberof PanAdvanceResponseSchemaAddress
     */
    'state'?: string;
    /**
     * It displays the PIN code from the individual\'s address.
     * @type {number}
     * @memberof PanAdvanceResponseSchemaAddress
     */
    'pincode'?: number;
    /**
     * It displays the country name from the individual\'s address.
     * @type {string}
     * @memberof PanAdvanceResponseSchemaAddress
     */
    'country'?: string;
}
/**
 * Find the request parameters to verify PAN via OCR
 * @export
 * @interface PanOcrRequestSchema
 */
export interface PanOcrRequestSchema {
    /**
     * It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof PanOcrRequestSchema
     */
    'verification_id': string;
    /**
     * It is the scanned copy of the PAN card. Allowed file type - JPEG/JPG/PNG.
     * @type {File}
     * @memberof PanOcrRequestSchema
     */
    'front_image': File;
}
/**
 * PAN Verification via OCR success response
 * @export
 * @interface PanOcrResponseSchema
 */
export interface PanOcrResponseSchema {
    /**
     * It displays the name of the PAN holder.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'name'?: string;
    /**
     * It displays the name of the organisation the individual runs.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'organization_name'?: string;
    /**
     * It displays the type of PAN issued to the individual.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'pan_type'?: string;
    /**
     * It displays the incorporation date of the individual\'s organisation.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'date_of_incorporation'?: string;
    /**
     * It displays the date of birth of the individual.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'dob'?: string;
    /**
     * It displays the father\'s name of the individual.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'father'?: string;
    /**
     * It displays the entered PAN information in the request.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'pan'?: string;
    /**
     * It displays whethere the entered PAN information is valid.
     * @type {boolean}
     * @memberof PanOcrResponseSchema
     */
    'valid'?: boolean;
    /**
     * It displays the age of the individual.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'age'?: string;
    /**
     * It displays the status of the PAN information.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'status'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'reference_id'?: string;
    /**
     * It displays the unique ID you created to identify the request.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the level of confidence or reliability associated with the PAN verification.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'confidence_score'?: string;
    /**
     * It displays details about the success or failure of the API request.
     * @type {string}
     * @memberof PanOcrResponseSchema
     */
    'message'?: string;
}
/**
 * Find the request parameters to verify PAN
 * @export
 * @interface PanRequestSchema
 */
export interface PanRequestSchema {
    /**
     * It is the unique 10-character alphanumeric identifier of the individual issued by the Income Tax Department. The first 5 should be alphabets followed by 4 numbers and the 10th character should again be an alphabet.
     * @type {string}
     * @memberof PanRequestSchema
     */
    'pan': string;
    /**
     * It is the name of the individual.
     * @type {string}
     * @memberof PanRequestSchema
     */
    'name'?: string;
}
/**
 * Find the request parameters to fetch the list of GSTIN associated with PAN
 * @export
 * @interface PanToGstinRequestSchema
 */
export interface PanToGstinRequestSchema {
    /**
     * It is the unique 10-character alphanumeric identifier issued by the Income Tax Department.
     * @type {string}
     * @memberof PanToGstinRequestSchema
     */
    'pan': string;
    /**
     * It is the unique ID you create to identify the request. The maximum character limit is 50. Alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof PanToGstinRequestSchema
     */
    'verification_id': string;
}
/**
 * Success response for Fetch GSTIN with PAN
 * @export
 * @interface PanToGstinResponseSchema
 */
export interface PanToGstinResponseSchema {
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof PanToGstinResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the unique ID you create to identity the verification request.
     * @type {string}
     * @memberof PanToGstinResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the status of the API request. 
     * @type {string}
     * @memberof PanToGstinResponseSchema
     */
    'status'?: string;
    /**
     * It displays details about the success or failure of the API request.
     * @type {string}
     * @memberof PanToGstinResponseSchema
     */
    'message'?: string;
    /**
     * It displays the entered PAN information in the request.
     * @type {string}
     * @memberof PanToGstinResponseSchema
     */
    'pan'?: string;
    /**
     * It displays the list of GSTIN associated with the entered PAN.
     * @type {Array<PanToGstinResponseSchemaGstinListInner>}
     * @memberof PanToGstinResponseSchema
     */
    'gstin_list'?: Array<PanToGstinResponseSchemaGstinListInner>;
}
/**
 * 
 * @export
 * @interface PanToGstinResponseSchemaGstinListInner
 */
export interface PanToGstinResponseSchemaGstinListInner {
    /**
     * It displays the GSTIN information.
     * @type {string}
     * @memberof PanToGstinResponseSchemaGstinListInner
     */
    'gstin'?: string;
    /**
     * It displays the status of the GSTIN associated with the entered PAN.
     * @type {string}
     * @memberof PanToGstinResponseSchemaGstinListInner
     */
    'status'?: string;
    /**
     * It displays the name of the state.
     * @type {string}
     * @memberof PanToGstinResponseSchemaGstinListInner
     */
    'state'?: string;
}
/**
 * Find the request parameters to verify passport information
 * @export
 * @interface PassportVerificationRequestSchema
 */
export interface PassportVerificationRequestSchema {
    /**
     * It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof PassportVerificationRequestSchema
     */
    'verification_id': string;
    /**
     * It is the name of the passport holder.
     * @type {string}
     * @memberof PassportVerificationRequestSchema
     */
    'name'?: string;
    /**
     * It is the unique alphanumeric code that identifies an individual\'s passport application.
     * @type {string}
     * @memberof PassportVerificationRequestSchema
     */
    'file_number': string;
    /**
     * It is the date of birth of the passport holder. The format is YYYY-MM-DD.
     * @type {string}
     * @memberof PassportVerificationRequestSchema
     */
    'dob': string;
}
/**
 * Success response for Verify Passport
 * @export
 * @interface PassportVerificationResponseSchema
 */
export interface PassportVerificationResponseSchema {
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof PassportVerificationResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof PassportVerificationResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the status of the passport.
     * @type {string}
     * @memberof PassportVerificationResponseSchema
     */
    'status'?: string;
    /**
     * It displays the unique alphanumeric code that identifies an individual\'s passport application.
     * @type {string}
     * @memberof PassportVerificationResponseSchema
     */
    'file_number'?: string;
    /**
     * It displays the name of the passport holder.
     * @type {string}
     * @memberof PassportVerificationResponseSchema
     */
    'name'?: string;
    /**
     * It displays the date of birth of the passport holder.
     * @type {string}
     * @memberof PassportVerificationResponseSchema
     */
    'dob'?: string;
    /**
     * It displays the type of passport application.
     * @type {string}
     * @memberof PassportVerificationResponseSchema
     */
    'application_type'?: string;
    /**
     * It displays when the passport application was received.
     * @type {string}
     * @memberof PassportVerificationResponseSchema
     */
    'application_received_date'?: string;
}
/**
 * Success response for verifying a large number of PAN information
 * @export
 * @interface PostPanBulkResponseSchema
 */
export interface PostPanBulkResponseSchema {
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof PostPanBulkResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays details about the success or failure of the API request.
     * @type {string}
     * @memberof PostPanBulkResponseSchema
     */
    'message'?: string;
}
/**
 * Find the request parameters to convert geographic cooridnates into readable location
 * @export
 * @interface ReverseGeocodingRequestSchema
 */
export interface ReverseGeocodingRequestSchema {
    /**
     * It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof ReverseGeocodingRequestSchema
     */
    'verification_id': string;
    /**
     * It is the angular distance expressed in degrees of arc north or south of the equator to specify the location.
     * @type {string}
     * @memberof ReverseGeocodingRequestSchema
     */
    'latitude': string;
    /**
     * It is the angular distance expressed in degrees of arc east or west of the equator to specify the location.
     * @type {string}
     * @memberof ReverseGeocodingRequestSchema
     */
    'longitude': string;
}
/**
 * Reverse Geocoding success response
 * @export
 * @interface ReverseGeocodingResponseSchema
 */
export interface ReverseGeocodingResponseSchema {
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof ReverseGeocodingResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof ReverseGeocodingResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the entered angular distance expressed in degrees of arc north or south of the equator to specify the location.
     * @type {string}
     * @memberof ReverseGeocodingResponseSchema
     */
    'latitude'?: string;
    /**
     * It displays the entered angular distance expressed in degrees of arc east or west of the equator to specify the location.
     * @type {string}
     * @memberof ReverseGeocodingResponseSchema
     */
    'longitude'?: string;
    /**
     * It displays the physical address of the entered coordinates.
     * @type {string}
     * @memberof ReverseGeocodingResponseSchema
     */
    'address'?: string;
    /**
     * It displays the name of the city of the entered coordinates.
     * @type {string}
     * @memberof ReverseGeocodingResponseSchema
     */
    'city'?: string;
    /**
     * It displays the name of the state of the entered coordinates.
     * @type {string}
     * @memberof ReverseGeocodingResponseSchema
     */
    'state'?: string;
    /**
     * It displays the state\'s code of the entered coordinates.
     * @type {string}
     * @memberof ReverseGeocodingResponseSchema
     */
    'statecode'?: string;
    /**
     * It displays the country\'s code of the entered coordinates.
     * @type {string}
     * @memberof ReverseGeocodingResponseSchema
     */
    'countrycode'?: string;
    /**
     * It displays the PIN code information of the entered coordinates.
     * @type {string}
     * @memberof ReverseGeocodingResponseSchema
     */
    'pincode'?: string;
    /**
     * 
     * @type {number}
     * @memberof ReverseGeocodingResponseSchema
     */
    'score'?: number;
    /**
     * It displays the status of the entered coordinates.
     * @type {string}
     * @memberof ReverseGeocodingResponseSchema
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface SecurityQuestion
 */
export interface SecurityQuestion {
    /**
     * 
     * @type {number}
     * @memberof SecurityQuestion
     */
    'order': number;
    /**
     * 
     * @type {string}
     * @memberof SecurityQuestion
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof SecurityQuestion
     */
    'answer': string;
}
/**
 * It containts the address information in individual components.
 * @export
 * @interface SplitAddress
 */
export interface SplitAddress {
    /**
     * 
     * @type {Array<string>}
     * @memberof SplitAddress
     */
    'district'?: Array<string>;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof SplitAddress
     */
    'state'?: Array<Array<string>>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SplitAddress
     */
    'city'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SplitAddress
     */
    'pincode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SplitAddress
     */
    'country'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SplitAddress
     */
    'address_line'?: string;
}
/**
 * It contains the address information of the individual as present in the voter ID card.
 * @export
 * @interface SplitAddressSchema
 */
export interface SplitAddressSchema {
    /**
     * It displays the name of the district as present in the address information of the voter ID card.
     * @type {Array<string>}
     * @memberof SplitAddressSchema
     */
    'district'?: Array<string>;
    /**
     * It displays the name of the state as present in the address information of the voter ID card.
     * @type {Array<Array<string>>}
     * @memberof SplitAddressSchema
     */
    'state'?: Array<Array<string>>;
    /**
     * It displays the name of the city as present in the voter ID card.
     * @type {Array<string>}
     * @memberof SplitAddressSchema
     */
    'city'?: Array<string>;
    /**
     * It displays the PIN code information as present in the voter ID card.
     * @type {string}
     * @memberof SplitAddressSchema
     */
    'pincode'?: string;
    /**
     * It displays the name of the country as present in the voter ID card.
     * @type {Array<string>}
     * @memberof SplitAddressSchema
     */
    'country'?: Array<string>;
    /**
     * It displays the address information as present in the voter ID card.
     * @type {string}
     * @memberof SplitAddressSchema
     */
    'address_line'?: string;
}
/**
 * 
 * @export
 * @interface UpdateUserRequestSchema
 */
export interface UpdateUserRequestSchema {
    /**
     * It is the unique ID created by Cashfree Payments that you receive in the response of Create User for Secure ID API.
     * @type {number}
     * @memberof UpdateUserRequestSchema
     */
    'user_reference_id'?: number;
    /**
     * It is the unique ID you create to identify the user.
     * @type {string}
     * @memberof UpdateUserRequestSchema
     */
    'user_id'?: string;
    /**
     * It displays the email address of the user.
     * @type {string}
     * @memberof UpdateUserRequestSchema
     */
    'email'?: string;
    /**
     * It is the name of the user.
     * @type {string}
     * @memberof UpdateUserRequestSchema
     */
    'name'?: string;
    /**
     * It is the address of the user.
     * @type {string}
     * @memberof UpdateUserRequestSchema
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface UserResponseSchema
 */
export interface UserResponseSchema {
    /**
     * It is the unique ID you create to identify the user, or it is auto-generated by Cashfree if not provided in request.
     * @type {string}
     * @memberof UserResponseSchema
     */
    'user_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes. format: `int64`
     * @type {number}
     * @memberof UserResponseSchema
     */
    'user_reference_id'?: number;
    /**
     * The phone number of the user.
     * @type {string}
     * @memberof UserResponseSchema
     */
    'phone'?: string;
    /**
     * The email address of the user.
     * @type {string}
     * @memberof UserResponseSchema
     */
    'email'?: string;
    /**
     * The name of the user.
     * @type {string}
     * @memberof UserResponseSchema
     */
    'name'?: string;
    /**
     * The address of the user.
     * @type {string}
     * @memberof UserResponseSchema
     */
    'address'?: string;
}
/**
 * IP not found error response
 * @export
 * @interface V2ErrorResponse404SchemaIpVerification
 */
export interface V2ErrorResponse404SchemaIpVerification {
    /**
     * 
     * @type {string}
     * @memberof V2ErrorResponse404SchemaIpVerification
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof V2ErrorResponse404SchemaIpVerification
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof V2ErrorResponse404SchemaIpVerification
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface VKYCLinkRequestSchema
 */
export interface VKYCLinkRequestSchema {
    /**
     * It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphaumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof VKYCLinkRequestSchema
     */
    'verification_id': string;
    /**
     * It is the name of users vkyc template [more details](https://www.cashfree.com/docs/api-reference/vrs/v2/video-kyc/vkyc-descriptions#user-template-user-template).
     * @type {string}
     * @memberof VKYCLinkRequestSchema
     */
    'user_template'?: string;
    /**
     * It is the name of agents vkyc template [more details](https://www.cashfree.com/docs/api-reference/vrs/v2/video-kyc/vkyc-descriptions#agent-template-agent-template).
     * @type {string}
     * @memberof VKYCLinkRequestSchema
     */
    'agent_template'?: string;
    /**
     * It is the unique ID created by Cashfree Payments that you receive in the response of Create User for Secure ID API.
     * @type {number}
     * @memberof VKYCLinkRequestSchema
     */
    'user_reference_id'?: number;
    /**
     * It is the unique ID you create to identify the user in Create User for Secure ID API.
     * @type {string}
     * @memberof VKYCLinkRequestSchema
     */
    'user_id'?: string;
    /**
     * List of notification types that should be triggered for this request.
     * @type {Array<string>}
     * @memberof VKYCLinkRequestSchema
     */
    'notification_types'?: Array<string>;
    /**
     * 
     * @type {AadhaarDetails}
     * @memberof VKYCLinkRequestSchema
     */
    'aadhaar_details'?: AadhaarDetails;
    /**
     * 
     * @type {SecurityQuestion}
     * @memberof VKYCLinkRequestSchema
     */
    'security_questions'?: SecurityQuestion;
}
/**
 * 
 * @export
 * @interface VKYCLinkResponseSchema
 */
export interface VKYCLinkResponseSchema {
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof VKYCLinkResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes. format: `int64`
     * @type {number}
     * @memberof VKYCLinkResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the status of the API request. Refer to [this link](https://www.cashfree.com/docs/api-reference/vrs/v2/video-kyc/vkyc-descriptions#status-substatus-mapping) for all possible values and their meanings.
     * @type {string}
     * @memberof VKYCLinkResponseSchema
     */
    'status'?: string;
    /**
     * It displays the sub status of the API request. Refer to [this link](https://www.cashfree.com/docs/api-reference/vrs/v2/video-kyc/vkyc-descriptions#status-substatus-mapping) for all possible values and their meanings.
     * @type {string}
     * @memberof VKYCLinkResponseSchema
     */
    'sub_status'?: string;
    /**
     * It displays the URL of the vKYC form to be filled by the user.
     * @type {string}
     * @memberof VKYCLinkResponseSchema
     */
    'vkyc_link'?: string;
    /**
     * The date on which the vKYC link will expire.
     * @type {string}
     * @memberof VKYCLinkResponseSchema
     */
    'link_expiry'?: string;
    /**
     * The reference ID of the user for whom the VKYC link is generated.
     * @type {string}
     * @memberof VKYCLinkResponseSchema
     */
    'user_reference_id'?: string;
    /**
     * The user ID of the user for whom the VKYC link is generated.
     * @type {string}
     * @memberof VKYCLinkResponseSchema
     */
    'user_id'?: string;
    /**
     * 
     * @type {VKYCLinkResponseSchemaAadhaarDetails}
     * @memberof VKYCLinkResponseSchema
     */
    'aadhaar_details'?: VKYCLinkResponseSchemaAadhaarDetails;
    /**
     * List of security questions and answers.
     * @type {Array<VKYCLinkResponseSchemaSecurityQuestionsInner>}
     * @memberof VKYCLinkResponseSchema
     */
    'security_questions'?: Array<VKYCLinkResponseSchemaSecurityQuestionsInner>;
}
/**
 * Aadhaar information associated with the user.
 * @export
 * @interface VKYCLinkResponseSchemaAadhaarDetails
 */
export interface VKYCLinkResponseSchemaAadhaarDetails {
    /**
     * Timestamp when Aadhaar was last verified.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetails
     */
    'last_verified_at'?: string;
    /**
     * It displays the parent/guardian of the user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetails
     */
    'care_of'?: string;
    /**
     * It displays the date of birth of the user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetails
     */
    'dob'?: string;
    /**
     * It displays the gender of the user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetails
     */
    'gender'?: string;
    /**
     * It displays the name of the user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetails
     */
    'name'?: string;
    /**
     * It displays the URL to the image present in the aadhaar card.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetails
     */
    'photo_link'?: string;
    /**
     * 
     * @type {VKYCLinkResponseSchemaAadhaarDetailsSplitAddress}
     * @memberof VKYCLinkResponseSchemaAadhaarDetails
     */
    'split_address'?: VKYCLinkResponseSchemaAadhaarDetailsSplitAddress;
}
/**
 * Split address as extracted from Aadhaar.
 * @export
 * @interface VKYCLinkResponseSchemaAadhaarDetailsSplitAddress
 */
export interface VKYCLinkResponseSchemaAadhaarDetailsSplitAddress {
    /**
     * It displays the name of the country as present in the aadhaar card of user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetailsSplitAddress
     */
    'country'?: string;
    /**
     * It displays the name of the dist as present in the aadhaar card of user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetailsSplitAddress
     */
    'dist'?: string;
    /**
     * It displays the house name/number as present in the aadhaar card of user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetailsSplitAddress
     */
    'house'?: string;
    /**
     * It displays the PIN code information as present in the aadhaar card of user.
     * @type {number}
     * @memberof VKYCLinkResponseSchemaAadhaarDetailsSplitAddress
     */
    'pincode'?: number;
    /**
     * It displays the post office nearest to the address present in the aadhaar card of user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetailsSplitAddress
     */
    'po'?: string;
    /**
     * It displays the name of the state as present in the aadhaar card of user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetailsSplitAddress
     */
    'state'?: string;
    /**
     * It displays the name of the street as present in the aadhaar card of user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetailsSplitAddress
     */
    'street'?: string;
    /**
     * It displays the name of the sub district as present in the aadhaar card of user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetailsSplitAddress
     */
    'subdist'?: string;
    /**
     * It displays the village, town, city information as present in the aadhaar card of user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaAadhaarDetailsSplitAddress
     */
    'vtc'?: string;
}
/**
 * 
 * @export
 * @interface VKYCLinkResponseSchemaSecurityQuestionsInner
 */
export interface VKYCLinkResponseSchemaSecurityQuestionsInner {
    /**
     * Security question asked to the user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaSecurityQuestionsInner
     */
    'question'?: string;
    /**
     * Answer provided by the user.
     * @type {string}
     * @memberof VKYCLinkResponseSchemaSecurityQuestionsInner
     */
    'answer'?: string;
    /**
     * Order of the security question.
     * @type {number}
     * @memberof VKYCLinkResponseSchemaSecurityQuestionsInner
     */
    'order'?: number;
}
/**
 * It contains the validity details.
 * @export
 * @interface ValidityDetails
 */
export interface ValidityDetails {
    /**
     * 
     * @type {string}
     * @memberof ValidityDetails
     */
    'to'?: string;
    /**
     * 
     * @type {string}
     * @memberof ValidityDetails
     */
    'from'?: string;
}
/**
 * Find the request parameters to verify vehicle RC information
 * @export
 * @interface VehicleRcRequestSchema
 */
export interface VehicleRcRequestSchema {
    /**
     * It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof VehicleRcRequestSchema
     */
    'verification_id': string;
    /**
     * It is the registration number of the vehicle
     * @type {string}
     * @memberof VehicleRcRequestSchema
     */
    'vehicle_number': string;
}
/**
 * Verify Vehicle RC success response
 * @export
 * @interface VehicleRcResponseSchema
 */
export interface VehicleRcResponseSchema {
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof VehicleRcResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the status of the vehicle RC information.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'status'?: string;
    /**
     * It displays the registration number of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'reg_no'?: string;
    /**
     * It displays the category or type of the vehicle as recognised by the relevant transportation authorities.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'class'?: string;
    /**
     * It displays the chassis information of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'chassis'?: string;
    /**
     * It displays the engine number of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'engine'?: string;
    /**
     * It displays the manufacturer of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_manufacturer_name'?: string;
    /**
     * It displays the model number of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'model'?: string;
    /**
     * It displays the colour of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_color'?: string;
    /**
     * It displays the type of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'type'?: string;
    /**
     * It displays the norms set by the Central Pollution Control Board (CPCB)
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'norms_type'?: string;
    /**
     * It displays the body type of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'body_type'?: string;
    /**
     * It displays the number of owners of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'owner_count'?: string;
    /**
     * It displays the name of the current owner of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'owner'?: string;
    /**
     * It displays the father\'s name of the current owner of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'owner_father_name'?: string;
    /**
     * It displays the mobile number of the current owner of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'mobile_number'?: string;
    /**
     * It displays the status of the RC.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'rc_status'?: string;
    /**
     * It displays the particular date of the status of the RC.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'status_as_on'?: string;
    /**
     * It displays the name of the registration authority.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'reg_authority'?: string;
    /**
     * It displays the date of registration of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'reg_date'?: string;
    /**
     * It displays the month and year of the manufacturing of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_manufacturing_month_year'?: string;
    /**
     * It displays the date until which the registration of the vehicle is valid.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'rc_expiry_date'?: string;
    /**
     * It displays the date until which the tax paid by the owner for the vehicle is valid.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_tax_upto'?: string;
    /**
     * It displays the name of the insurance company associated with the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_insurance_company_name'?: string;
    /**
     * It displays the date until which the insurance paid by the owner for the vehicle is valid.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_insurance_upto'?: string;
    /**
     * It displays the insurance policy number of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_insurance_policy_number'?: string;
    /**
     * It displays the name of the financial institution or lender that provided financing for the purchase of a vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'rc_financer'?: string;
    /**
     * It displays the current address of the owner of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'present_address'?: string;
    /**
     * 
     * @type {SplitAddress}
     * @memberof VehicleRcResponseSchema
     */
    'split_present_address'?: SplitAddress;
    /**
     * It displays the permanent address of the owner of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'permanent_address'?: string;
    /**
     * 
     * @type {SplitAddress}
     * @memberof VehicleRcResponseSchema
     */
    'split_permanent_address'?: SplitAddress;
    /**
     * It displays the cubic capacity of the vehicle\'s engine.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_cubic_capacity'?: string;
    /**
     * It displays the gross weight of the vehicle in kilograms.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'gross_vehicle_weight'?: string;
    /**
     * It displays the weight of the vehicle without carrying any load in kiolgrams.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'unladen_weight'?: string;
    /**
     * It displays the category of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_category'?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'rc_standard_cap'?: string;
    /**
     * It displays the number of cylinders present in the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_cylinders_no'?: string;
    /**
     * It displays the number of seats in the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_seat_capacity'?: string;
    /**
     * It displays the number of beds available in the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_sleeper_capacity'?: string;
    /**
     * It displays the number of people that can stand in the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_standing_capacity'?: string;
    /**
     * It displays distance between the front and rear axles of a vehicle in mm.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'wheelbase'?: string;
    /**
     * It displays the registration number of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'vehicle_number'?: string;
    /**
     * It displays the Pollution Under Control Certificate (PUCC) number associated with vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'pucc_number'?: string;
    /**
     * It displays till when the PUCC number is valid.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'pucc_upto'?: string;
    /**
     * It displays whether the vehicle is blacklisted.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'blacklist_status'?: string;
    /**
     * It displays the reasons for blacklisting the vehicle.
     * @type {object}
     * @memberof VehicleRcResponseSchema
     */
    'blacklist_details'?: object;
    /**
     * It displays traffic tickets or citations issued by traffic police or authorities for various traffic violations.
     * @type {object}
     * @memberof VehicleRcResponseSchema
     */
    'challan_details'?: object;
    /**
     * It displays when the relevant authorities granted permission or authorisation for a specific type of permit associated with the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'permit_issue_date'?: string;
    /**
     * It displays the permit number of the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'permit_number'?: string;
    /**
     * It displays the type of permit issued to the vehicle.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'permit_type'?: string;
    /**
     * It displays the beginning date of the issuance of permit.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'permit_valid_from'?: string;
    /**
     * It displays the end date of the permit.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'permit_valid_upto'?: string;
    /**
     * It displays whether the vehicle owner or registrant declared that the vehicle is not in use for a certain period.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'non_use_status'?: string;
    /**
     * It displays the beginning date of the non use period.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'non_use_from'?: string;
    /**
     * It displays the end date of the non use period.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'non_use_to'?: string;
    /**
     * It displays the permit issued to the vehicle to go outside the home state carrying goods.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'national_permit_number'?: string;
    /**
     * It displays the end date of the permit issued to the vechicle to go outside the home state carrying goods.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'national_permit_upto'?: string;
    /**
     * It displays the national permit issuer\'s name.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'national_permit_issued_by'?: string;
    /**
     * It displays whether the vehicle is for commercial purpose.
     * @type {boolean}
     * @memberof VehicleRcResponseSchema
     */
    'is_commercial'?: boolean;
    /**
     * It displays the details of the no objection certificate.
     * @type {string}
     * @memberof VehicleRcResponseSchema
     */
    'noc_details'?: string;
}
/**
 * Find the request body parameters to verify the voter ID information.
 * @export
 * @interface VoterIdRequestSchema
 */
export interface VoterIdRequestSchema {
    /**
     * 
     * @type {string}
     * @memberof VoterIdRequestSchema
     */
    'verification_id': string;
    /**
     * It is the unique identification number assigned to each voter ID
     * @type {string}
     * @memberof VoterIdRequestSchema
     */
    'epic_number': string;
    /**
     * It is the name of the voter ID card holder.
     * @type {string}
     * @memberof VoterIdRequestSchema
     */
    'name'?: string;
}
/**
 * Verify Voter ID success response
 * @export
 * @interface VoterIdResponseSchema
 */
export interface VoterIdResponseSchema {
    /**
     * It displays the unique ID created by Cashfree Payments for reference purposes.
     * @type {number}
     * @memberof VoterIdResponseSchema
     */
    'reference_id'?: number;
    /**
     * It displays the unique ID you created to identify the verification request.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'verification_id'?: string;
    /**
     * It displays the status of the API request.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'status'?: string;
    /**
     * It displays the name of the individual as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'name'?: string;
    /**
     * It displays the name of the individual in the individual’s regional language as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'name_in_regional_lang'?: string;
    /**
     * It displays the age of the voter ID holder as present in the voter ID card
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'age'?: string;
    /**
     * It displays the type of the relationship with the parent/guardian as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'relation_type'?: string;
    /**
     * It displays the name of the parent/guardian as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'relation_name'?: string;
    /**
     * It displays the name of the parent/guardian in the individual’s regional language as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'relation_name_in_regional_lang'?: string;
    /**
     * It displays the father’s name of the individual as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'father_name'?: string;
    /**
     * It displays the date of birth of the individual as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'dob'?: string;
    /**
     * It displays the gender of the individual as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'gender'?: string;
    /**
     * It displays the address information of the individual as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'address'?: string;
    /**
     * 
     * @type {SplitAddressSchema}
     * @memberof VoterIdResponseSchema
     */
    'split_address'?: SplitAddressSchema;
    /**
     * It displays the EPIC number of the individual as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'epic_number'?: string;
    /**
     * It displays the name of the state as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'state'?: string;
    /**
     * It displays the number associated with the assembly constituency as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'assembly_constituency_number'?: string;
    /**
     * It displays the name of the assembly constituency as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'assembly_constituency'?: string;
    /**
     * It displays the number associated with the parliamentary constituency as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'parliamentary_constituency_number'?: string;
    /**
     * It displays the name of the parliamentary constituency as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'parliamentary_constituency'?: string;
    /**
     * It displays the part number in the electoral roll.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'part_number'?: string;
    /**
     * It displays the part name in the electoral roll.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'part_name'?: string;
    /**
     * It displays the serial number as present in the voter ID card.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'serial_number'?: string;
    /**
     * It displays the place where the individual cast votes during elections.
     * @type {string}
     * @memberof VoterIdResponseSchema
     */
    'polling_station'?: string;
}
/**
 * 400 response schema for missing x-client-id
 * @export
 * @interface XClientIdMissing
 */
export interface XClientIdMissing {
    /**
     * 
     * @type {string}
     * @memberof XClientIdMissing
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof XClientIdMissing
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof XClientIdMissing
     */
    'message'?: string;
}

/**
 * AadhaarApi - axios parameter creator
 * @export
 */
const AadhaarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to extract the details of a customer from the respective aadhaar card image and return it to the business for verification or for KYC requirements. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|    | 200      | SUCCESS | Aadhaar card is valid                                                   | -                                                                             |   | 200      | SUCCESS | Aadhaar card is invalid                                                         | Upload a valid aadhaar copy.                                                  |   | 400      | ERROR   | file size exceeded                                                      | The max file size of both the files is 10MB.                                  |   | 400      | ERROR   | please upload the file of valid format(jpeg/jpg/png)                    | Allowed file type - JPEG/JPG/PNG.                                             |   | 400      | ERROR   | verification_id is missing in the request.                              | Enter a unique verification ID in the request.                                |   | 400      | ERROR   | Front Image File is missing                                             | Upload the scanned image of the front of the aadhaar card.                    |   | 400      | ERROR   | verification_id can include a maximum of 50 characters.                 | Enter a unique verification ID within 50 characters.                          |   | 400      | ERROR   | verification_id can include only alphanum, dot, hyphen and underscores. | Only alphanumeric, hyphen (-), period (.), and underscore (   ) are allowed. |   | 400      | ERROR   | x-client-id is missing in the request                                   | Enter all the header information in the API request.                          |   | 401      | ERROR   | Invalid clientId and clientSecret combination                           | Enter valid client ID and secret key in the request.                          |   | 403      | ERROR   | IP not whitelisted                                                      | Whitelist the IP address.                                                     |   | 422      | ERROR   | Insufficient balance to process this request.                           | Ensure you have sufficient balance and then process the request.              |   | 500      | ERROR   | something went wrong                                                    | Try after some time.                                                          |
         * @summary Aadhaar OCR Verification
         
         * @param {string} verification_id It is the unique ID you create to identify the request. The maximum character limit is 50. Only alphanumeric, hyphen (-), period (.), and underscore ( _ ) are allowed.
         * @param {File} front_image It is the scanned image of the front of the aadhaar card. Allowed file type - JPEG/JPG/PNG. The max file size of both the files is 10MB.
         * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {File} [back_image] It is the scanned image of the back of the aadhaar card. Allowed file type - JPEG/JPG/PNG. The max file size of both the files is 10MB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_cf_signature?: string, 
         */
        vrsAadhaarOcrVerification: async (verification_id: string, front_image: File,  x_api_version?: string, x_cf_signature?: string, back_image?: File,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verification_id' is not null or undefined
            assertParamExists('vrsAadhaarOcrVerification', 'verification_id', verification_id)
            // verify required parameter 'front_image' is not null or undefined
            assertParamExists('vrsAadhaarOcrVerification', 'front_image', front_image)
            const localVarPath = `/document/aadhaar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


            if (verification_id !== undefined) { 
                localVarFormParams.append('verification_id', verification_id as any);
            }
    
            if (back_image !== undefined) { 
                localVarFormParams.append('back_image', back_image as any);
            }
    
            if (front_image !== undefined) { 
                localVarFormParams.append('front_image', front_image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to mask the first 8 digits of your customer\'s aadhaar number and block the QR code (if it exists). Masking aadhaar card of your customers ensures privacy and makes it storable in your database. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#aadhaar-masking) and use the information to trigger the validations. The test data are usable only in test environments such as gamma and sandbox.  ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|    | 200      | SUCCESS | VALID                                                      | -                                                                |   | 200      | SUCCESS | INVALID_DOCUMENT                                           | Upload a valid copy of the aadhaar.                              |   | 400      | ERROR   | x-client-id is missing in the request                      | Enter all the header information in the API request.             |   | 400      | ERROR   | image is missing in the request                      | Upload the image file of the aadhaar card that needs masking.             |   | 400      | ERROR   |verification_id can include only alphanum, dot, hyphen and underscores                      | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.             |   | 401      | ERROR   | Invalid clientId and clientSecret combination              | Enter valid client ID and secret key in the request.             |   | 403      | ERROR   | IP not whitelisted                                         | Whitelist the IP address.                                        |   | 409      | ERROR   | verification id already exists                             | Enter a unique verification ID.                                  |   | 413      | ERROR   | file size exceeded                                         | The maximum file size should be 10 MB.                           |   | 422      | ERROR   | Insufficient balance to process this request.              | Ensure you have sufficient balance and then process the request. |   | 500      | ERROR   | something went wrong                                       | Try after some time.   
         * @summary Aadhaar Masking
         
         * @param {File} image It is the image file of the aadhaar card that needs masking. Accepted formats - short, long, and PVC. Allowed file type - JPEG/JPG/PNG. The maximum file size should be 10 MB.
         * @param {string} verification_id It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsMaskAadhaar: async (image: File, verification_id: string,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('vrsMaskAadhaar', 'image', image)
            // verify required parameter 'verification_id' is not null or undefined
            assertParamExists('vrsMaskAadhaar', 'verification_id', verification_id)
            const localVarPath = `/aadhaar-masking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (verification_id !== undefined) { 
                localVarFormParams.append('verification_id', verification_id as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to generate OTP for a given aadhar number. The mobile number linked with the aadhaar information will receive the generated OTP. Use the generated OTP for offline aadhaar verification. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | OTP sent successfully                                      | Enter the OTP in the Submit OTP to Verify Aadhaar API.                      |   | 200      | SUCCESS | Aadhaar not linked to mobile number                        | Enter a valid aadhaar number linked to a mobile number to generate the OTP. |   | 200      | SUCCESS | Invalid Aadhaar Card                                       | Enter a valid aadhaar number.                                               |   | 400      | ERROR   | aadhaar Number should contain 12 characters.               | Enter a valid aadhaar number that has only 12 numeric digits.               |   | 400      | ERROR   | Please enter aadhaar number in numeric format              | Enter a valid aadhaar number that has only 12 numeric digits.               |   | 400      | ERROR   | Please enter aadhaar number in the request                 | Enter a valid aadhaar number.                                               |   | 400      | ERROR   | x-client-id is missing in the request                      | Enter all the header information in the API request.                        |   | 401      | ERROR   | Invalid clientId and clientSecret combination              | Enter valid client ID and secret key in the request.                        |   | 403      | ERROR   | IP not whitelisted                                         | Whitelist the IP address.                                                   |   | 409      | ERROR   | Otp generated for this aadhaar, please try after some time | Try again after some time.                                                  |   | 422      | ERROR   | Insufficient balance to process this request.              | Ensure you have sufficient balance and then process the request.            |   | 500      | ERROR   | something went wrong                                       | Try again after some time.                                                  |
         * @summary Generate OTP to Verify Aadhaar
         
         * @param {OfflineAadhaarSendOtpRequestSchema} OfflineAadhaarSendOtpRequestSchema Find the request parameters to generate OTP for a given aadhar number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsOfflineAadhaarSendOtp: async (OfflineAadhaarSendOtpRequestSchema: OfflineAadhaarSendOtpRequestSchema,   options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OfflineAadhaarSendOtpRequestSchema' is not null or undefined
            assertParamExists('vrsOfflineAadhaarSendOtp', 'OfflineAadhaarSendOtpRequestSchema', OfflineAadhaarSendOtpRequestSchema)
            const localVarPath = `/offline-aadhaar/otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(OfflineAadhaarSendOtpRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to verify aadhaar by submitting the OTP received on the mobile number linked to the aadhaar information. You also need to enter the reference ID received in the response of Generate OTP to Verify Aadhaar API. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | Aadhaar Card Exists                           | -                                                                                             |   | 400      | ERROR   | Session expired, please generate a new OTP    | Generate a new OTP using Generate OTP to Verify Aadhaar API.                                  |   | 400      | ERROR   | Invalid Aadhaar Card                          | -                                                                                             |   | 400      | ERROR   | Aadhaar not linked to mobile number           | Enter a valid aadhaar number linked to a mobile number in the Generate OTP to Verify Aadhaar. |   | 400      | ERROR   | Otp expired                                   | Generate a new OTP using Generate OTP to Verify Aadhaar API.                                  |   | 400      | ERROR   | Please enter a valid otp.                     | Enter the generated OTP.                                                                      |   | 400      | ERROR   | Please enter the otp in the request           | Enter the generated OTP.                                                                      |   | 400      | ERROR   | OTP entered is invalid                        | Enter the generated OTP.                                                                      |   | 400      | ERROR   | x-client-id is missing in the request         | Enter all the header information in the API request.                                          |   | 401      | ERROR   | Invalid clientId and clientSecret combination | Enter valid client ID and secret key in the request.                                          |   | 403      | ERROR   | IP not whitelisted                            | Whitelist the IP address.                                                                     |   | 422      | ERROR   | Insufficient balance to process this request. | Ensure you have sufficient balance and then process the request.                              |   | 500      | ERROR   | Unable to validate, please retry later                          | Try again after some time.                                                                    |
         * @summary Submit OTP to Verify Aadhaar
         
         * @param {OfflineAadhaarVerifyOtpRequestSchema} OfflineAadhaarVerifyOtpRequestSchema Find the request parameters to submit the generated OTP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsOfflineAadhaarVerifyOtp: async (OfflineAadhaarVerifyOtpRequestSchema: OfflineAadhaarVerifyOtpRequestSchema,   options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'OfflineAadhaarVerifyOtpRequestSchema' is not null or undefined
            assertParamExists('vrsOfflineAadhaarVerifyOtp', 'OfflineAadhaarVerifyOtpRequestSchema', OfflineAadhaarVerifyOtpRequestSchema)
            const localVarPath = `/offline-aadhaar/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(OfflineAadhaarVerifyOtpRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AadhaarApi - functional programming interface
 * @export
 */
const AadhaarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AadhaarApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to extract the details of a customer from the respective aadhaar card image and return it to the business for verification or for KYC requirements. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|    | 200      | SUCCESS | Aadhaar card is valid                                                   | -                                                                             |   | 200      | SUCCESS | Aadhaar card is invalid                                                         | Upload a valid aadhaar copy.                                                  |   | 400      | ERROR   | file size exceeded                                                      | The max file size of both the files is 10MB.                                  |   | 400      | ERROR   | please upload the file of valid format(jpeg/jpg/png)                    | Allowed file type - JPEG/JPG/PNG.                                             |   | 400      | ERROR   | verification_id is missing in the request.                              | Enter a unique verification ID in the request.                                |   | 400      | ERROR   | Front Image File is missing                                             | Upload the scanned image of the front of the aadhaar card.                    |   | 400      | ERROR   | verification_id can include a maximum of 50 characters.                 | Enter a unique verification ID within 50 characters.                          |   | 400      | ERROR   | verification_id can include only alphanum, dot, hyphen and underscores. | Only alphanumeric, hyphen (-), period (.), and underscore (   ) are allowed. |   | 400      | ERROR   | x-client-id is missing in the request                                   | Enter all the header information in the API request.                          |   | 401      | ERROR   | Invalid clientId and clientSecret combination                           | Enter valid client ID and secret key in the request.                          |   | 403      | ERROR   | IP not whitelisted                                                      | Whitelist the IP address.                                                     |   | 422      | ERROR   | Insufficient balance to process this request.                           | Ensure you have sufficient balance and then process the request.              |   | 500      | ERROR   | something went wrong                                                    | Try after some time.                                                          |
         * @summary Aadhaar OCR Verification
         * @param {string} verification_id It is the unique ID you create to identify the request. The maximum character limit is 50. Only alphanumeric, hyphen (-), period (.), and underscore ( _ ) are allowed.
         * @param {File} front_image It is the scanned image of the front of the aadhaar card. Allowed file type - JPEG/JPG/PNG. The max file size of both the files is 10MB.
         * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {File} [back_image] It is the scanned image of the back of the aadhaar card. Allowed file type - JPEG/JPG/PNG. The max file size of both the files is 10MB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsAadhaarOcrVerification(verification_id: string, front_image: File, x_api_version?: string, x_cf_signature?: string, back_image?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AadhaarOcrResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsAadhaarOcrVerification(verification_id, front_image, x_api_version, x_cf_signature, back_image, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to mask the first 8 digits of your customer\'s aadhaar number and block the QR code (if it exists). Masking aadhaar card of your customers ensures privacy and makes it storable in your database. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#aadhaar-masking) and use the information to trigger the validations. The test data are usable only in test environments such as gamma and sandbox.  ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|    | 200      | SUCCESS | VALID                                                      | -                                                                |   | 200      | SUCCESS | INVALID_DOCUMENT                                           | Upload a valid copy of the aadhaar.                              |   | 400      | ERROR   | x-client-id is missing in the request                      | Enter all the header information in the API request.             |   | 400      | ERROR   | image is missing in the request                      | Upload the image file of the aadhaar card that needs masking.             |   | 400      | ERROR   |verification_id can include only alphanum, dot, hyphen and underscores                      | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.             |   | 401      | ERROR   | Invalid clientId and clientSecret combination              | Enter valid client ID and secret key in the request.             |   | 403      | ERROR   | IP not whitelisted                                         | Whitelist the IP address.                                        |   | 409      | ERROR   | verification id already exists                             | Enter a unique verification ID.                                  |   | 413      | ERROR   | file size exceeded                                         | The maximum file size should be 10 MB.                           |   | 422      | ERROR   | Insufficient balance to process this request.              | Ensure you have sufficient balance and then process the request. |   | 500      | ERROR   | something went wrong                                       | Try after some time.   
         * @summary Aadhaar Masking
         * @param {File} image It is the image file of the aadhaar card that needs masking. Accepted formats - short, long, and PVC. Allowed file type - JPEG/JPG/PNG. The maximum file size should be 10 MB.
         * @param {string} verification_id It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsMaskAadhaar(image: File, verification_id: string, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AadhaarMaskingResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsMaskAadhaar(image, verification_id, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to generate OTP for a given aadhar number. The mobile number linked with the aadhaar information will receive the generated OTP. Use the generated OTP for offline aadhaar verification. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | OTP sent successfully                                      | Enter the OTP in the Submit OTP to Verify Aadhaar API.                      |   | 200      | SUCCESS | Aadhaar not linked to mobile number                        | Enter a valid aadhaar number linked to a mobile number to generate the OTP. |   | 200      | SUCCESS | Invalid Aadhaar Card                                       | Enter a valid aadhaar number.                                               |   | 400      | ERROR   | aadhaar Number should contain 12 characters.               | Enter a valid aadhaar number that has only 12 numeric digits.               |   | 400      | ERROR   | Please enter aadhaar number in numeric format              | Enter a valid aadhaar number that has only 12 numeric digits.               |   | 400      | ERROR   | Please enter aadhaar number in the request                 | Enter a valid aadhaar number.                                               |   | 400      | ERROR   | x-client-id is missing in the request                      | Enter all the header information in the API request.                        |   | 401      | ERROR   | Invalid clientId and clientSecret combination              | Enter valid client ID and secret key in the request.                        |   | 403      | ERROR   | IP not whitelisted                                         | Whitelist the IP address.                                                   |   | 409      | ERROR   | Otp generated for this aadhaar, please try after some time | Try again after some time.                                                  |   | 422      | ERROR   | Insufficient balance to process this request.              | Ensure you have sufficient balance and then process the request.            |   | 500      | ERROR   | something went wrong                                       | Try again after some time.                                                  |
         * @summary Generate OTP to Verify Aadhaar
         * @param {OfflineAadhaarSendOtpRequestSchema} OfflineAadhaarSendOtpRequestSchema Find the request parameters to generate OTP for a given aadhar number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsOfflineAadhaarSendOtp(OfflineAadhaarSendOtpRequestSchema: OfflineAadhaarSendOtpRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfflineAadhaarSendOtpResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsOfflineAadhaarSendOtp(OfflineAadhaarSendOtpRequestSchema, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to verify aadhaar by submitting the OTP received on the mobile number linked to the aadhaar information. You also need to enter the reference ID received in the response of Generate OTP to Verify Aadhaar API. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | Aadhaar Card Exists                           | -                                                                                             |   | 400      | ERROR   | Session expired, please generate a new OTP    | Generate a new OTP using Generate OTP to Verify Aadhaar API.                                  |   | 400      | ERROR   | Invalid Aadhaar Card                          | -                                                                                             |   | 400      | ERROR   | Aadhaar not linked to mobile number           | Enter a valid aadhaar number linked to a mobile number in the Generate OTP to Verify Aadhaar. |   | 400      | ERROR   | Otp expired                                   | Generate a new OTP using Generate OTP to Verify Aadhaar API.                                  |   | 400      | ERROR   | Please enter a valid otp.                     | Enter the generated OTP.                                                                      |   | 400      | ERROR   | Please enter the otp in the request           | Enter the generated OTP.                                                                      |   | 400      | ERROR   | OTP entered is invalid                        | Enter the generated OTP.                                                                      |   | 400      | ERROR   | x-client-id is missing in the request         | Enter all the header information in the API request.                                          |   | 401      | ERROR   | Invalid clientId and clientSecret combination | Enter valid client ID and secret key in the request.                                          |   | 403      | ERROR   | IP not whitelisted                            | Whitelist the IP address.                                                                     |   | 422      | ERROR   | Insufficient balance to process this request. | Ensure you have sufficient balance and then process the request.                              |   | 500      | ERROR   | Unable to validate, please retry later                          | Try again after some time.                                                                    |
         * @summary Submit OTP to Verify Aadhaar
         * @param {OfflineAadhaarVerifyOtpRequestSchema} OfflineAadhaarVerifyOtpRequestSchema Find the request parameters to submit the generated OTP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsOfflineAadhaarVerifyOtp(OfflineAadhaarVerifyOtpRequestSchema: OfflineAadhaarVerifyOtpRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfflineAadhaarVerifyOtpResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsOfflineAadhaarVerifyOtp(OfflineAadhaarVerifyOtpRequestSchema, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * AadhaarApi - object-oriented interface
 * @export
 * @class AadhaarApi
 * @extends {BaseAPI}
 */



/**
 * AdvancedEmploymentApi - axios parameter creator
 * @export
 */
const AdvancedEmploymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to to retrieve an individual\'s recent employment details such as member ID, joining date, and exit date of the company. Verifying the employment information of the individual mitigates risk and prevents fraud. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#employment-information) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                      | -   | 200              | SUCCESS       | EMPLOYMENT_DETAILS_NOT_FOUND                                      | Enter the correct information in the request.    | 400              | ERROR         | provided input combination is not valid                  | Enter a combination of values that help fetch the employment details.   | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Get Employment Details
         
         * @param {AdvanceEmploymentRequestSchema} AdvanceEmploymentRequestSchema Find the request parameters to retrieve employment details
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsAdvanceEmploymentVerification: async (AdvanceEmploymentRequestSchema: AdvanceEmploymentRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'AdvanceEmploymentRequestSchema' is not null or undefined
            assertParamExists('vrsAdvanceEmploymentVerification', 'AdvanceEmploymentRequestSchema', AdvanceEmploymentRequestSchema)
            const localVarPath = `/advance-employment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(AdvanceEmploymentRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdvancedEmploymentApi - functional programming interface
 * @export
 */
const AdvancedEmploymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdvancedEmploymentApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to to retrieve an individual\'s recent employment details such as member ID, joining date, and exit date of the company. Verifying the employment information of the individual mitigates risk and prevents fraud. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#employment-information) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                      | -   | 200              | SUCCESS       | EMPLOYMENT_DETAILS_NOT_FOUND                                      | Enter the correct information in the request.    | 400              | ERROR         | provided input combination is not valid                  | Enter a combination of values that help fetch the employment details.   | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Get Employment Details
         * @param {AdvanceEmploymentRequestSchema} AdvanceEmploymentRequestSchema Find the request parameters to retrieve employment details
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsAdvanceEmploymentVerification(AdvanceEmploymentRequestSchema: AdvanceEmploymentRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdvanceEmploymentResponse>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsAdvanceEmploymentVerification(AdvanceEmploymentRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * AdvancedEmploymentApi - object-oriented interface
 * @export
 * @class AdvancedEmploymentApi
 * @extends {BaseAPI}
 */



/**
 * AuthApi - axios parameter creator
 * @export
 */
const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to generate an authentication token required to initialize the Cashfree SDK. Provide your **app_id**, and product name (such as Video KYC) in the request body. The API returns an **access_token** and its expiry details.
         * @summary Create Auth Token to Initialise the SDK
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {CreateAuthRequestSchema} CreateAuthRequestSchema Request payload for create auth token to initialise the SDK.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsGenerateAuthToken: async (x_api_version: string, CreateAuthRequestSchema: CreateAuthRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('vrsGenerateAuthToken', 'x_api_version', x_api_version)
            // verify required parameter 'CreateAuthRequestSchema' is not null or undefined
            assertParamExists('vrsGenerateAuthToken', 'CreateAuthRequestSchema', CreateAuthRequestSchema)
            const localVarPath = `/oauth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CreateAuthRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to generate an authentication token required to initialize the Cashfree SDK. Provide your **app_id**, and product name (such as Video KYC) in the request body. The API returns an **access_token** and its expiry details.
         * @summary Create Auth Token to Initialise the SDK
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {CreateAuthRequestSchema} CreateAuthRequestSchema Request payload for create auth token to initialise the SDK.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsGenerateAuthToken(x_api_version: string, CreateAuthRequestSchema: CreateAuthRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsGenerateAuthToken(x_api_version, CreateAuthRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */



/**
 * CINApi - axios parameter creator
 * @export
 */
const CINApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to retrieve information from CIN such as business incorporation date, director(s) details, CIN status, and more. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#cin) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -    | 200              | SUCCESS         | INVALID                  | Enter the correct information in the request. | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.               | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.   | 400              | ERROR         | cin is missing in the request.                  | Enter the unique alphanumeric identifier (CIN) assigned to companies in the request.   | 400              | ERROR         | cin should be of 21 character alphanumeric string of format (X00000XX0000XXX000000).                  | Enter the correct format of the CIN information in the request.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Verify CIN
         
         * @param {CinRequestSchema} CinRequestSchema Find the request parameters to retrieve your customer\&#39;s CIN information
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsCinVerification: async (CinRequestSchema: CinRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CinRequestSchema' is not null or undefined
            assertParamExists('vrsCinVerification', 'CinRequestSchema', CinRequestSchema)
            const localVarPath = `/cin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CinRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CINApi - functional programming interface
 * @export
 */
const CINApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CINApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to retrieve information from CIN such as business incorporation date, director(s) details, CIN status, and more. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#cin) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -    | 200              | SUCCESS         | INVALID                  | Enter the correct information in the request. | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.               | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.   | 400              | ERROR         | cin is missing in the request.                  | Enter the unique alphanumeric identifier (CIN) assigned to companies in the request.   | 400              | ERROR         | cin should be of 21 character alphanumeric string of format (X00000XX0000XXX000000).                  | Enter the correct format of the CIN information in the request.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Verify CIN
         * @param {CinRequestSchema} CinRequestSchema Find the request parameters to retrieve your customer\&#39;s CIN information
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsCinVerification(CinRequestSchema: CinRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CinResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsCinVerification(CinRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * CINApi - object-oriented interface
 * @export
 * @class CINApi
 * @extends {BaseAPI}
 */



/**
 * DigilockerApi - axios parameter creator
 * @export
 */
const DigilockerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to create a DigiLocker URL to retrieve and verify aadhaar information of your customer.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | PENDING                                      | -    | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.               | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.   | 400              | ERROR         |document_requested is missing in the request.                  | Enter the document required for verification in the request.    | 400              | ERROR         | Requested Document Type can\'t be empty                  | Enter the type of document required for verification in the respective parameter and hit the API.    | 400              | ERROR         | Invalid Document Type Submitted                  | Enter a valid value for the parameter.    | 400              | ERROR         | Duplicate Document Type Submitted                  |     | 400              | ERROR         | redirect_url should start with https.                 |  Enter a valid redirect URL.   | 400              | ERROR         |redirect_url should be valid url.                  | Enter a valid redirect URL.      | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification_id already exits, please provide new verification_id                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | Unable to process your request. Try again after some time                      | Try again after some time.  
         * @summary Create DigiLocker URL
         
         * @param {DigiLockerVerificationCreateUrlRequestSchema} DigiLockerVerificationCreateUrlRequestSchema Find the request parameters to create a DigiLocker URL to retrieve and verify aadhaar information
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsDigilockerVerificationCreateUrl: async (DigiLockerVerificationCreateUrlRequestSchema: DigiLockerVerificationCreateUrlRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'DigiLockerVerificationCreateUrlRequestSchema' is not null or undefined
            assertParamExists('vrsDigilockerVerificationCreateUrl', 'DigiLockerVerificationCreateUrlRequestSchema', DigiLockerVerificationCreateUrlRequestSchema)
            const localVarPath = `/digilocker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(DigiLockerVerificationCreateUrlRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get your customer\'s document details from DigiLocker.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              |SUCCESS       | -                                      | -   | 202            |SUCCESS       | Validation in process check after some time                                     | Try again after some time.    | 400              | ERROR         | Please provide verification_id or reference_id                  | Enter a valid verification_id or reference_id in the request.  | 400              | ERROR         | document_type should be AADHAAR.               | Enter the value for document_type as AADHAAR.     | 400              | ERROR         | Digilocker request URL is expired                  | Create a new DigiLocker URL.    | 400              | ERROR         | Digilocker consent session expired                  | Create a new DigiLocker consent session.      | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 404              | ERROR         | Please enter a valid verification_id                                           | Enter a valid verification ID.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | Unable to process your request. Try again after some time                      | Try again after some time.  
         * @summary Get Document from DigiLocker
         
         * @param {string} document_type It is the type of document to be verified.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {number} [reference_id] It is the unique ID created by Cashfree Payments that you receive in the response of Create DigiLocker URL API
         * @param {string} [verification_id] It is the unique ID you created to identify the Create DigiLocker URL API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * verification_id?: string, 
         */
        vrsDigilockerVerificationFetchDocument: async (document_type: string,  x_cf_signature?: string, reference_id?: number, verification_id?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'document_type' is not null or undefined
            assertParamExists('vrsDigilockerVerificationFetchDocument', 'document_type', document_type)
            const localVarPath = `/digilocker/document/{document_type}`
                .replace(`{${"document_type"}}`, encodeURIComponent(String(document_type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")

            if (reference_id !== undefined) {
                localVarQueryParameter['reference_id'] = reference_id;
            }

            if (verification_id !== undefined) {
                localVarQueryParameter['verification_id'] = verification_id;
            }


    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get the status of the DigiLocker verification. You need to enter either the verification ID or reference ID.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | PENDING                                                            | -                                                                  |   | 200      | SUCCESS | AUTHENTICATED                                                            | -                                                                  |   | 200      | SUCCESS | EXPIRED                                                           | -                                                                  |   | 400      | ERROR   | Please provide verification_id or reference_id                       | You need to enter either the verification ID or reference ID.        |   | 400      | ERROR   | x-client-id is missing in the request.                       | Enter all the header information in the API request.               |   | 401      | ERROR   | Invalid clientId and clientSecret combination                | Enter valid client ID and secret key in the request.               |   | 403      | ERROR   | IP not whitelisted                                           | Whitelist the IP address.                                          |   | 404      | ERROR   | Please enter a valid verification_id                                           | Enter a valid verification ID that you created to identify the API request.                                          |   | 404      | ERROR   | Please enter a valid reference_id                                           | Enter a valid reference ID that you received in the API response.                                          |    | 422      | ERROR   | Insufficient balance to process this request.                | Ensure you have sufficient balance and then process the request.   |   | 500      | ERROR   | Unable to process your request. Try again after some time                                         | Try again after some time.                                         |
         * @summary Get DigiLocker Verification Status
         
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {number} [reference_id] It is the unique ID created by Cashfree Payments that you received in the Create DigiLocker URL API response.
         * @param {string} [verification_id] It is the unique ID you created to identify the Create DigiLocker URL API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsDigilockerVerificationFetchStatus: async ( x_cf_signature?: string, reference_id?: number, verification_id?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/digilocker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")

            if (reference_id !== undefined) {
                localVarQueryParameter['reference_id'] = reference_id;
            }

            if (verification_id !== undefined) {
                localVarQueryParameter['verification_id'] = verification_id;
            }


    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DigilockerApi - functional programming interface
 * @export
 */
const DigilockerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DigilockerApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to create a DigiLocker URL to retrieve and verify aadhaar information of your customer.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | PENDING                                      | -    | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.               | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.   | 400              | ERROR         |document_requested is missing in the request.                  | Enter the document required for verification in the request.    | 400              | ERROR         | Requested Document Type can\'t be empty                  | Enter the type of document required for verification in the respective parameter and hit the API.    | 400              | ERROR         | Invalid Document Type Submitted                  | Enter a valid value for the parameter.    | 400              | ERROR         | Duplicate Document Type Submitted                  |     | 400              | ERROR         | redirect_url should start with https.                 |  Enter a valid redirect URL.   | 400              | ERROR         |redirect_url should be valid url.                  | Enter a valid redirect URL.      | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification_id already exits, please provide new verification_id                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | Unable to process your request. Try again after some time                      | Try again after some time.  
         * @summary Create DigiLocker URL
         * @param {DigiLockerVerificationCreateUrlRequestSchema} DigiLockerVerificationCreateUrlRequestSchema Find the request parameters to create a DigiLocker URL to retrieve and verify aadhaar information
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsDigilockerVerificationCreateUrl(DigiLockerVerificationCreateUrlRequestSchema: DigiLockerVerificationCreateUrlRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DigiLockerVerificationCreateUrlResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsDigilockerVerificationCreateUrl(DigiLockerVerificationCreateUrlRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to get your customer\'s document details from DigiLocker.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              |SUCCESS       | -                                      | -   | 202            |SUCCESS       | Validation in process check after some time                                     | Try again after some time.    | 400              | ERROR         | Please provide verification_id or reference_id                  | Enter a valid verification_id or reference_id in the request.  | 400              | ERROR         | document_type should be AADHAAR.               | Enter the value for document_type as AADHAAR.     | 400              | ERROR         | Digilocker request URL is expired                  | Create a new DigiLocker URL.    | 400              | ERROR         | Digilocker consent session expired                  | Create a new DigiLocker consent session.      | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 404              | ERROR         | Please enter a valid verification_id                                           | Enter a valid verification ID.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | Unable to process your request. Try again after some time                      | Try again after some time.  
         * @summary Get Document from DigiLocker
         * @param {string} document_type It is the type of document to be verified.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {number} [reference_id] It is the unique ID created by Cashfree Payments that you receive in the response of Create DigiLocker URL API
         * @param {string} [verification_id] It is the unique ID you created to identify the Create DigiLocker URL API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsDigilockerVerificationFetchDocument(document_type: string, x_cf_signature?: string, reference_id?: number, verification_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DigiLockerVerificationGetDocumentResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsDigilockerVerificationFetchDocument(document_type, x_cf_signature, reference_id, verification_id, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to get the status of the DigiLocker verification. You need to enter either the verification ID or reference ID.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | PENDING                                                            | -                                                                  |   | 200      | SUCCESS | AUTHENTICATED                                                            | -                                                                  |   | 200      | SUCCESS | EXPIRED                                                           | -                                                                  |   | 400      | ERROR   | Please provide verification_id or reference_id                       | You need to enter either the verification ID or reference ID.        |   | 400      | ERROR   | x-client-id is missing in the request.                       | Enter all the header information in the API request.               |   | 401      | ERROR   | Invalid clientId and clientSecret combination                | Enter valid client ID and secret key in the request.               |   | 403      | ERROR   | IP not whitelisted                                           | Whitelist the IP address.                                          |   | 404      | ERROR   | Please enter a valid verification_id                                           | Enter a valid verification ID that you created to identify the API request.                                          |   | 404      | ERROR   | Please enter a valid reference_id                                           | Enter a valid reference ID that you received in the API response.                                          |    | 422      | ERROR   | Insufficient balance to process this request.                | Ensure you have sufficient balance and then process the request.   |   | 500      | ERROR   | Unable to process your request. Try again after some time                                         | Try again after some time.                                         |
         * @summary Get DigiLocker Verification Status
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {number} [reference_id] It is the unique ID created by Cashfree Payments that you received in the Create DigiLocker URL API response.
         * @param {string} [verification_id] It is the unique ID you created to identify the Create DigiLocker URL API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsDigilockerVerificationFetchStatus(x_cf_signature?: string, reference_id?: number, verification_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DigiLockerVerificationGetStatusResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsDigilockerVerificationFetchStatus(x_cf_signature, reference_id, verification_id, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * DigilockerApi - object-oriented interface
 * @export
 * @class DigilockerApi
 * @extends {BaseAPI}
 */



/**
 * DrivingLicenseApi - axios parameter creator
 * @export
 */
const DrivingLicenseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to verify the driving license of your customer. We retrieve details of the driving licence that includes the type of licence, issue date, expiry date, and more. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#driving-licence) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -   | 200              | SUCCESS       | INVALID                                      | Enter the correct information in the request.    | 400              | ERROR         | driving license is invalid                  | Ensure a valid driving licence information in the request.   | 400              | ERROR         | dob should be of type YYYY-MM-DD.                  | The accepted format is YYYY-MM-DD.   | 400              | ERROR         | dob is missing in the request.                  | Enter the date of birth of the driving licence holder in the request.  | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification ID to identify the verification request.   | 400              | ERROR         | verification_id can include a maximum of 50 characters.                  | Create a valid verification ID within 50 characters.   | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Verify Driving Licence Details
         
         * @param {DrivingLicenseRequestSchema} DrivingLicenseRequestSchema Find the request paramenters to retrieve your customer\&#39;s driving license information
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsDrivingLicenseVerification: async (DrivingLicenseRequestSchema: DrivingLicenseRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'DrivingLicenseRequestSchema' is not null or undefined
            assertParamExists('vrsDrivingLicenseVerification', 'DrivingLicenseRequestSchema', DrivingLicenseRequestSchema)
            const localVarPath = `/driving-license`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(DrivingLicenseRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DrivingLicenseApi - functional programming interface
 * @export
 */
const DrivingLicenseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DrivingLicenseApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to verify the driving license of your customer. We retrieve details of the driving licence that includes the type of licence, issue date, expiry date, and more. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#driving-licence) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -   | 200              | SUCCESS       | INVALID                                      | Enter the correct information in the request.    | 400              | ERROR         | driving license is invalid                  | Ensure a valid driving licence information in the request.   | 400              | ERROR         | dob should be of type YYYY-MM-DD.                  | The accepted format is YYYY-MM-DD.   | 400              | ERROR         | dob is missing in the request.                  | Enter the date of birth of the driving licence holder in the request.  | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification ID to identify the verification request.   | 400              | ERROR         | verification_id can include a maximum of 50 characters.                  | Create a valid verification ID within 50 characters.   | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Verify Driving Licence Details
         * @param {DrivingLicenseRequestSchema} DrivingLicenseRequestSchema Find the request paramenters to retrieve your customer\&#39;s driving license information
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsDrivingLicenseVerification(DrivingLicenseRequestSchema: DrivingLicenseRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrivingLicenseResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsDrivingLicenseVerification(DrivingLicenseRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * DrivingLicenseApi - object-oriented interface
 * @export
 * @class DrivingLicenseApi
 * @extends {BaseAPI}
 */



/**
 * ESignApi - axios parameter creator
 * @export
 */
const ESignApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to add the details of the document and signer(s) to initiate e-sign verification. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                      | -   | 400              | ERROR       | verification_id is missing in the request.                                      | Create a valid verification ID to identify the request.     | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.  | 400              | ERROR         | x-client-id is missing in the request.                  | Enter all the header information in the API request.  | 400              | ERROR         |  document_id is missing in the request.                  | Enter the unique ID received in the Upload Document for E-Sign API response.     | 400              | ERROR         |     Document id provided is invalid.                  |  Enter a valid document ID.   | 400              | ERROR         |     Document id provided is expired.                  |     | 400              | ERROR         |     notification_modes is missing in the request.                  |  Enter how you want to notify the signee about the e-sign details in the request.   | 400              | ERROR         |     notification_modes is missing in the request.                  |  Enter how you want to notify the signee about the e-sign details in the request.   | 400              | ERROR         |     Notification mode provided is invalid.                  |     | 400              | ERROR         |     Maximum number limit of Signer exceeded.                  |     | 400              | ERROR         |     auth_type is missing in the request                  | Enter the type of authentication to be used for e-signature.    | 400              | ERROR         |     expiry_in_days is missing in the request.                  | Enter the expiry of the signing link for each signer in days. The maximum allowed time is 15 days.     | 400              | ERROR         |     signers is missing in the request.                  | Enter the details of the signer(s) in the request.      | 400              | ERROR         |     Duplicate sequence passed for signers                  |      | 400              | ERROR         |     Sequence passed for signers is Invalid                  |      | 400              | ERROR         |     Multiple signer is not allowed without email notification mode                  |       | 401              | ERROR         | Invalid clientId and clientSecret combination               |   | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | This Verification ID already exists. Provide a different ID.                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time.  
         * @summary Create E-Sign Request
         
         * @param {ESignVerificationCreateSignatureRequestSchema} ESignVerificationCreateSignatureRequestSchema Find the request parameters to add the details of the document and signer
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsESignCreateSignature: async (ESignVerificationCreateSignatureRequestSchema: ESignVerificationCreateSignatureRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ESignVerificationCreateSignatureRequestSchema' is not null or undefined
            assertParamExists('vrsESignCreateSignature', 'ESignVerificationCreateSignatureRequestSchema', ESignVerificationCreateSignatureRequestSchema)
            const localVarPath = `/esignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ESignVerificationCreateSignatureRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to upload the document before creating the request for signing the document.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                      | -   | 400              | ERROR       | Please upload the file of valid format(pdf)                                      | Upload the document that requires an e-sign. Allowed file type - PDF. Max file size allowed - 10MB.  | 400              | ERROR      |                           document is missing in the request.            |Upload the document that requires an e-sign. Allowed file type - PDF. Max file size allowed - 10MB.   | 400              | ERROR       | x-client-id is missing in the request.                                      | Enter all the header information in the API.    | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.   | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time. 
         * @summary Upload Document For E-Sign
         
         * @param {File} document Upload the document that requires an e-sign. Allowed file type - PDF. Max file size allowed - 10MB.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsESignUploadDocument: async (document: File,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'document' is not null or undefined
            assertParamExists('vrsESignUploadDocument', 'document', document)
            const localVarPath = `/esignature/document`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


            if (document !== undefined) { 
                localVarFormParams.append('document', document as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get the status of the initiated e-sign verification. You need to enter either the verification ID or reference ID.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | IN_PROGRESS                                      | Wait for the signature.   | 200              | SUCCESS       | SUCCESS                                      | -  | 200              | SUCCESS       | EXPIRED                                      |   | 200              | SUCCESS       | FAILURE                                      |    | 400              | ERROR       | Please provide verification_id or reference_id                                      | Enter a valid verification ID or reference ID in the.    | 401              | ERROR         | Invalid clientId and clientSecret combination               |   | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.   | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time.  
         * @summary Get E-Sign Status
         
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {number} [reference_id] It is the unique ID created by Cashfree Payments that you receive in the response of Create E-Sign Request API.
         * @param {string} [verification_id] It is the unique ID you create to identify the Create E-Sign Request API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsESignVerificationFetchStatus: async ( x_cf_signature?: string, reference_id?: number, verification_id?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/esignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")

            if (reference_id !== undefined) {
                localVarQueryParameter['reference_id'] = reference_id;
            }

            if (verification_id !== undefined) {
                localVarQueryParameter['verification_id'] = verification_id;
            }


    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ESignApi - functional programming interface
 * @export
 */
const ESignApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ESignApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to add the details of the document and signer(s) to initiate e-sign verification. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                      | -   | 400              | ERROR       | verification_id is missing in the request.                                      | Create a valid verification ID to identify the request.     | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.  | 400              | ERROR         | x-client-id is missing in the request.                  | Enter all the header information in the API request.  | 400              | ERROR         |  document_id is missing in the request.                  | Enter the unique ID received in the Upload Document for E-Sign API response.     | 400              | ERROR         |     Document id provided is invalid.                  |  Enter a valid document ID.   | 400              | ERROR         |     Document id provided is expired.                  |     | 400              | ERROR         |     notification_modes is missing in the request.                  |  Enter how you want to notify the signee about the e-sign details in the request.   | 400              | ERROR         |     notification_modes is missing in the request.                  |  Enter how you want to notify the signee about the e-sign details in the request.   | 400              | ERROR         |     Notification mode provided is invalid.                  |     | 400              | ERROR         |     Maximum number limit of Signer exceeded.                  |     | 400              | ERROR         |     auth_type is missing in the request                  | Enter the type of authentication to be used for e-signature.    | 400              | ERROR         |     expiry_in_days is missing in the request.                  | Enter the expiry of the signing link for each signer in days. The maximum allowed time is 15 days.     | 400              | ERROR         |     signers is missing in the request.                  | Enter the details of the signer(s) in the request.      | 400              | ERROR         |     Duplicate sequence passed for signers                  |      | 400              | ERROR         |     Sequence passed for signers is Invalid                  |      | 400              | ERROR         |     Multiple signer is not allowed without email notification mode                  |       | 401              | ERROR         | Invalid clientId and clientSecret combination               |   | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | This Verification ID already exists. Provide a different ID.                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time.  
         * @summary Create E-Sign Request
         * @param {ESignVerificationCreateSignatureRequestSchema} ESignVerificationCreateSignatureRequestSchema Find the request parameters to add the details of the document and signer
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsESignCreateSignature(ESignVerificationCreateSignatureRequestSchema: ESignVerificationCreateSignatureRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ESignVerificationCreateSignatureResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsESignCreateSignature(ESignVerificationCreateSignatureRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to upload the document before creating the request for signing the document.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                      | -   | 400              | ERROR       | Please upload the file of valid format(pdf)                                      | Upload the document that requires an e-sign. Allowed file type - PDF. Max file size allowed - 10MB.  | 400              | ERROR      |                           document is missing in the request.            |Upload the document that requires an e-sign. Allowed file type - PDF. Max file size allowed - 10MB.   | 400              | ERROR       | x-client-id is missing in the request.                                      | Enter all the header information in the API.    | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.   | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time. 
         * @summary Upload Document For E-Sign
         * @param {File} document Upload the document that requires an e-sign. Allowed file type - PDF. Max file size allowed - 10MB.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsESignUploadDocument(document: File, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ESignVerificationUploadDocumentResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsESignUploadDocument(document, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to get the status of the initiated e-sign verification. You need to enter either the verification ID or reference ID.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | IN_PROGRESS                                      | Wait for the signature.   | 200              | SUCCESS       | SUCCESS                                      | -  | 200              | SUCCESS       | EXPIRED                                      |   | 200              | SUCCESS       | FAILURE                                      |    | 400              | ERROR       | Please provide verification_id or reference_id                                      | Enter a valid verification ID or reference ID in the.    | 401              | ERROR         | Invalid clientId and clientSecret combination               |   | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.   | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time.  
         * @summary Get E-Sign Status
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {number} [reference_id] It is the unique ID created by Cashfree Payments that you receive in the response of Create E-Sign Request API.
         * @param {string} [verification_id] It is the unique ID you create to identify the Create E-Sign Request API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsESignVerificationFetchStatus(x_cf_signature?: string, reference_id?: number, verification_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ESignVerificationGetStatusResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsESignVerificationFetchStatus(x_cf_signature, reference_id, verification_id, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * ESignApi - object-oriented interface
 * @export
 * @class ESignApi
 * @extends {BaseAPI}
 */



/**
 * FaceLivenessApi - axios parameter creator
 * @export
 */
const FaceLivenessApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to detect live human presence and authenticate facial biometrics. The API analyzes facial characteristics and liveness signals to prevent spoofing attempts and validate genuine user presence.  Returns comprehensive facial analysis including liveness confidence score and quality metrics. View the [test data](https://www.cashfree.com/docs/api-reference/vrs/data-to-test-integration#face-liveness) and use the information to trigger the validations. The test data are usable only in the test environment sandbox.
         * @summary Face Liveness Check
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {string} verification_id It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.
         * @param {File} image Upload the image of the individual to verify the liveness of the image. Supported types are jpeg, jpg and png.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_cf_signature?: string, 
         */
        vrsFaceLivenessCheck: async (x_api_version: string, verification_id: string, image: File,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('vrsFaceLivenessCheck', 'x_api_version', x_api_version)
            // verify required parameter 'verification_id' is not null or undefined
            assertParamExists('vrsFaceLivenessCheck', 'verification_id', verification_id)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('vrsFaceLivenessCheck', 'image', image)
            const localVarPath = `/face-liveness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


            if (verification_id !== undefined) { 
                localVarFormParams.append('verification_id', verification_id as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FaceLivenessApi - functional programming interface
 * @export
 */
const FaceLivenessApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FaceLivenessApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to detect live human presence and authenticate facial biometrics. The API analyzes facial characteristics and liveness signals to prevent spoofing attempts and validate genuine user presence.  Returns comprehensive facial analysis including liveness confidence score and quality metrics. View the [test data](https://www.cashfree.com/docs/api-reference/vrs/data-to-test-integration#face-liveness) and use the information to trigger the validations. The test data are usable only in the test environment sandbox.
         * @summary Face Liveness Check
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {string} verification_id It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.
         * @param {File} image Upload the image of the individual to verify the liveness of the image. Supported types are jpeg, jpg and png.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsFaceLivenessCheck(x_api_version: string, verification_id: string, image: File, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaceLiveness200ResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsFaceLivenessCheck(x_api_version, verification_id, image, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * FaceLivenessApi - object-oriented interface
 * @export
 * @class FaceLivenessApi
 * @extends {BaseAPI}
 */



/**
 * FaceMatchApi - axios parameter creator
 * @export
 */
const FaceMatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to verify the facial features of your customer in one image with another. You can compare an image with another image or with an image in an ID. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#face-match) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                      | -   | 400              | ERROR         | File size exceeded. Please check API Documentation                  | Maximum file size allowed for both the files is 10 MB. | 400              | ERROR         | please upload the file of valid format(jpeg/jpg/png)                  | Allowed file type - JPEG/JPG/PNG.    | 400              | ERROR         | First image is missing in the request                  | Upload the scanned copy of the image 1.   | 400              | ERROR         | Second image is missing in the request                 | Upload the scanned copy of the image 2.    | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Face Match
         
         * @param {string} verification_id It is the unique ID you need to create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.
         * @param {File} first_image It is the scanned copy of the image 1. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.
         * @param {File} second_image It is the scanned copy of the image 2. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {string} [threshold] It is the value to distinguish and match the facial features of the two images. The range is between 0 and 1. The default value is set as 0.7. We conclude that the images match when the analysis is or greater than the value set for threshold.
         * @param {boolean} [detect_mask_first_image] It is a boolean value to identify whether the person in the first image is wearing a mask.
         * @param {boolean} [detect_mask_second_image] It is a boolean value to identify whether the person in the first image is wearing a mask.
         * @param {boolean} [align_horizontally] It is a boolean value to align the images horizontally before analysing the facial features.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_cf_signature?: string, 
         */
        vrsFaceMatchVerification: async (verification_id: string, first_image: File, second_image: File,  x_cf_signature?: string, threshold?: string, detect_mask_first_image?: boolean, detect_mask_second_image?: boolean, align_horizontally?: boolean,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verification_id' is not null or undefined
            assertParamExists('vrsFaceMatchVerification', 'verification_id', verification_id)
            // verify required parameter 'first_image' is not null or undefined
            assertParamExists('vrsFaceMatchVerification', 'first_image', first_image)
            // verify required parameter 'second_image' is not null or undefined
            assertParamExists('vrsFaceMatchVerification', 'second_image', second_image)
            const localVarPath = `/face-match`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


            if (verification_id !== undefined) { 
                localVarFormParams.append('verification_id', verification_id as any);
            }
    
            if (first_image !== undefined) { 
                localVarFormParams.append('first_image', first_image as any);
            }
    
            if (second_image !== undefined) { 
                localVarFormParams.append('second_image', second_image as any);
            }
    
            if (threshold !== undefined) { 
                localVarFormParams.append('threshold', threshold as any);
            }
    
            if (detect_mask_first_image !== undefined) { 
                localVarFormParams.append('detect_mask_first_image', detect_mask_first_image as any);
            }
    
            if (detect_mask_second_image !== undefined) { 
                localVarFormParams.append('detect_mask_second_image', detect_mask_second_image as any);
            }
    
            if (align_horizontally !== undefined) { 
                localVarFormParams.append('align_horizontally', align_horizontally as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FaceMatchApi - functional programming interface
 * @export
 */
const FaceMatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FaceMatchApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to verify the facial features of your customer in one image with another. You can compare an image with another image or with an image in an ID. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#face-match) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                      | -   | 400              | ERROR         | File size exceeded. Please check API Documentation                  | Maximum file size allowed for both the files is 10 MB. | 400              | ERROR         | please upload the file of valid format(jpeg/jpg/png)                  | Allowed file type - JPEG/JPG/PNG.    | 400              | ERROR         | First image is missing in the request                  | Upload the scanned copy of the image 1.   | 400              | ERROR         | Second image is missing in the request                 | Upload the scanned copy of the image 2.    | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Face Match
         * @param {string} verification_id It is the unique ID you need to create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.
         * @param {File} first_image It is the scanned copy of the image 1. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.
         * @param {File} second_image It is the scanned copy of the image 2. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {string} [threshold] It is the value to distinguish and match the facial features of the two images. The range is between 0 and 1. The default value is set as 0.7. We conclude that the images match when the analysis is or greater than the value set for threshold.
         * @param {boolean} [detect_mask_first_image] It is a boolean value to identify whether the person in the first image is wearing a mask.
         * @param {boolean} [detect_mask_second_image] It is a boolean value to identify whether the person in the first image is wearing a mask.
         * @param {boolean} [align_horizontally] It is a boolean value to align the images horizontally before analysing the facial features.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsFaceMatchVerification(verification_id: string, first_image: File, second_image: File, x_cf_signature?: string, threshold?: string, detect_mask_first_image?: boolean, detect_mask_second_image?: boolean, align_horizontally?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaceMatchResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsFaceMatchVerification(verification_id, first_image, second_image, x_cf_signature, threshold, detect_mask_first_image, detect_mask_second_image, align_horizontally, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * FaceMatchApi - object-oriented interface
 * @export
 * @class FaceMatchApi
 * @extends {BaseAPI}
 */



/**
 * GSTINApi - axios parameter creator
 * @export
 */
const GSTINApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to verify if a given GSTIN information exists or not. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | GSTIN Exists                                      | -   | 200              | SUCCESS       | GSTIN Doesn’t Exist                                      | Enter the correct information in the request.     | 400              | ERROR         | GSTIN first 2 digits should be numeric and length should not exceed 15 and should be alphanumeric.                  | Enter a valid GSTIN in the request. The correct identifier has the first 2 digits in numerics and does not exceed 15 charaters.  | 400              | ERROR         | GSTIN is missing in the request.                  | Enter the GSTIN information in the request.  | 400              | ERROR         |  businessName can include a maximum of 200 characters.                  | The maximum character limit for businessName is 200.   | 400              | ERROR         |  businessName should be alphanumeric.                  | Enter only alphabets and/or numerical values in the parameter.    | 400              | ERROR         |  GstIn Verification is not enabled for this account                  | Contact your account manager.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.   | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         |Unable to validate, please retry later                     | Try again after some time.  
         * @summary Verify GSTIN
         
         * @param {GstinRequestSchema} GstinRequestSchema Find the request parameters to retrieve GSTIN information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsGstinVerification: async (GstinRequestSchema: GstinRequestSchema,   options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'GstinRequestSchema' is not null or undefined
            assertParamExists('vrsGstinVerification', 'GstinRequestSchema', GstinRequestSchema)
            const localVarPath = `/gstin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(GstinRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GSTINApi - functional programming interface
 * @export
 */
const GSTINApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GSTINApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to verify if a given GSTIN information exists or not. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | GSTIN Exists                                      | -   | 200              | SUCCESS       | GSTIN Doesn’t Exist                                      | Enter the correct information in the request.     | 400              | ERROR         | GSTIN first 2 digits should be numeric and length should not exceed 15 and should be alphanumeric.                  | Enter a valid GSTIN in the request. The correct identifier has the first 2 digits in numerics and does not exceed 15 charaters.  | 400              | ERROR         | GSTIN is missing in the request.                  | Enter the GSTIN information in the request.  | 400              | ERROR         |  businessName can include a maximum of 200 characters.                  | The maximum character limit for businessName is 200.   | 400              | ERROR         |  businessName should be alphanumeric.                  | Enter only alphabets and/or numerical values in the parameter.    | 400              | ERROR         |  GstIn Verification is not enabled for this account                  | Contact your account manager.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.   | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         |Unable to validate, please retry later                     | Try again after some time.  
         * @summary Verify GSTIN
         * @param {GstinRequestSchema} GstinRequestSchema Find the request parameters to retrieve GSTIN information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsGstinVerification(GstinRequestSchema: GstinRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GstinResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsGstinVerification(GstinRequestSchema, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * GSTINApi - object-oriented interface
 * @export
 * @class GSTINApi
 * @extends {BaseAPI}
 */



/**
 * IPApi - axios parameter creator
 * @export
 */
const IPApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to verify location, proxy details, city risk score, and proxy type risk score of an IP address. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#ip-address) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.    ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -    | 400             | ERROR         | x-client-id is missing in the request.                  | Enter all the header information in the request. | 400              | ERROR         | verification_id already exists.                  | Enter a unique verification ID to identify the request.  | 400              | ERROR         | please enter a valid IP address               | Enter a valid IP address in the request.    | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 404              | ERROR         | unable to find IP details                                           | Enter a valid IP address in the request.    | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time. 
         * @summary Verify IP
         
         * @param {IpVerificationRequestSchema} IpVerificationRequestSchema Find the request parameters to retrieve location information of an IP address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsIpVerification: async (IpVerificationRequestSchema: IpVerificationRequestSchema,   options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'IpVerificationRequestSchema' is not null or undefined
            assertParamExists('vrsIpVerification', 'IpVerificationRequestSchema', IpVerificationRequestSchema)
            const localVarPath = `/ip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(IpVerificationRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IPApi - functional programming interface
 * @export
 */
const IPApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IPApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to verify location, proxy details, city risk score, and proxy type risk score of an IP address. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#ip-address) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.    ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -    | 400             | ERROR         | x-client-id is missing in the request.                  | Enter all the header information in the request. | 400              | ERROR         | verification_id already exists.                  | Enter a unique verification ID to identify the request.  | 400              | ERROR         | please enter a valid IP address               | Enter a valid IP address in the request.    | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 404              | ERROR         | unable to find IP details                                           | Enter a valid IP address in the request.    | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time. 
         * @summary Verify IP
         * @param {IpVerificationRequestSchema} IpVerificationRequestSchema Find the request parameters to retrieve location information of an IP address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsIpVerification(IpVerificationRequestSchema: IpVerificationRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpVerificationResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsIpVerification(IpVerificationRequestSchema, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * IPApi - object-oriented interface
 * @export
 * @class IPApi
 * @extends {BaseAPI}
 */



/**
 * NameMatchApi - axios parameter creator
 * @export
 */
const NameMatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to verify names that have enormous variations. Provide us the names you want to verify, and we will tell you whether they match and provide the reason. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#name-match) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | The given names are identical                                      | -   | 200              | SUCCESS       | Word missing                                      | -   | 200              | SUCCESS       | Initials penalty, Word missing                                      | -   | 200              | SUCCESS       | Word missing                                     | -   | 200              | SUCCESS       |The given names are different                                      | -    | 400              | ERROR         | verification_id is missing in the request.                  | Enter a verification ID in the request. | 400              | ERROR         | name_1 is missing in the request.                  | Enter name #1 in the request.   | 400              | ERROR         | name_2 is missing in the request.                  | Enter name #2 in the request.   | 400              | ERROR         | name_1 is not allowed to be empty.                  | Enter a name in the name_1 parameter.   | 400              | ERROR         | name_2 is not allowed to be empty.                  | Enter a name in the name_2 parameter.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Name Match
         
         * @param {NameMatchRequestSchema} NameMatchRequestSchema Find the request parameters to verify names with variations
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsNameMatchVerification: async (NameMatchRequestSchema: NameMatchRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'NameMatchRequestSchema' is not null or undefined
            assertParamExists('vrsNameMatchVerification', 'NameMatchRequestSchema', NameMatchRequestSchema)
            const localVarPath = `/name-match`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(NameMatchRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NameMatchApi - functional programming interface
 * @export
 */
const NameMatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NameMatchApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to verify names that have enormous variations. Provide us the names you want to verify, and we will tell you whether they match and provide the reason. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#name-match) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | The given names are identical                                      | -   | 200              | SUCCESS       | Word missing                                      | -   | 200              | SUCCESS       | Initials penalty, Word missing                                      | -   | 200              | SUCCESS       | Word missing                                     | -   | 200              | SUCCESS       |The given names are different                                      | -    | 400              | ERROR         | verification_id is missing in the request.                  | Enter a verification ID in the request. | 400              | ERROR         | name_1 is missing in the request.                  | Enter name #1 in the request.   | 400              | ERROR         | name_2 is missing in the request.                  | Enter name #2 in the request.   | 400              | ERROR         | name_1 is not allowed to be empty.                  | Enter a name in the name_1 parameter.   | 400              | ERROR         | name_2 is not allowed to be empty.                  | Enter a name in the name_2 parameter.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Name Match
         * @param {NameMatchRequestSchema} NameMatchRequestSchema Find the request parameters to verify names with variations
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsNameMatchVerification(NameMatchRequestSchema: NameMatchRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NameMatchResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsNameMatchVerification(NameMatchRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * NameMatchApi - object-oriented interface
 * @export
 * @class NameMatchApi
 * @extends {BaseAPI}
 */



/**
 * PANApi - axios parameter creator
 * @export
 */
const PANApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to verify your customers\' PAN information individually or in batches at a time. This API comes in handy when you have to verify a large number of PAN information. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#pan) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | Request accepted. You can check the status after some time.                      | -     | 400      | ERROR   | Please provide atleast one entry for verification                                | You need to have a minimum of one entry in the request.        | 400      | ERROR   | bulk_verification_id is missing in the request.                                  | You need to create a unique ID to identify the API request.        | 400      | ERROR   | bulk_verification_id should contain only alphanumeric and underscore characters. | Only alphanumeric and underscore ( _ ) are allowed.               | 400      | ERROR   | x-client-id is missing in the request.                                           | Enter all the header information in the API request.               | 401      | ERROR   | Invalid clientId and clientSecret combination                                    | Enter valid client ID and secret key in the request.               | 403      | ERROR   | IP not whitelisted                                                               | Whitelist the IP address.                                          | 422      | ERROR   | Insufficient balance to process this request.                                    | Ensure you have sufficient balance and then process the request.   | 500      | ERROR   | Unable to validate, please retry later                                           | Try again after some time.                                    | 500      | ERROR   | something went wrong, please try after some time                                 | Try again after some time.       
         * @summary Verify PAN in Bulk
         
         * @param {BulkPanRequestSchema} BulkPanRequestSchema Find the request parameters to verify a large number of PAN information
         * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsBulkPanVerification: async (BulkPanRequestSchema: BulkPanRequestSchema,  x_api_version?: string, x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'BulkPanRequestSchema' is not null or undefined
            assertParamExists('vrsBulkPanVerification', 'BulkPanRequestSchema', BulkPanRequestSchema)
            const localVarPath = `/pan/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(BulkPanRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get the status of the Verify PAN in Bulk API request. You need to enter either the reference ID or bulk verification ID.    ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | -                                                            | -                                                                  |   | 400      | ERROR   | Either of reference_id or BulkVerificationId can\'t be empty. | You need to enter either the reference ID or bulk verification ID. |   | 400      | ERROR   | x-client-id is missing in the request.                       | Enter all the header information in the API request.               |   | 401      | ERROR   | Invalid clientId and clientSecret combination                | Enter valid client ID and secret key in the request.               |   | 403      | ERROR   | IP not whitelisted                                           | Whitelist the IP address.                                          |   | 422      | ERROR   | Insufficient balance to process this request.                | Ensure you have sufficient balance and then process the request.   |   | 500      | ERROR   | something went wrong                                         | Try again after some time.                                         |
         * @summary Get Status for Verify PAN in Bulk
         
         * @param {string} reference_id It is the unique ID created by Cashfree Payments that you receive in the response of Verify PAN in Bulk API.
         * @param {string} bulk_verification_id It is the unique ID you created to identify the Verify PAN in Bulk API request.
         * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_cf_signature?: string, 
         */
        vrsFetchBulkPanDetails: async (reference_id: string, bulk_verification_id: string,  x_api_version?: string, x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reference_id' is not null or undefined
            assertParamExists('vrsFetchBulkPanDetails', 'reference_id', reference_id)
            // verify required parameter 'bulk_verification_id' is not null or undefined
            assertParamExists('vrsFetchBulkPanDetails', 'bulk_verification_id', bulk_verification_id)
            const localVarPath = `/pan/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")

            if (reference_id !== undefined) {
                localVarQueryParameter['reference_id'] = reference_id;
            }

            if (bulk_verification_id !== undefined) {
                localVarQueryParameter['bulk_verification_id'] = bulk_verification_id;
            }


    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get the verification status of the Verify PAN Sync API. You need to enter the reference ID to get the verification status. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | VALID             | -   | 200      | SUCCESS | Invalid PAN  | Enter a valid 10-character alphanumeric PAN identifier.       |  | 400      | ERROR   | x-client-id is missing in the request.                       | Enter all the header information in the API request.   | 401      | ERROR   | Invalid clientId and clientSecret combination                                    | Enter valid client ID and secret key in the request.               | 403      | ERROR   | IP not whitelisted                                                               | Whitelist the IP address.                                          | 404      | ERROR   | Incorrect referenceId                                           | Enter a valid reference ID in the request.                                    | 422      | ERROR   | Insufficient balance to process this request.                                    | Ensure you have sufficient balance and then process the request.   | 500      | ERROR   | something went wrong, please try after some time                                 | Try again after some time.      
         * @summary Get Status of Verify PAN Sync
         
         * @param {string} reference_id It is the unique ID created by Cashfree Payments that you receive in the response of Verify PAN Sync API.
         * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsFetchPanDetails: async (reference_id: string,  x_api_version?: string, x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reference_id' is not null or undefined
            assertParamExists('vrsFetchPanDetails', 'reference_id', reference_id)
            const localVarPath = `/pan/{reference_id}`
                .replace(`{${"reference_id"}}`, encodeURIComponent(String(reference_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to verify the PAN information of your customers. You can retrieve more information such as masked aadhaar number, contact information. etc, than just verifying if a given PAN exists. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#pan) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|    | 200      | SUCCESS | VALID                                                        | -                                                                               | 200      | SUCCESS | Invalid PAN                                                  | Enter a valid 10-character alphanumeric PAN identifier.                         | 400      | ERROR   | Enter valid PAN.                                             | Enter a valid 10-character alphanumeric PAN identifier in the correct format.   | 400      | ERROR   | pan is missing in the request.                               | Enter a valid 10-character alphanumeric PAN identifier in the request.          | 400      | ERROR   | x-client-id is missing in the request.                       | Enter all the header information in the API request.                            | 401      | ERROR   | Invalid clientId and clientSecret combination                | Enter valid client ID and secret key in the request.                            | 403      | ERROR   | IP not whitelisted                                           | Whitelist the IP address.                                                       | 409      | ERROR   | This Verification ID already exists. Provide a different ID. | Enter a unique verification ID to identify the API request.                     | 422      | ERROR   | Insufficient balance to process this request.                | Ensure you have sufficient balance and then process the request.                | 500      | ERROR   | Unable to process your request. Try again after some time.    | Try again after some time.                                                      | 502      | ERROR   | Unable to process your request. Try again after some time.   | Try again after some time.                                                     |
         * @summary PAN 360
         
         * @param {PanAdvanceRequestSchema} PanAdvanceRequestSchema Find the request parameters to retrieve the PAN information
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsPanAdvanceVerification: async (PanAdvanceRequestSchema: PanAdvanceRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'PanAdvanceRequestSchema' is not null or undefined
            assertParamExists('vrsPanAdvanceVerification', 'PanAdvanceRequestSchema', PanAdvanceRequestSchema)
            const localVarPath = `/pan/advance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PanAdvanceRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this PAN Verification via OCR API to verify and validate the PAN information quickly. Provide the front image of PAN and a verification ID. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | PAN card is valid                                                       | -                                                                             |   | 200      | SUCCESS | PAN card is Invalid                                                     | Upload a valid PAN card copy.                                                 |   | 400      | ERROR   | File size exceeded 10MB limit                                           | The max file size of the file is 10MB.                                        |   | 400      | ERROR   | please upload the file of valid format(jpeg/jpg/png)                    | Allowed file type - JPEG/JPG/PNG.                                             |   | 400      | ERROR   | verification_id is missing in the request.                              | Enter a unique verification ID in the request.                                |   | 400      | ERROR   | Front Image File is missing                                             | Upload the copy of the PAN card in the front_image parameter.                 |   | 400      | ERROR   | verification_id can include a maximum of 50 characters.                 | The maximum character limit is 50.                                            |   | 400      | ERROR   | verification_id can include only alphanum, dot, hyphen and underscores. | Only alphanumeric, period (.), hyphen (-), and underscore (   ) are allowed. |   | 400      | ERROR   | x-client-id is missing in the request                                   | Enter all the header information in the API request.                          |   | 401      | ERROR   | Invalid clientId and clientSecret combination                           | Enter valid client ID and secret key in the request.                          |   | 403      | ERROR   | IP not whitelisted                                                      | Whitelist the IP address.                                                     |   | 422      | ERROR   | Insufficient balance to process this request.                           | Ensure you have sufficient balance and then process the request.              |   | 500      | ERROR   | Unable to validate, please retry later                                                    | Try again after some time.                                                    |
         * @summary PAN Verification via OCR
         
         * @param {string} verification_id It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
         * @param {File} front_image It is the scanned copy of the PAN card. Allowed file type - JPEG/JPG/PNG.
         * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_cf_signature?: string, 
         */
        vrsPanOcrVerification: async (verification_id: string, front_image: File,  x_api_version?: string, x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verification_id' is not null or undefined
            assertParamExists('vrsPanOcrVerification', 'verification_id', verification_id)
            // verify required parameter 'front_image' is not null or undefined
            assertParamExists('vrsPanOcrVerification', 'front_image', front_image)
            const localVarPath = `/document/pan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


            if (verification_id !== undefined) { 
                localVarFormParams.append('verification_id', verification_id as any);
            }
    
            if (front_image !== undefined) { 
                localVarFormParams.append('front_image', front_image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to verify if a given PAN exists. You will receive the name registered with the PAN and the PAN type (Individual or Business) in the response for a valid PAN. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#pan) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | VALID                                            | -                                                                             |   | 200      | SUCCESS | Invalid PAN                                            | Enter a valid 10-character alphanumeric PAN identifier.                       |   | 400      | ERROR   | Enter valid PAN.                                 | Enter a valid 10-character alphanumeric PAN identifier in the correct format. |   | 400      | ERROR   | pan is missing in the request.                   | Enter a valid 10-character alphanumeric PAN identifier in the request.        |   | 400      | ERROR   | x-client-id is missing in the request.           | Enter all the header information in the API request.                          |   | 401      | ERROR   | Invalid clientId and clientSecret combination    | Enter valid client ID and secret key in the request.                          |   | 403      | ERROR   | IP not whitelisted                               | Whitelist the IP address.                                                     |   | 422      | ERROR   | Insufficient balance to process this request.    | Ensure you have sufficient balance and then process the request.              |   | 500      | ERROR   | something went wrong, please try after some time | Try again after some time.                                                    |   | 500      | ERROR   | Unable to validate, please retry later           | Try again after some time.                                                    |
         * @summary Verify PAN Sync
         
         * @param {PanRequestSchema} PanRequestSchema Find the request parameters to verify whether the PAN information is valid
         * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsPanVerification: async (PanRequestSchema: PanRequestSchema,  x_api_version?: string, x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'PanRequestSchema' is not null or undefined
            assertParamExists('vrsPanVerification', 'PanRequestSchema', PanRequestSchema)
            const localVarPath = `/pan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PanRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PANApi - functional programming interface
 * @export
 */
const PANApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PANApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to verify your customers\' PAN information individually or in batches at a time. This API comes in handy when you have to verify a large number of PAN information. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#pan) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | Request accepted. You can check the status after some time.                      | -     | 400      | ERROR   | Please provide atleast one entry for verification                                | You need to have a minimum of one entry in the request.        | 400      | ERROR   | bulk_verification_id is missing in the request.                                  | You need to create a unique ID to identify the API request.        | 400      | ERROR   | bulk_verification_id should contain only alphanumeric and underscore characters. | Only alphanumeric and underscore ( _ ) are allowed.               | 400      | ERROR   | x-client-id is missing in the request.                                           | Enter all the header information in the API request.               | 401      | ERROR   | Invalid clientId and clientSecret combination                                    | Enter valid client ID and secret key in the request.               | 403      | ERROR   | IP not whitelisted                                                               | Whitelist the IP address.                                          | 422      | ERROR   | Insufficient balance to process this request.                                    | Ensure you have sufficient balance and then process the request.   | 500      | ERROR   | Unable to validate, please retry later                                           | Try again after some time.                                    | 500      | ERROR   | something went wrong, please try after some time                                 | Try again after some time.       
         * @summary Verify PAN in Bulk
         * @param {BulkPanRequestSchema} BulkPanRequestSchema Find the request parameters to verify a large number of PAN information
         * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsBulkPanVerification(BulkPanRequestSchema: BulkPanRequestSchema, x_api_version?: string, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPanBulkResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsBulkPanVerification(BulkPanRequestSchema, x_api_version, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to get the status of the Verify PAN in Bulk API request. You need to enter either the reference ID or bulk verification ID.    ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | -                                                            | -                                                                  |   | 400      | ERROR   | Either of reference_id or BulkVerificationId can\'t be empty. | You need to enter either the reference ID or bulk verification ID. |   | 400      | ERROR   | x-client-id is missing in the request.                       | Enter all the header information in the API request.               |   | 401      | ERROR   | Invalid clientId and clientSecret combination                | Enter valid client ID and secret key in the request.               |   | 403      | ERROR   | IP not whitelisted                                           | Whitelist the IP address.                                          |   | 422      | ERROR   | Insufficient balance to process this request.                | Ensure you have sufficient balance and then process the request.   |   | 500      | ERROR   | something went wrong                                         | Try again after some time.                                         |
         * @summary Get Status for Verify PAN in Bulk
         * @param {string} reference_id It is the unique ID created by Cashfree Payments that you receive in the response of Verify PAN in Bulk API.
         * @param {string} bulk_verification_id It is the unique ID you created to identify the Verify PAN in Bulk API request.
         * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsFetchBulkPanDetails(reference_id: string, bulk_verification_id: string, x_api_version?: string, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPanBulkResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsFetchBulkPanDetails(reference_id, bulk_verification_id, x_api_version, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to get the verification status of the Verify PAN Sync API. You need to enter the reference ID to get the verification status. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | VALID             | -   | 200      | SUCCESS | Invalid PAN  | Enter a valid 10-character alphanumeric PAN identifier.       |  | 400      | ERROR   | x-client-id is missing in the request.                       | Enter all the header information in the API request.   | 401      | ERROR   | Invalid clientId and clientSecret combination                                    | Enter valid client ID and secret key in the request.               | 403      | ERROR   | IP not whitelisted                                                               | Whitelist the IP address.                                          | 404      | ERROR   | Incorrect referenceId                                           | Enter a valid reference ID in the request.                                    | 422      | ERROR   | Insufficient balance to process this request.                                    | Ensure you have sufficient balance and then process the request.   | 500      | ERROR   | something went wrong, please try after some time                                 | Try again after some time.      
         * @summary Get Status of Verify PAN Sync
         * @param {string} reference_id It is the unique ID created by Cashfree Payments that you receive in the response of Verify PAN Sync API.
         * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsFetchPanDetails(reference_id: string, x_api_version?: string, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVerifyPanResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsFetchPanDetails(reference_id, x_api_version, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to verify the PAN information of your customers. You can retrieve more information such as masked aadhaar number, contact information. etc, than just verifying if a given PAN exists. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#pan) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|    | 200      | SUCCESS | VALID                                                        | -                                                                               | 200      | SUCCESS | Invalid PAN                                                  | Enter a valid 10-character alphanumeric PAN identifier.                         | 400      | ERROR   | Enter valid PAN.                                             | Enter a valid 10-character alphanumeric PAN identifier in the correct format.   | 400      | ERROR   | pan is missing in the request.                               | Enter a valid 10-character alphanumeric PAN identifier in the request.          | 400      | ERROR   | x-client-id is missing in the request.                       | Enter all the header information in the API request.                            | 401      | ERROR   | Invalid clientId and clientSecret combination                | Enter valid client ID and secret key in the request.                            | 403      | ERROR   | IP not whitelisted                                           | Whitelist the IP address.                                                       | 409      | ERROR   | This Verification ID already exists. Provide a different ID. | Enter a unique verification ID to identify the API request.                     | 422      | ERROR   | Insufficient balance to process this request.                | Ensure you have sufficient balance and then process the request.                | 500      | ERROR   | Unable to process your request. Try again after some time.    | Try again after some time.                                                      | 502      | ERROR   | Unable to process your request. Try again after some time.   | Try again after some time.                                                     |
         * @summary PAN 360
         * @param {PanAdvanceRequestSchema} PanAdvanceRequestSchema Find the request parameters to retrieve the PAN information
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsPanAdvanceVerification(PanAdvanceRequestSchema: PanAdvanceRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanAdvanceResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsPanAdvanceVerification(PanAdvanceRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this PAN Verification via OCR API to verify and validate the PAN information quickly. Provide the front image of PAN and a verification ID. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | PAN card is valid                                                       | -                                                                             |   | 200      | SUCCESS | PAN card is Invalid                                                     | Upload a valid PAN card copy.                                                 |   | 400      | ERROR   | File size exceeded 10MB limit                                           | The max file size of the file is 10MB.                                        |   | 400      | ERROR   | please upload the file of valid format(jpeg/jpg/png)                    | Allowed file type - JPEG/JPG/PNG.                                             |   | 400      | ERROR   | verification_id is missing in the request.                              | Enter a unique verification ID in the request.                                |   | 400      | ERROR   | Front Image File is missing                                             | Upload the copy of the PAN card in the front_image parameter.                 |   | 400      | ERROR   | verification_id can include a maximum of 50 characters.                 | The maximum character limit is 50.                                            |   | 400      | ERROR   | verification_id can include only alphanum, dot, hyphen and underscores. | Only alphanumeric, period (.), hyphen (-), and underscore (   ) are allowed. |   | 400      | ERROR   | x-client-id is missing in the request                                   | Enter all the header information in the API request.                          |   | 401      | ERROR   | Invalid clientId and clientSecret combination                           | Enter valid client ID and secret key in the request.                          |   | 403      | ERROR   | IP not whitelisted                                                      | Whitelist the IP address.                                                     |   | 422      | ERROR   | Insufficient balance to process this request.                           | Ensure you have sufficient balance and then process the request.              |   | 500      | ERROR   | Unable to validate, please retry later                                                    | Try again after some time.                                                    |
         * @summary PAN Verification via OCR
         * @param {string} verification_id It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
         * @param {File} front_image It is the scanned copy of the PAN card. Allowed file type - JPEG/JPG/PNG.
         * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsPanOcrVerification(verification_id: string, front_image: File, x_api_version?: string, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanOcrResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsPanOcrVerification(verification_id, front_image, x_api_version, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to verify if a given PAN exists. You will receive the name registered with the PAN and the PAN type (Individual or Business) in the response for a valid PAN. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#pan) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | VALID                                            | -                                                                             |   | 200      | SUCCESS | Invalid PAN                                            | Enter a valid 10-character alphanumeric PAN identifier.                       |   | 400      | ERROR   | Enter valid PAN.                                 | Enter a valid 10-character alphanumeric PAN identifier in the correct format. |   | 400      | ERROR   | pan is missing in the request.                   | Enter a valid 10-character alphanumeric PAN identifier in the request.        |   | 400      | ERROR   | x-client-id is missing in the request.           | Enter all the header information in the API request.                          |   | 401      | ERROR   | Invalid clientId and clientSecret combination    | Enter valid client ID and secret key in the request.                          |   | 403      | ERROR   | IP not whitelisted                               | Whitelist the IP address.                                                     |   | 422      | ERROR   | Insufficient balance to process this request.    | Ensure you have sufficient balance and then process the request.              |   | 500      | ERROR   | something went wrong, please try after some time | Try again after some time.                                                    |   | 500      | ERROR   | Unable to validate, please retry later           | Try again after some time.                                                    |
         * @summary Verify PAN Sync
         * @param {PanRequestSchema} PanRequestSchema Find the request parameters to verify whether the PAN information is valid
         * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsPanVerification(PanRequestSchema: PanRequestSchema, x_api_version?: string, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVerifyPanResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsPanVerification(PanRequestSchema, x_api_version, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * PANApi - object-oriented interface
 * @export
 * @class PANApi
 * @extends {BaseAPI}
 */



/**
 * PANToGSTINApi - axios parameter creator
 * @export
 */
const PANToGSTINApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to fetch the list of GSTIN associated with the PAN information. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#fetch-gstin-with-pan) and use the information to trigger the validations. The test data are usable only in test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | Gstins List found                                      | -    | 200              | SUCCESS         | Gstin not found                  | No results found for the entered information. Enter the correct information in the request. | 400              | ERROR         | Enter valid PAN.                  | Enter the unique 10-character alphanumeric identifier issued by the Income Tax Department.  | 400              | ERROR         | pan is missing in the request.               | Enter the PAN information in the request to fetch the list of associated GSTIN.    | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Fetch GSTIN with PAN
         
         * @param {PanToGstinRequestSchema} PanToGstinRequestSchema Find the request parameters to retrieve the list of GSTIN associated with a PAN
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsPanToGstinVerification: async (PanToGstinRequestSchema: PanToGstinRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'PanToGstinRequestSchema' is not null or undefined
            assertParamExists('vrsPanToGstinVerification', 'PanToGstinRequestSchema', PanToGstinRequestSchema)
            const localVarPath = `/pan-gstin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PanToGstinRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PANToGSTINApi - functional programming interface
 * @export
 */
const PANToGSTINApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PANToGSTINApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to fetch the list of GSTIN associated with the PAN information. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#fetch-gstin-with-pan) and use the information to trigger the validations. The test data are usable only in test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | Gstins List found                                      | -    | 200              | SUCCESS         | Gstin not found                  | No results found for the entered information. Enter the correct information in the request. | 400              | ERROR         | Enter valid PAN.                  | Enter the unique 10-character alphanumeric identifier issued by the Income Tax Department.  | 400              | ERROR         | pan is missing in the request.               | Enter the PAN information in the request to fetch the list of associated GSTIN.    | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Fetch GSTIN with PAN
         * @param {PanToGstinRequestSchema} PanToGstinRequestSchema Find the request parameters to retrieve the list of GSTIN associated with a PAN
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsPanToGstinVerification(PanToGstinRequestSchema: PanToGstinRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanToGstinResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsPanToGstinVerification(PanToGstinRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * PANToGSTINApi - object-oriented interface
 * @export
 * @class PANToGSTINApi
 * @extends {BaseAPI}
 */



/**
 * PassportApi - axios parameter creator
 * @export
 */
const PassportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to verify passport information and ensure the identity of your customer. Provide the passport file number in the request and we help you fetch the details. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#passport) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -    | 200              | SUCCESS         | INVALID                  | Enter the correct information in the request. | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.               | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.   | 400              | ERROR         | file_number is missing in the request.                  | Enter the file number in the request.   | 400              | ERROR         | dob is missing in the request.                  | Enter the date of birth of the passport holder in the request.   | 400              | ERROR         | dob should be of type YYYY-MM-DD.                  | Enter the DOB in the YYYY-MM-DD format    | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time.  
         * @summary Verify Passport
         
         * @param {PassportVerificationRequestSchema} PassportVerificationRequestSchema Find the request parameter to retrieve your customer\&#39;s passport information
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsPassportVerification: async (PassportVerificationRequestSchema: PassportVerificationRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'PassportVerificationRequestSchema' is not null or undefined
            assertParamExists('vrsPassportVerification', 'PassportVerificationRequestSchema', PassportVerificationRequestSchema)
            const localVarPath = `/passport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PassportVerificationRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PassportApi - functional programming interface
 * @export
 */
const PassportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PassportApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to verify passport information and ensure the identity of your customer. Provide the passport file number in the request and we help you fetch the details. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#passport) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -    | 200              | SUCCESS         | INVALID                  | Enter the correct information in the request. | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.               | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.   | 400              | ERROR         | file_number is missing in the request.                  | Enter the file number in the request.   | 400              | ERROR         | dob is missing in the request.                  | Enter the date of birth of the passport holder in the request.   | 400              | ERROR         | dob should be of type YYYY-MM-DD.                  | Enter the DOB in the YYYY-MM-DD format    | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time.  
         * @summary Verify Passport
         * @param {PassportVerificationRequestSchema} PassportVerificationRequestSchema Find the request parameter to retrieve your customer\&#39;s passport information
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsPassportVerification(PassportVerificationRequestSchema: PassportVerificationRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassportVerificationResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsPassportVerification(PassportVerificationRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * PassportApi - object-oriented interface
 * @export
 * @class PassportApi
 * @extends {BaseAPI}
 */



/**
 * ReverseGeocodingApi - axios parameter creator
 * @export
 */
const ReverseGeocodingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to convert geohraphic coordinates (latitude and longitude) into readable location information for verification purposes. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#reverse-geocoding-coordinates) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -    | 400              | ERROR         | latitude value should range from -90 to 90.                  | Enter a value for the latitude that ranges between -90 and 90. | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include a maximum of 50 characters.               | Enter a verification ID within 50 characters. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.   | 400              | ERROR         | longitude value should range from -180 to 180.                  | Enter a value for the longitude that ranges between -180 and 180.   | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Reverse Geocoding
         
         * @param {ReverseGeocodingRequestSchema} ReverseGeocodingRequestSchema Find the request parameters to retrieve the physical address of a location
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsReverseGeocodingVerification: async (ReverseGeocodingRequestSchema: ReverseGeocodingRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ReverseGeocodingRequestSchema' is not null or undefined
            assertParamExists('vrsReverseGeocodingVerification', 'ReverseGeocodingRequestSchema', ReverseGeocodingRequestSchema)
            const localVarPath = `/reverse-geocoding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ReverseGeocodingRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReverseGeocodingApi - functional programming interface
 * @export
 */
const ReverseGeocodingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReverseGeocodingApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to convert geohraphic coordinates (latitude and longitude) into readable location information for verification purposes. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#reverse-geocoding-coordinates) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -    | 400              | ERROR         | latitude value should range from -90 to 90.                  | Enter a value for the latitude that ranges between -90 and 90. | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include a maximum of 50 characters.               | Enter a verification ID within 50 characters. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.   | 400              | ERROR         | longitude value should range from -180 to 180.                  | Enter a value for the longitude that ranges between -180 and 180.   | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
         * @summary Reverse Geocoding
         * @param {ReverseGeocodingRequestSchema} ReverseGeocodingRequestSchema Find the request parameters to retrieve the physical address of a location
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsReverseGeocodingVerification(ReverseGeocodingRequestSchema: ReverseGeocodingRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReverseGeocodingResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsReverseGeocodingVerification(ReverseGeocodingRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * ReverseGeocodingApi - object-oriented interface
 * @export
 * @class ReverseGeocodingApi
 * @extends {BaseAPI}
 */



/**
 * ReversePennyDropApi - axios parameter creator
 * @export
 */
const ReversePennyDropApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to create a reverse penny drop request. Reverse penny drop is a verification method for validating bank account information. Your customers/users deposit 1 rupee through a UPI based transaction and get the 1 rupee back once the verification is complete. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | -                                      | -    | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.   | 400              | ERROR         | verification_id already exists                  | Enter a unique verification_id.    | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | Unable to validate, please retry later                      | Try again after some time.  
         * @summary Create Reverse Penny Drop Request
         
         * @param {CreateRequestRequestSchema} CreateRequestRequestSchema Find the request parameters to create a reverse penny drop request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsReversePennyDropCreateRequest: async (CreateRequestRequestSchema: CreateRequestRequestSchema,   options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CreateRequestRequestSchema' is not null or undefined
            assertParamExists('vrsReversePennyDropCreateRequest', 'CreateRequestRequestSchema', CreateRequestRequestSchema)
            const localVarPath = `/reverse-penny-drop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CreateRequestRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get the details of the created reverse penny drop request. You need to enter either the reference ID or verification ID. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                       | -   | 200              | SUCCESS       | EXPIRED                                        | Create a new reverse penny drop order request if the link expired before the transaction.   | 200              | SUCCESS       | FAILURE                                        | Create a new reverse penny drop order request.   | 400              | ERROR         | Please provide verification_id or ref_id               | You need to enter either the reference ID or verification ID.   | 400              | ERROR         | Please enter a valid verification_id                  | Enter a valid verification_id in the request.  | 400              | ERROR         | Please enter a valid ref_id                      | Enter a valid reference ID in the request.  | 400              | ERROR         | x-client-id is missing in the request                     | Enter all the header information in the API request.  | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time.  
         * @summary Get Reverse Penny Drop Request Details
         
         * @param {string} [ref_id] It is the unique ID created by Cashfree Payments that you receive in the response of Create Reverse Penny Drop Request API.
         * @param {string} [verification_id] It is the unique ID created by you to identify the reverse penny drop verification request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsReversePennyDropFetchStatus: async ( ref_id?: string, verification_id?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/remitter/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")

            if (ref_id !== undefined) {
                localVarQueryParameter['ref_id'] = ref_id;
            }

            if (verification_id !== undefined) {
                localVarQueryParameter['verification_id'] = verification_id;
            }


    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReversePennyDropApi - functional programming interface
 * @export
 */
const ReversePennyDropApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReversePennyDropApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to create a reverse penny drop request. Reverse penny drop is a verification method for validating bank account information. Your customers/users deposit 1 rupee through a UPI based transaction and get the 1 rupee back once the verification is complete. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | -                                      | -    | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.   | 400              | ERROR         | verification_id already exists                  | Enter a unique verification_id.    | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | Unable to validate, please retry later                      | Try again after some time.  
         * @summary Create Reverse Penny Drop Request
         * @param {CreateRequestRequestSchema} CreateRequestRequestSchema Find the request parameters to create a reverse penny drop request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsReversePennyDropCreateRequest(CreateRequestRequestSchema: CreateRequestRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRequestResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsReversePennyDropCreateRequest(CreateRequestRequestSchema, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to get the details of the created reverse penny drop request. You need to enter either the reference ID or verification ID. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                       | -   | 200              | SUCCESS       | EXPIRED                                        | Create a new reverse penny drop order request if the link expired before the transaction.   | 200              | SUCCESS       | FAILURE                                        | Create a new reverse penny drop order request.   | 400              | ERROR         | Please provide verification_id or ref_id               | You need to enter either the reference ID or verification ID.   | 400              | ERROR         | Please enter a valid verification_id                  | Enter a valid verification_id in the request.  | 400              | ERROR         | Please enter a valid ref_id                      | Enter a valid reference ID in the request.  | 400              | ERROR         | x-client-id is missing in the request                     | Enter all the header information in the API request.  | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time.  
         * @summary Get Reverse Penny Drop Request Details
         * @param {string} [ref_id] It is the unique ID created by Cashfree Payments that you receive in the response of Create Reverse Penny Drop Request API.
         * @param {string} [verification_id] It is the unique ID created by you to identify the reverse penny drop verification request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsReversePennyDropFetchStatus(ref_id?: string, verification_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStatusRpdResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsReversePennyDropFetchStatus(ref_id, verification_id, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * ReversePennyDropApi - object-oriented interface
 * @export
 * @class ReversePennyDropApi
 * @extends {BaseAPI}
 */



/**
 * UserApi - axios parameter creator
 * @export
 */
const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to create a new user profile for the Secure ID, which enables Video KYC (Know Your Customer) verification. The user profile includes basic details such as phone number, name, and address, and is required to initiate the KYC process.
         * @summary Create User for Secure ID
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {AddUserRequestSchema} AddUserRequestSchema Request payload for creating a user for Video KYC.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsCreateUser: async (x_api_version: string, AddUserRequestSchema: AddUserRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('vrsCreateUser', 'x_api_version', x_api_version)
            // verify required parameter 'AddUserRequestSchema' is not null or undefined
            assertParamExists('vrsCreateUser', 'AddUserRequestSchema', AddUserRequestSchema)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(AddUserRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve the details of a user registered for Video KYC. You can fetch user information using either the **user_id** (provided by you) or the **user_reference_id** (generated by Cashfree).
         * @summary Get User Detail
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {string} [user_reference_id] This is the unique ID generated by Cashfree Payments and returned in the response of the Add User API.
         * @param {string} [user_id] This is the unique ID you created to identify the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * user_id?: string, 
         */
        vrsGetUser: async (x_api_version: string,  x_cf_signature?: string, user_reference_id?: string, user_id?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('vrsGetUser', 'x_api_version', x_api_version)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")

            if (user_reference_id !== undefined) {
                localVarQueryParameter['user_reference_id'] = user_reference_id;
            }

            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }


    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update User Detail
         * @summary Update User Detail
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {UpdateUserRequestSchema} UpdateUserRequestSchema Find the request for updating a user, phone number field cannot be updated.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsUpdateUser: async (x_api_version: string, UpdateUserRequestSchema: UpdateUserRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('vrsUpdateUser', 'x_api_version', x_api_version)
            // verify required parameter 'UpdateUserRequestSchema' is not null or undefined
            assertParamExists('vrsUpdateUser', 'UpdateUserRequestSchema', UpdateUserRequestSchema)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateUserRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to create a new user profile for the Secure ID, which enables Video KYC (Know Your Customer) verification. The user profile includes basic details such as phone number, name, and address, and is required to initiate the KYC process.
         * @summary Create User for Secure ID
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {AddUserRequestSchema} AddUserRequestSchema Request payload for creating a user for Video KYC.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsCreateUser(x_api_version: string, AddUserRequestSchema: AddUserRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsCreateUser(x_api_version, AddUserRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to retrieve the details of a user registered for Video KYC. You can fetch user information using either the **user_id** (provided by you) or the **user_reference_id** (generated by Cashfree).
         * @summary Get User Detail
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {string} [user_reference_id] This is the unique ID generated by Cashfree Payments and returned in the response of the Add User API.
         * @param {string} [user_id] This is the unique ID you created to identify the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsGetUser(x_api_version: string, x_cf_signature?: string, user_reference_id?: string, user_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsGetUser(x_api_version, x_cf_signature, user_reference_id, user_id, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Update User Detail
         * @summary Update User Detail
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {UpdateUserRequestSchema} UpdateUserRequestSchema Find the request for updating a user, phone number field cannot be updated.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsUpdateUser(x_api_version: string, UpdateUserRequestSchema: UpdateUserRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsUpdateUser(x_api_version, UpdateUserRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */



/**
 * VKYCApi - axios parameter creator
 * @export
 */
const VKYCApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to check the status of a Video KYC (vKYC) request. You can query the request using the **reference_id** (generated by Cashfree) or the **verification_id** (created by you). The response includes the current status, vKYC link, link expiry, and optional Aadhaar and security question details.
         * @summary Get status of Video KYC
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {string} [verification_id] It is the unique ID generated by the merchant to identify the verification request in the Initiate Video KYC Request API.
         * @param {string} [reference_id] It is the unique ID created by Cashfree Payments that you receive in the response of Initiate Video KYC Request API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * reference_id?: string, 
         */
        vkycGetStatus: async (x_api_version: string,  x_cf_signature?: string, verification_id?: string, reference_id?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('vkycGetStatus', 'x_api_version', x_api_version)
            const localVarPath = `/vkyc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")

            if (verification_id !== undefined) {
                localVarQueryParameter['verification_id'] = verification_id;
            }

            if (reference_id !== undefined) {
                localVarQueryParameter['reference_id'] = reference_id;
            }


    
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to initiate a Video KYC request for a user by generating a secure verification link. The link is sent through selected notification channels (SMS, email, or WhatsApp) and can be customised using user and agent templates.
         * @summary Initiate Video KYC Request
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {VKYCLinkRequestSchema} VKYCLinkRequestSchema Request parameters to generate Video KYC link.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsInitiateVKYC: async (x_api_version: string, VKYCLinkRequestSchema: VKYCLinkRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('vrsInitiateVKYC', 'x_api_version', x_api_version)
            // verify required parameter 'VKYCLinkRequestSchema' is not null or undefined
            assertParamExists('vrsInitiateVKYC', 'VKYCLinkRequestSchema', VKYCLinkRequestSchema)
            const localVarPath = `/vkyc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(VKYCLinkRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VKYCApi - functional programming interface
 * @export
 */
const VKYCApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VKYCApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to check the status of a Video KYC (vKYC) request. You can query the request using the **reference_id** (generated by Cashfree) or the **verification_id** (created by you). The response includes the current status, vKYC link, link expiry, and optional Aadhaar and security question details.
         * @summary Get status of Video KYC
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {string} [verification_id] It is the unique ID generated by the merchant to identify the verification request in the Initiate Video KYC Request API.
         * @param {string} [reference_id] It is the unique ID created by Cashfree Payments that you receive in the response of Initiate Video KYC Request API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vkycGetStatus(x_api_version: string, x_cf_signature?: string, verification_id?: string, reference_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVKYCLinkResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vkycGetStatus(x_api_version, x_cf_signature, verification_id, reference_id, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
        /**
         * Use this API to initiate a Video KYC request for a user by generating a secure verification link. The link is sent through selected notification channels (SMS, email, or WhatsApp) and can be customised using user and agent templates.
         * @summary Initiate Video KYC Request
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
         * @param {VKYCLinkRequestSchema} VKYCLinkRequestSchema Request parameters to generate Video KYC link.
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsInitiateVKYC(x_api_version: string, VKYCLinkRequestSchema: VKYCLinkRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VKYCLinkResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsInitiateVKYC(x_api_version, VKYCLinkRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * VKYCApi - object-oriented interface
 * @export
 * @class VKYCApi
 * @extends {BaseAPI}
 */



/**
 * VehicleRCApi - axios parameter creator
 * @export
 */
const VehicleRCApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to verify the authenticity of vehicle details. We help you find out the complete information of the vehicle including the owner, chassis number, registration date, registration number, and more.  View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#registration-certificate-vehicle) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | Valid                                      | -   | 200              | SUCCESS       | Invalid                                        | Enter a valid registration number of the vehicle   | 400              | ERROR         | vehicle-rc is invalid               | Enter a valid registration number of the vehicle.   | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.                  | Enter a valid verification_id that includes only alphanumeric, period (.), hyphen (-), and underscore ( _ ).  | 400              | ERROR         | verification_id is missing in the request.               | Enter a valid verification ID in the request.   | 400              | ERROR         | verification_id can include a maximum of 50 characters.                  | Enter a valid verification_id that is withing 50 characters.    | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists  | Enter a unique verification_id that includes only alphanumeric, period (.), hyphen (-), and underscore ( _ ).  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed            | Try again after some time. 
         * @summary Get Vehicle RC Details
         
         * @param {VehicleRcRequestSchema} VehicleRcRequestSchema Find the request parameters to retrieve the information of a vehicle\&#39;s registration certificate
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsVehicleRcVerification: async (VehicleRcRequestSchema: VehicleRcRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'VehicleRcRequestSchema' is not null or undefined
            assertParamExists('vrsVehicleRcVerification', 'VehicleRcRequestSchema', VehicleRcRequestSchema)
            const localVarPath = `/vehicle-rc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(VehicleRcRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleRCApi - functional programming interface
 * @export
 */
const VehicleRCApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleRCApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to verify the authenticity of vehicle details. We help you find out the complete information of the vehicle including the owner, chassis number, registration date, registration number, and more.  View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#registration-certificate-vehicle) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | Valid                                      | -   | 200              | SUCCESS       | Invalid                                        | Enter a valid registration number of the vehicle   | 400              | ERROR         | vehicle-rc is invalid               | Enter a valid registration number of the vehicle.   | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.                  | Enter a valid verification_id that includes only alphanumeric, period (.), hyphen (-), and underscore ( _ ).  | 400              | ERROR         | verification_id is missing in the request.               | Enter a valid verification ID in the request.   | 400              | ERROR         | verification_id can include a maximum of 50 characters.                  | Enter a valid verification_id that is withing 50 characters.    | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists  | Enter a unique verification_id that includes only alphanumeric, period (.), hyphen (-), and underscore ( _ ).  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed            | Try again after some time. 
         * @summary Get Vehicle RC Details
         * @param {VehicleRcRequestSchema} VehicleRcRequestSchema Find the request parameters to retrieve the information of a vehicle\&#39;s registration certificate
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsVehicleRcVerification(VehicleRcRequestSchema: VehicleRcRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleRcResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsVehicleRcVerification(VehicleRcRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * VehicleRCApi - object-oriented interface
 * @export
 * @class VehicleRCApi
 * @extends {BaseAPI}
 */



/**
 * VoterIDApi - axios parameter creator
 * @export
 */
const VoterIDApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to verify the authenticity of your customer\'s voter ID. You need to enter the Electoral Photo Identity Card (EPIC) number and we retrieve complete details including assembly and parliamentary constituency details. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#voter-id) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | Valid voter ID                                       | -   | 200              | SUCCESS       | Invalid voter ID                                        | -   | 400              | ERROR         | verification_id is missing in the request               | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.                  | Enter a valid verification_id that includes only alphanumeric, period (.), hyphen (-), and underscore ( _ ).  | 400              | ERROR         | epic_number is missing in the request.                      | Enter a valid EPIC number which is the unique identification number assigned to each voter ID.  | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists  | Enter a unique verification_id that includes only alphanumeric, period (.), hyphen (-), and underscore ( _ ).  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 500              | ERROR         | verification attempt failed            | Try again after some time. 
         * @summary Verify Voter ID
         
         * @param {VoterIdRequestSchema} VoterIdRequestSchema Find the request parameters to fetch voter ID details
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * 
         */
        vrsVoterIdVerification: async (VoterIdRequestSchema: VoterIdRequestSchema,  x_cf_signature?: string,  options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'VoterIdRequestSchema' is not null or undefined
            assertParamExists('vrsVoterIdVerification', 'VoterIdRequestSchema', VoterIdRequestSchema)
            const localVarPath = `/voter-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/verification";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/verification"
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication XClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-secret")

            // authentication XClientID required
            await setApiKeyToObject(localVarHeaderParameter, "x-client-id")


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.0';
            if (Cashfree.XApiVersion != null && Cashfree.XApiVersion != undefined) {
                localVarHeaderParameter['x-api-version'] = Cashfree.XApiVersion;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(VoterIdRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoterIDApi - functional programming interface
 * @export
 */
const VoterIDApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoterIDApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to verify the authenticity of your customer\'s voter ID. You need to enter the Electoral Photo Identity Card (EPIC) number and we retrieve complete details including assembly and parliamentary constituency details. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#voter-id) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | Valid voter ID                                       | -   | 200              | SUCCESS       | Invalid voter ID                                        | -   | 400              | ERROR         | verification_id is missing in the request               | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.                  | Enter a valid verification_id that includes only alphanumeric, period (.), hyphen (-), and underscore ( _ ).  | 400              | ERROR         | epic_number is missing in the request.                      | Enter a valid EPIC number which is the unique identification number assigned to each voter ID.  | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists  | Enter a unique verification_id that includes only alphanumeric, period (.), hyphen (-), and underscore ( _ ).  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 500              | ERROR         | verification attempt failed            | Try again after some time. 
         * @summary Verify Voter ID
         * @param {VoterIdRequestSchema} VoterIdRequestSchema Find the request parameters to fetch voter ID details
         * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vrsVoterIdVerification(VoterIdRequestSchema: VoterIdRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoterIdResponseSchema>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.vrsVoterIdVerification(VoterIdRequestSchema, x_cf_signature, options);
                var url = "https://sandbox.cashfree.com/verification";
                if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/verification"
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
        },
    }
};

/**
 * VoterIDApi - object-oriented interface
 * @export
 * @class VoterIDApi
 * @extends {BaseAPI}
 */




class Environment {
    public PRODUCTION = CFEnvironment.PRODUCTION;
    public SANDBOX = CFEnvironment.SANDBOX;
}

export class Cashfree {
    static axios: AxiosInstance;
    static basePath: string;

    static XClientId?: string;
    static XClientSecret?: string;
    static XApiVersion: string = "2023-12-18";
    static XEnvironment: CFEnvironment;
    static XEnableErrorAnalytics: boolean = true;

    static Environment = new Environment();

    
    /**
     * Use this API to extract the details of a customer from the respective aadhaar card image and return it to the business for verification or for KYC requirements. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|    | 200      | SUCCESS | Aadhaar card is valid                                                   | -                                                                             |   | 200      | SUCCESS | Aadhaar card is invalid                                                         | Upload a valid aadhaar copy.                                                  |   | 400      | ERROR   | file size exceeded                                                      | The max file size of both the files is 10MB.                                  |   | 400      | ERROR   | please upload the file of valid format(jpeg/jpg/png)                    | Allowed file type - JPEG/JPG/PNG.                                             |   | 400      | ERROR   | verification_id is missing in the request.                              | Enter a unique verification ID in the request.                                |   | 400      | ERROR   | Front Image File is missing                                             | Upload the scanned image of the front of the aadhaar card.                    |   | 400      | ERROR   | verification_id can include a maximum of 50 characters.                 | Enter a unique verification ID within 50 characters.                          |   | 400      | ERROR   | verification_id can include only alphanum, dot, hyphen and underscores. | Only alphanumeric, hyphen (-), period (.), and underscore (   ) are allowed. |   | 400      | ERROR   | x-client-id is missing in the request                                   | Enter all the header information in the API request.                          |   | 401      | ERROR   | Invalid clientId and clientSecret combination                           | Enter valid client ID and secret key in the request.                          |   | 403      | ERROR   | IP not whitelisted                                                      | Whitelist the IP address.                                                     |   | 422      | ERROR   | Insufficient balance to process this request.                           | Ensure you have sufficient balance and then process the request.              |   | 500      | ERROR   | something went wrong                                                    | Try after some time.                                                          |
     * @summary Aadhaar OCR Verification
     * @param {string} verification_id It is the unique ID you create to identify the request. The maximum character limit is 50. Only alphanumeric, hyphen (-), period (.), and underscore ( _ ) are allowed.
     * @param {File} front_image It is the scanned image of the front of the aadhaar card. Allowed file type - JPEG/JPG/PNG. The max file size of both the files is 10MB.
     * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {File} [back_image] It is the scanned image of the back of the aadhaar card. Allowed file type - JPEG/JPG/PNG. The max file size of both the files is 10MB.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AadhaarApi
     */
    public static VrsAadhaarOcrVerification(verification_id: string, front_image: File, x_api_version?: string, x_cf_signature?: string, back_image?: File, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return AadhaarApiFp().vrsAadhaarOcrVerification(verification_id, front_image, x_api_version, x_cf_signature, back_image, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to mask the first 8 digits of your customer\'s aadhaar number and block the QR code (if it exists). Masking aadhaar card of your customers ensures privacy and makes it storable in your database. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#aadhaar-masking) and use the information to trigger the validations. The test data are usable only in test environments such as gamma and sandbox.  ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|    | 200      | SUCCESS | VALID                                                      | -                                                                |   | 200      | SUCCESS | INVALID_DOCUMENT                                           | Upload a valid copy of the aadhaar.                              |   | 400      | ERROR   | x-client-id is missing in the request                      | Enter all the header information in the API request.             |   | 400      | ERROR   | image is missing in the request                      | Upload the image file of the aadhaar card that needs masking.             |   | 400      | ERROR   |verification_id can include only alphanum, dot, hyphen and underscores                      | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.             |   | 401      | ERROR   | Invalid clientId and clientSecret combination              | Enter valid client ID and secret key in the request.             |   | 403      | ERROR   | IP not whitelisted                                         | Whitelist the IP address.                                        |   | 409      | ERROR   | verification id already exists                             | Enter a unique verification ID.                                  |   | 413      | ERROR   | file size exceeded                                         | The maximum file size should be 10 MB.                           |   | 422      | ERROR   | Insufficient balance to process this request.              | Ensure you have sufficient balance and then process the request. |   | 500      | ERROR   | something went wrong                                       | Try after some time.   
     * @summary Aadhaar Masking
     * @param {File} image It is the image file of the aadhaar card that needs masking. Accepted formats - short, long, and PVC. Allowed file type - JPEG/JPG/PNG. The maximum file size should be 10 MB.
     * @param {string} verification_id It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AadhaarApi
     */
    public static VrsMaskAadhaar(image: File, verification_id: string, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return AadhaarApiFp().vrsMaskAadhaar(image, verification_id, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to generate OTP for a given aadhar number. The mobile number linked with the aadhaar information will receive the generated OTP. Use the generated OTP for offline aadhaar verification. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | OTP sent successfully                                      | Enter the OTP in the Submit OTP to Verify Aadhaar API.                      |   | 200      | SUCCESS | Aadhaar not linked to mobile number                        | Enter a valid aadhaar number linked to a mobile number to generate the OTP. |   | 200      | SUCCESS | Invalid Aadhaar Card                                       | Enter a valid aadhaar number.                                               |   | 400      | ERROR   | aadhaar Number should contain 12 characters.               | Enter a valid aadhaar number that has only 12 numeric digits.               |   | 400      | ERROR   | Please enter aadhaar number in numeric format              | Enter a valid aadhaar number that has only 12 numeric digits.               |   | 400      | ERROR   | Please enter aadhaar number in the request                 | Enter a valid aadhaar number.                                               |   | 400      | ERROR   | x-client-id is missing in the request                      | Enter all the header information in the API request.                        |   | 401      | ERROR   | Invalid clientId and clientSecret combination              | Enter valid client ID and secret key in the request.                        |   | 403      | ERROR   | IP not whitelisted                                         | Whitelist the IP address.                                                   |   | 409      | ERROR   | Otp generated for this aadhaar, please try after some time | Try again after some time.                                                  |   | 422      | ERROR   | Insufficient balance to process this request.              | Ensure you have sufficient balance and then process the request.            |   | 500      | ERROR   | something went wrong                                       | Try again after some time.                                                  |
     * @summary Generate OTP to Verify Aadhaar
     * @param {OfflineAadhaarSendOtpRequestSchema} OfflineAadhaarSendOtpRequestSchema Find the request parameters to generate OTP for a given aadhar number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AadhaarApi
     */
    public static VrsOfflineAadhaarSendOtp(OfflineAadhaarSendOtpRequestSchema: OfflineAadhaarSendOtpRequestSchema, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return AadhaarApiFp().vrsOfflineAadhaarSendOtp(OfflineAadhaarSendOtpRequestSchema, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to verify aadhaar by submitting the OTP received on the mobile number linked to the aadhaar information. You also need to enter the reference ID received in the response of Generate OTP to Verify Aadhaar API. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | Aadhaar Card Exists                           | -                                                                                             |   | 400      | ERROR   | Session expired, please generate a new OTP    | Generate a new OTP using Generate OTP to Verify Aadhaar API.                                  |   | 400      | ERROR   | Invalid Aadhaar Card                          | -                                                                                             |   | 400      | ERROR   | Aadhaar not linked to mobile number           | Enter a valid aadhaar number linked to a mobile number in the Generate OTP to Verify Aadhaar. |   | 400      | ERROR   | Otp expired                                   | Generate a new OTP using Generate OTP to Verify Aadhaar API.                                  |   | 400      | ERROR   | Please enter a valid otp.                     | Enter the generated OTP.                                                                      |   | 400      | ERROR   | Please enter the otp in the request           | Enter the generated OTP.                                                                      |   | 400      | ERROR   | OTP entered is invalid                        | Enter the generated OTP.                                                                      |   | 400      | ERROR   | x-client-id is missing in the request         | Enter all the header information in the API request.                                          |   | 401      | ERROR   | Invalid clientId and clientSecret combination | Enter valid client ID and secret key in the request.                                          |   | 403      | ERROR   | IP not whitelisted                            | Whitelist the IP address.                                                                     |   | 422      | ERROR   | Insufficient balance to process this request. | Ensure you have sufficient balance and then process the request.                              |   | 500      | ERROR   | Unable to validate, please retry later                          | Try again after some time.                                                                    |
     * @summary Submit OTP to Verify Aadhaar
     * @param {OfflineAadhaarVerifyOtpRequestSchema} OfflineAadhaarVerifyOtpRequestSchema Find the request parameters to submit the generated OTP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AadhaarApi
     */
    public static VrsOfflineAadhaarVerifyOtp(OfflineAadhaarVerifyOtpRequestSchema: OfflineAadhaarVerifyOtpRequestSchema, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return AadhaarApiFp().vrsOfflineAadhaarVerifyOtp(OfflineAadhaarVerifyOtpRequestSchema, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to to retrieve an individual\'s recent employment details such as member ID, joining date, and exit date of the company. Verifying the employment information of the individual mitigates risk and prevents fraud. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#employment-information) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                      | -   | 200              | SUCCESS       | EMPLOYMENT_DETAILS_NOT_FOUND                                      | Enter the correct information in the request.    | 400              | ERROR         | provided input combination is not valid                  | Enter a combination of values that help fetch the employment details.   | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
     * @summary Get Employment Details
     * @param {AdvanceEmploymentRequestSchema} AdvanceEmploymentRequestSchema Find the request parameters to retrieve employment details
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvancedEmploymentApi
     */
    public static VrsAdvanceEmploymentVerification(AdvanceEmploymentRequestSchema: AdvanceEmploymentRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return AdvancedEmploymentApiFp().vrsAdvanceEmploymentVerification(AdvanceEmploymentRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to generate an authentication token required to initialize the Cashfree SDK. Provide your **app_id**, and product name (such as Video KYC) in the request body. The API returns an **access_token** and its expiry details.
     * @summary Create Auth Token to Initialise the SDK
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
     * @param {CreateAuthRequestSchema} CreateAuthRequestSchema Request payload for create auth token to initialise the SDK.
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public static VrsGenerateAuthToken(x_api_version: string, CreateAuthRequestSchema: CreateAuthRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return AuthApiFp().vrsGenerateAuthToken(x_api_version, CreateAuthRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to retrieve information from CIN such as business incorporation date, director(s) details, CIN status, and more. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#cin) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -    | 200              | SUCCESS         | INVALID                  | Enter the correct information in the request. | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.               | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.   | 400              | ERROR         | cin is missing in the request.                  | Enter the unique alphanumeric identifier (CIN) assigned to companies in the request.   | 400              | ERROR         | cin should be of 21 character alphanumeric string of format (X00000XX0000XXX000000).                  | Enter the correct format of the CIN information in the request.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
     * @summary Verify CIN
     * @param {CinRequestSchema} CinRequestSchema Find the request parameters to retrieve your customer\&#39;s CIN information
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CINApi
     */
    public static VrsCinVerification(CinRequestSchema: CinRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return CINApiFp().vrsCinVerification(CinRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to create a DigiLocker URL to retrieve and verify aadhaar information of your customer.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | PENDING                                      | -    | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.               | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.   | 400              | ERROR         |document_requested is missing in the request.                  | Enter the document required for verification in the request.    | 400              | ERROR         | Requested Document Type can\'t be empty                  | Enter the type of document required for verification in the respective parameter and hit the API.    | 400              | ERROR         | Invalid Document Type Submitted                  | Enter a valid value for the parameter.    | 400              | ERROR         | Duplicate Document Type Submitted                  |     | 400              | ERROR         | redirect_url should start with https.                 |  Enter a valid redirect URL.   | 400              | ERROR         |redirect_url should be valid url.                  | Enter a valid redirect URL.      | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification_id already exits, please provide new verification_id                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | Unable to process your request. Try again after some time                      | Try again after some time.  
     * @summary Create DigiLocker URL
     * @param {DigiLockerVerificationCreateUrlRequestSchema} DigiLockerVerificationCreateUrlRequestSchema Find the request parameters to create a DigiLocker URL to retrieve and verify aadhaar information
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigilockerApi
     */
    public static VrsDigilockerVerificationCreateUrl(DigiLockerVerificationCreateUrlRequestSchema: DigiLockerVerificationCreateUrlRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return DigilockerApiFp().vrsDigilockerVerificationCreateUrl(DigiLockerVerificationCreateUrlRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to get your customer\'s document details from DigiLocker.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              |SUCCESS       | -                                      | -   | 202            |SUCCESS       | Validation in process check after some time                                     | Try again after some time.    | 400              | ERROR         | Please provide verification_id or reference_id                  | Enter a valid verification_id or reference_id in the request.  | 400              | ERROR         | document_type should be AADHAAR.               | Enter the value for document_type as AADHAAR.     | 400              | ERROR         | Digilocker request URL is expired                  | Create a new DigiLocker URL.    | 400              | ERROR         | Digilocker consent session expired                  | Create a new DigiLocker consent session.      | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 404              | ERROR         | Please enter a valid verification_id                                           | Enter a valid verification ID.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | Unable to process your request. Try again after some time                      | Try again after some time.  
     * @summary Get Document from DigiLocker
     * @param {string} document_type It is the type of document to be verified.
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {number} [reference_id] It is the unique ID created by Cashfree Payments that you receive in the response of Create DigiLocker URL API
     * @param {string} [verification_id] It is the unique ID you created to identify the Create DigiLocker URL API request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigilockerApi
     */
    public static VrsDigilockerVerificationFetchDocument(document_type: string, x_cf_signature?: string, reference_id?: number, verification_id?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return DigilockerApiFp().vrsDigilockerVerificationFetchDocument(document_type, x_cf_signature, reference_id, verification_id, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to get the status of the DigiLocker verification. You need to enter either the verification ID or reference ID.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | PENDING                                                            | -                                                                  |   | 200      | SUCCESS | AUTHENTICATED                                                            | -                                                                  |   | 200      | SUCCESS | EXPIRED                                                           | -                                                                  |   | 400      | ERROR   | Please provide verification_id or reference_id                       | You need to enter either the verification ID or reference ID.        |   | 400      | ERROR   | x-client-id is missing in the request.                       | Enter all the header information in the API request.               |   | 401      | ERROR   | Invalid clientId and clientSecret combination                | Enter valid client ID and secret key in the request.               |   | 403      | ERROR   | IP not whitelisted                                           | Whitelist the IP address.                                          |   | 404      | ERROR   | Please enter a valid verification_id                                           | Enter a valid verification ID that you created to identify the API request.                                          |   | 404      | ERROR   | Please enter a valid reference_id                                           | Enter a valid reference ID that you received in the API response.                                          |    | 422      | ERROR   | Insufficient balance to process this request.                | Ensure you have sufficient balance and then process the request.   |   | 500      | ERROR   | Unable to process your request. Try again after some time                                         | Try again after some time.                                         |
     * @summary Get DigiLocker Verification Status
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {number} [reference_id] It is the unique ID created by Cashfree Payments that you received in the Create DigiLocker URL API response.
     * @param {string} [verification_id] It is the unique ID you created to identify the Create DigiLocker URL API request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigilockerApi
     */
    public static VrsDigilockerVerificationFetchStatus(x_cf_signature?: string, reference_id?: number, verification_id?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return DigilockerApiFp().vrsDigilockerVerificationFetchStatus(x_cf_signature, reference_id, verification_id, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to verify the driving license of your customer. We retrieve details of the driving licence that includes the type of licence, issue date, expiry date, and more. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#driving-licence) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -   | 200              | SUCCESS       | INVALID                                      | Enter the correct information in the request.    | 400              | ERROR         | driving license is invalid                  | Ensure a valid driving licence information in the request.   | 400              | ERROR         | dob should be of type YYYY-MM-DD.                  | The accepted format is YYYY-MM-DD.   | 400              | ERROR         | dob is missing in the request.                  | Enter the date of birth of the driving licence holder in the request.  | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification ID to identify the verification request.   | 400              | ERROR         | verification_id can include a maximum of 50 characters.                  | Create a valid verification ID within 50 characters.   | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
     * @summary Verify Driving Licence Details
     * @param {DrivingLicenseRequestSchema} DrivingLicenseRequestSchema Find the request paramenters to retrieve your customer\&#39;s driving license information
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrivingLicenseApi
     */
    public static VrsDrivingLicenseVerification(DrivingLicenseRequestSchema: DrivingLicenseRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return DrivingLicenseApiFp().vrsDrivingLicenseVerification(DrivingLicenseRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to add the details of the document and signer(s) to initiate e-sign verification. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                      | -   | 400              | ERROR       | verification_id is missing in the request.                                      | Create a valid verification ID to identify the request.     | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.  | 400              | ERROR         | x-client-id is missing in the request.                  | Enter all the header information in the API request.  | 400              | ERROR         |  document_id is missing in the request.                  | Enter the unique ID received in the Upload Document for E-Sign API response.     | 400              | ERROR         |     Document id provided is invalid.                  |  Enter a valid document ID.   | 400              | ERROR         |     Document id provided is expired.                  |     | 400              | ERROR         |     notification_modes is missing in the request.                  |  Enter how you want to notify the signee about the e-sign details in the request.   | 400              | ERROR         |     notification_modes is missing in the request.                  |  Enter how you want to notify the signee about the e-sign details in the request.   | 400              | ERROR         |     Notification mode provided is invalid.                  |     | 400              | ERROR         |     Maximum number limit of Signer exceeded.                  |     | 400              | ERROR         |     auth_type is missing in the request                  | Enter the type of authentication to be used for e-signature.    | 400              | ERROR         |     expiry_in_days is missing in the request.                  | Enter the expiry of the signing link for each signer in days. The maximum allowed time is 15 days.     | 400              | ERROR         |     signers is missing in the request.                  | Enter the details of the signer(s) in the request.      | 400              | ERROR         |     Duplicate sequence passed for signers                  |      | 400              | ERROR         |     Sequence passed for signers is Invalid                  |      | 400              | ERROR         |     Multiple signer is not allowed without email notification mode                  |       | 401              | ERROR         | Invalid clientId and clientSecret combination               |   | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | This Verification ID already exists. Provide a different ID.                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time.  
     * @summary Create E-Sign Request
     * @param {ESignVerificationCreateSignatureRequestSchema} ESignVerificationCreateSignatureRequestSchema Find the request parameters to add the details of the document and signer
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESignApi
     */
    public static VrsESignCreateSignature(ESignVerificationCreateSignatureRequestSchema: ESignVerificationCreateSignatureRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return ESignApiFp().vrsESignCreateSignature(ESignVerificationCreateSignatureRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to upload the document before creating the request for signing the document.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                      | -   | 400              | ERROR       | Please upload the file of valid format(pdf)                                      | Upload the document that requires an e-sign. Allowed file type - PDF. Max file size allowed - 10MB.  | 400              | ERROR      |                           document is missing in the request.            |Upload the document that requires an e-sign. Allowed file type - PDF. Max file size allowed - 10MB.   | 400              | ERROR       | x-client-id is missing in the request.                                      | Enter all the header information in the API.    | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.   | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time. 
     * @summary Upload Document For E-Sign
     * @param {File} document Upload the document that requires an e-sign. Allowed file type - PDF. Max file size allowed - 10MB.
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESignApi
     */
    public static VrsESignUploadDocument(document: File, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return ESignApiFp().vrsESignUploadDocument(document, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to get the status of the initiated e-sign verification. You need to enter either the verification ID or reference ID.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | IN_PROGRESS                                      | Wait for the signature.   | 200              | SUCCESS       | SUCCESS                                      | -  | 200              | SUCCESS       | EXPIRED                                      |   | 200              | SUCCESS       | FAILURE                                      |    | 400              | ERROR       | Please provide verification_id or reference_id                                      | Enter a valid verification ID or reference ID in the.    | 401              | ERROR         | Invalid clientId and clientSecret combination               |   | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.   | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time.  
     * @summary Get E-Sign Status
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {number} [reference_id] It is the unique ID created by Cashfree Payments that you receive in the response of Create E-Sign Request API.
     * @param {string} [verification_id] It is the unique ID you create to identify the Create E-Sign Request API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESignApi
     */
    public static VrsESignVerificationFetchStatus(x_cf_signature?: string, reference_id?: number, verification_id?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return ESignApiFp().vrsESignVerificationFetchStatus(x_cf_signature, reference_id, verification_id, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to detect live human presence and authenticate facial biometrics. The API analyzes facial characteristics and liveness signals to prevent spoofing attempts and validate genuine user presence.  Returns comprehensive facial analysis including liveness confidence score and quality metrics. View the [test data](https://www.cashfree.com/docs/api-reference/vrs/data-to-test-integration#face-liveness) and use the information to trigger the validations. The test data are usable only in the test environment sandbox.
     * @summary Face Liveness Check
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
     * @param {string} verification_id It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.
     * @param {File} image Upload the image of the individual to verify the liveness of the image. Supported types are jpeg, jpg and png.
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceLivenessApi
     */
    public static VrsFaceLivenessCheck(x_api_version: string, verification_id: string, image: File, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return FaceLivenessApiFp().vrsFaceLivenessCheck(x_api_version, verification_id, image, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to verify the facial features of your customer in one image with another. You can compare an image with another image or with an image in an ID. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#face-match) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                      | -   | 400              | ERROR         | File size exceeded. Please check API Documentation                  | Maximum file size allowed for both the files is 10 MB. | 400              | ERROR         | please upload the file of valid format(jpeg/jpg/png)                  | Allowed file type - JPEG/JPG/PNG.    | 400              | ERROR         | First image is missing in the request                  | Upload the scanned copy of the image 1.   | 400              | ERROR         | Second image is missing in the request                 | Upload the scanned copy of the image 2.    | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
     * @summary Face Match
     * @param {string} verification_id It is the unique ID you need to create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.
     * @param {File} first_image It is the scanned copy of the image 1. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.
     * @param {File} second_image It is the scanned copy of the image 2. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {string} [threshold] It is the value to distinguish and match the facial features of the two images. The range is between 0 and 1. The default value is set as 0.7. We conclude that the images match when the analysis is or greater than the value set for threshold.
     * @param {boolean} [detect_mask_first_image] It is a boolean value to identify whether the person in the first image is wearing a mask.
     * @param {boolean} [detect_mask_second_image] It is a boolean value to identify whether the person in the first image is wearing a mask.
     * @param {boolean} [align_horizontally] It is a boolean value to align the images horizontally before analysing the facial features.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceMatchApi
     */
    public static VrsFaceMatchVerification(verification_id: string, first_image: File, second_image: File, x_cf_signature?: string, threshold?: string, detect_mask_first_image?: boolean, detect_mask_second_image?: boolean, align_horizontally?: boolean, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return FaceMatchApiFp().vrsFaceMatchVerification(verification_id, first_image, second_image, x_cf_signature, threshold, detect_mask_first_image, detect_mask_second_image, align_horizontally, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to verify if a given GSTIN information exists or not. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | GSTIN Exists                                      | -   | 200              | SUCCESS       | GSTIN Doesn’t Exist                                      | Enter the correct information in the request.     | 400              | ERROR         | GSTIN first 2 digits should be numeric and length should not exceed 15 and should be alphanumeric.                  | Enter a valid GSTIN in the request. The correct identifier has the first 2 digits in numerics and does not exceed 15 charaters.  | 400              | ERROR         | GSTIN is missing in the request.                  | Enter the GSTIN information in the request.  | 400              | ERROR         |  businessName can include a maximum of 200 characters.                  | The maximum character limit for businessName is 200.   | 400              | ERROR         |  businessName should be alphanumeric.                  | Enter only alphabets and/or numerical values in the parameter.    | 400              | ERROR         |  GstIn Verification is not enabled for this account                  | Contact your account manager.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.   | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         |Unable to validate, please retry later                     | Try again after some time.  
     * @summary Verify GSTIN
     * @param {GstinRequestSchema} GstinRequestSchema Find the request parameters to retrieve GSTIN information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTINApi
     */
    public static VrsGstinVerification(GstinRequestSchema: GstinRequestSchema, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return GSTINApiFp().vrsGstinVerification(GstinRequestSchema, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to verify location, proxy details, city risk score, and proxy type risk score of an IP address. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#ip-address) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.    ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -    | 400             | ERROR         | x-client-id is missing in the request.                  | Enter all the header information in the request. | 400              | ERROR         | verification_id already exists.                  | Enter a unique verification ID to identify the request.  | 400              | ERROR         | please enter a valid IP address               | Enter a valid IP address in the request.    | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 404              | ERROR         | unable to find IP details                                           | Enter a valid IP address in the request.    | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time. 
     * @summary Verify IP
     * @param {IpVerificationRequestSchema} IpVerificationRequestSchema Find the request parameters to retrieve location information of an IP address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPApi
     */
    public static VrsIpVerification(IpVerificationRequestSchema: IpVerificationRequestSchema, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return IPApiFp().vrsIpVerification(IpVerificationRequestSchema, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to verify names that have enormous variations. Provide us the names you want to verify, and we will tell you whether they match and provide the reason. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#name-match) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | The given names are identical                                      | -   | 200              | SUCCESS       | Word missing                                      | -   | 200              | SUCCESS       | Initials penalty, Word missing                                      | -   | 200              | SUCCESS       | Word missing                                     | -   | 200              | SUCCESS       |The given names are different                                      | -    | 400              | ERROR         | verification_id is missing in the request.                  | Enter a verification ID in the request. | 400              | ERROR         | name_1 is missing in the request.                  | Enter name #1 in the request.   | 400              | ERROR         | name_2 is missing in the request.                  | Enter name #2 in the request.   | 400              | ERROR         | name_1 is not allowed to be empty.                  | Enter a name in the name_1 parameter.   | 400              | ERROR         | name_2 is not allowed to be empty.                  | Enter a name in the name_2 parameter.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
     * @summary Name Match
     * @param {NameMatchRequestSchema} NameMatchRequestSchema Find the request parameters to verify names with variations
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NameMatchApi
     */
    public static VrsNameMatchVerification(NameMatchRequestSchema: NameMatchRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return NameMatchApiFp().vrsNameMatchVerification(NameMatchRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to verify your customers\' PAN information individually or in batches at a time. This API comes in handy when you have to verify a large number of PAN information. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#pan) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | Request accepted. You can check the status after some time.                      | -     | 400      | ERROR   | Please provide atleast one entry for verification                                | You need to have a minimum of one entry in the request.        | 400      | ERROR   | bulk_verification_id is missing in the request.                                  | You need to create a unique ID to identify the API request.        | 400      | ERROR   | bulk_verification_id should contain only alphanumeric and underscore characters. | Only alphanumeric and underscore ( _ ) are allowed.               | 400      | ERROR   | x-client-id is missing in the request.                                           | Enter all the header information in the API request.               | 401      | ERROR   | Invalid clientId and clientSecret combination                                    | Enter valid client ID and secret key in the request.               | 403      | ERROR   | IP not whitelisted                                                               | Whitelist the IP address.                                          | 422      | ERROR   | Insufficient balance to process this request.                                    | Ensure you have sufficient balance and then process the request.   | 500      | ERROR   | Unable to validate, please retry later                                           | Try again after some time.                                    | 500      | ERROR   | something went wrong, please try after some time                                 | Try again after some time.       
     * @summary Verify PAN in Bulk
     * @param {BulkPanRequestSchema} BulkPanRequestSchema Find the request parameters to verify a large number of PAN information
     * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PANApi
     */
    public static VrsBulkPanVerification(BulkPanRequestSchema: BulkPanRequestSchema, x_api_version?: string, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return PANApiFp().vrsBulkPanVerification(BulkPanRequestSchema, x_api_version, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to get the status of the Verify PAN in Bulk API request. You need to enter either the reference ID or bulk verification ID.    ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | -                                                            | -                                                                  |   | 400      | ERROR   | Either of reference_id or BulkVerificationId can\'t be empty. | You need to enter either the reference ID or bulk verification ID. |   | 400      | ERROR   | x-client-id is missing in the request.                       | Enter all the header information in the API request.               |   | 401      | ERROR   | Invalid clientId and clientSecret combination                | Enter valid client ID and secret key in the request.               |   | 403      | ERROR   | IP not whitelisted                                           | Whitelist the IP address.                                          |   | 422      | ERROR   | Insufficient balance to process this request.                | Ensure you have sufficient balance and then process the request.   |   | 500      | ERROR   | something went wrong                                         | Try again after some time.                                         |
     * @summary Get Status for Verify PAN in Bulk
     * @param {string} reference_id It is the unique ID created by Cashfree Payments that you receive in the response of Verify PAN in Bulk API.
     * @param {string} bulk_verification_id It is the unique ID you created to identify the Verify PAN in Bulk API request.
     * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PANApi
     */
    public static VrsFetchBulkPanDetails(reference_id: string, bulk_verification_id: string, x_api_version?: string, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return PANApiFp().vrsFetchBulkPanDetails(reference_id, bulk_verification_id, x_api_version, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to get the verification status of the Verify PAN Sync API. You need to enter the reference ID to get the verification status. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | VALID             | -   | 200      | SUCCESS | Invalid PAN  | Enter a valid 10-character alphanumeric PAN identifier.       |  | 400      | ERROR   | x-client-id is missing in the request.                       | Enter all the header information in the API request.   | 401      | ERROR   | Invalid clientId and clientSecret combination                                    | Enter valid client ID and secret key in the request.               | 403      | ERROR   | IP not whitelisted                                                               | Whitelist the IP address.                                          | 404      | ERROR   | Incorrect referenceId                                           | Enter a valid reference ID in the request.                                    | 422      | ERROR   | Insufficient balance to process this request.                                    | Ensure you have sufficient balance and then process the request.   | 500      | ERROR   | something went wrong, please try after some time                                 | Try again after some time.      
     * @summary Get Status of Verify PAN Sync
     * @param {string} reference_id It is the unique ID created by Cashfree Payments that you receive in the response of Verify PAN Sync API.
     * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PANApi
     */
    public static VrsFetchPanDetails(reference_id: string, x_api_version?: string, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return PANApiFp().vrsFetchPanDetails(reference_id, x_api_version, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to verify the PAN information of your customers. You can retrieve more information such as masked aadhaar number, contact information. etc, than just verifying if a given PAN exists. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#pan) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|    | 200      | SUCCESS | VALID                                                        | -                                                                               | 200      | SUCCESS | Invalid PAN                                                  | Enter a valid 10-character alphanumeric PAN identifier.                         | 400      | ERROR   | Enter valid PAN.                                             | Enter a valid 10-character alphanumeric PAN identifier in the correct format.   | 400      | ERROR   | pan is missing in the request.                               | Enter a valid 10-character alphanumeric PAN identifier in the request.          | 400      | ERROR   | x-client-id is missing in the request.                       | Enter all the header information in the API request.                            | 401      | ERROR   | Invalid clientId and clientSecret combination                | Enter valid client ID and secret key in the request.                            | 403      | ERROR   | IP not whitelisted                                           | Whitelist the IP address.                                                       | 409      | ERROR   | This Verification ID already exists. Provide a different ID. | Enter a unique verification ID to identify the API request.                     | 422      | ERROR   | Insufficient balance to process this request.                | Ensure you have sufficient balance and then process the request.                | 500      | ERROR   | Unable to process your request. Try again after some time.    | Try again after some time.                                                      | 502      | ERROR   | Unable to process your request. Try again after some time.   | Try again after some time.                                                     |
     * @summary PAN 360
     * @param {PanAdvanceRequestSchema} PanAdvanceRequestSchema Find the request parameters to retrieve the PAN information
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PANApi
     */
    public static VrsPanAdvanceVerification(PanAdvanceRequestSchema: PanAdvanceRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return PANApiFp().vrsPanAdvanceVerification(PanAdvanceRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this PAN Verification via OCR API to verify and validate the PAN information quickly. Provide the front image of PAN and a verification ID. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | PAN card is valid                                                       | -                                                                             |   | 200      | SUCCESS | PAN card is Invalid                                                     | Upload a valid PAN card copy.                                                 |   | 400      | ERROR   | File size exceeded 10MB limit                                           | The max file size of the file is 10MB.                                        |   | 400      | ERROR   | please upload the file of valid format(jpeg/jpg/png)                    | Allowed file type - JPEG/JPG/PNG.                                             |   | 400      | ERROR   | verification_id is missing in the request.                              | Enter a unique verification ID in the request.                                |   | 400      | ERROR   | Front Image File is missing                                             | Upload the copy of the PAN card in the front_image parameter.                 |   | 400      | ERROR   | verification_id can include a maximum of 50 characters.                 | The maximum character limit is 50.                                            |   | 400      | ERROR   | verification_id can include only alphanum, dot, hyphen and underscores. | Only alphanumeric, period (.), hyphen (-), and underscore (   ) are allowed. |   | 400      | ERROR   | x-client-id is missing in the request                                   | Enter all the header information in the API request.                          |   | 401      | ERROR   | Invalid clientId and clientSecret combination                           | Enter valid client ID and secret key in the request.                          |   | 403      | ERROR   | IP not whitelisted                                                      | Whitelist the IP address.                                                     |   | 422      | ERROR   | Insufficient balance to process this request.                           | Ensure you have sufficient balance and then process the request.              |   | 500      | ERROR   | Unable to validate, please retry later                                                    | Try again after some time.                                                    |
     * @summary PAN Verification via OCR
     * @param {string} verification_id It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
     * @param {File} front_image It is the scanned copy of the PAN card. Allowed file type - JPEG/JPG/PNG.
     * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PANApi
     */
    public static VrsPanOcrVerification(verification_id: string, front_image: File, x_api_version?: string, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return PANApiFp().vrsPanOcrVerification(verification_id, front_image, x_api_version, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to verify if a given PAN exists. You will receive the name registered with the PAN and the PAN type (Individual or Business) in the response for a valid PAN. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#pan) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200      | SUCCESS | VALID                                            | -                                                                             |   | 200      | SUCCESS | Invalid PAN                                            | Enter a valid 10-character alphanumeric PAN identifier.                       |   | 400      | ERROR   | Enter valid PAN.                                 | Enter a valid 10-character alphanumeric PAN identifier in the correct format. |   | 400      | ERROR   | pan is missing in the request.                   | Enter a valid 10-character alphanumeric PAN identifier in the request.        |   | 400      | ERROR   | x-client-id is missing in the request.           | Enter all the header information in the API request.                          |   | 401      | ERROR   | Invalid clientId and clientSecret combination    | Enter valid client ID and secret key in the request.                          |   | 403      | ERROR   | IP not whitelisted                               | Whitelist the IP address.                                                     |   | 422      | ERROR   | Insufficient balance to process this request.    | Ensure you have sufficient balance and then process the request.              |   | 500      | ERROR   | something went wrong, please try after some time | Try again after some time.                                                    |   | 500      | ERROR   | Unable to validate, please retry later           | Try again after some time.                                                    |
     * @summary Verify PAN Sync
     * @param {PanRequestSchema} PanRequestSchema Find the request parameters to verify whether the PAN information is valid
     * @param {string} [x_api_version] It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PANApi
     */
    public static VrsPanVerification(PanRequestSchema: PanRequestSchema, x_api_version?: string, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return PANApiFp().vrsPanVerification(PanRequestSchema, x_api_version, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to fetch the list of GSTIN associated with the PAN information. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#fetch-gstin-with-pan) and use the information to trigger the validations. The test data are usable only in test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | Gstins List found                                      | -    | 200              | SUCCESS         | Gstin not found                  | No results found for the entered information. Enter the correct information in the request. | 400              | ERROR         | Enter valid PAN.                  | Enter the unique 10-character alphanumeric identifier issued by the Income Tax Department.  | 400              | ERROR         | pan is missing in the request.               | Enter the PAN information in the request to fetch the list of associated GSTIN.    | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
     * @summary Fetch GSTIN with PAN
     * @param {PanToGstinRequestSchema} PanToGstinRequestSchema Find the request parameters to retrieve the list of GSTIN associated with a PAN
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PANToGSTINApi
     */
    public static VrsPanToGstinVerification(PanToGstinRequestSchema: PanToGstinRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return PANToGSTINApiFp().vrsPanToGstinVerification(PanToGstinRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to verify passport information and ensure the identity of your customer. Provide the passport file number in the request and we help you fetch the details. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#passport) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -    | 200              | SUCCESS         | INVALID                  | Enter the correct information in the request. | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.               | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.   | 400              | ERROR         | file_number is missing in the request.                  | Enter the file number in the request.   | 400              | ERROR         | dob is missing in the request.                  | Enter the date of birth of the passport holder in the request.   | 400              | ERROR         | dob should be of type YYYY-MM-DD.                  | Enter the DOB in the YYYY-MM-DD format    | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time.  
     * @summary Verify Passport
     * @param {PassportVerificationRequestSchema} PassportVerificationRequestSchema Find the request parameter to retrieve your customer\&#39;s passport information
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassportApi
     */
    public static VrsPassportVerification(PassportVerificationRequestSchema: PassportVerificationRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return PassportApiFp().vrsPassportVerification(PassportVerificationRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to convert geohraphic coordinates (latitude and longitude) into readable location information for verification purposes. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#reverse-geocoding-coordinates) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | VALID                                      | -    | 400              | ERROR         | latitude value should range from -90 to 90.                  | Enter a value for the latitude that ranges between -90 and 90. | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include a maximum of 50 characters.               | Enter a verification ID within 50 characters. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.   | 400              | ERROR         | longitude value should range from -180 to 180.                  | Enter a value for the longitude that ranges between -180 and 180.   | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen and underscores.                  | Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.     | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists                                           | Enter a unique verification ID to identify the request.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed                      | Try again after some time. 
     * @summary Reverse Geocoding
     * @param {ReverseGeocodingRequestSchema} ReverseGeocodingRequestSchema Find the request parameters to retrieve the physical address of a location
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReverseGeocodingApi
     */
    public static VrsReverseGeocodingVerification(ReverseGeocodingRequestSchema: ReverseGeocodingRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return ReverseGeocodingApiFp().vrsReverseGeocodingVerification(ReverseGeocodingRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to create a reverse penny drop request. Reverse penny drop is a verification method for validating bank account information. Your customers/users deposit 1 rupee through a UPI based transaction and get the 1 rupee back once the verification is complete. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | -                                      | -    | 400              | ERROR         | verification_id is missing in the request.                  | Enter a valid verification_id in the request.   | 400              | ERROR         | verification_id already exists                  | Enter a unique verification_id.    | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | Unable to validate, please retry later                      | Try again after some time.  
     * @summary Create Reverse Penny Drop Request
     * @param {CreateRequestRequestSchema} CreateRequestRequestSchema Find the request parameters to create a reverse penny drop request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReversePennyDropApi
     */
    public static VrsReversePennyDropCreateRequest(CreateRequestRequestSchema: CreateRequestRequestSchema, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return ReversePennyDropApiFp().vrsReversePennyDropCreateRequest(CreateRequestRequestSchema, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to get the details of the created reverse penny drop request. You need to enter either the reference ID or verification ID. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | SUCCESS                                       | -   | 200              | SUCCESS       | EXPIRED                                        | Create a new reverse penny drop order request if the link expired before the transaction.   | 200              | SUCCESS       | FAILURE                                        | Create a new reverse penny drop order request.   | 400              | ERROR         | Please provide verification_id or ref_id               | You need to enter either the reference ID or verification ID.   | 400              | ERROR         | Please enter a valid verification_id                  | Enter a valid verification_id in the request.  | 400              | ERROR         | Please enter a valid ref_id                      | Enter a valid reference ID in the request.  | 400              | ERROR         | x-client-id is missing in the request                     | Enter all the header information in the API request.  | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 500              | ERROR         | something went wrong, please try after some time                      | Try again after some time.  
     * @summary Get Reverse Penny Drop Request Details
     * @param {string} [ref_id] It is the unique ID created by Cashfree Payments that you receive in the response of Create Reverse Penny Drop Request API.
     * @param {string} [verification_id] It is the unique ID created by you to identify the reverse penny drop verification request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReversePennyDropApi
     */
    public static VrsReversePennyDropFetchStatus(ref_id?: string, verification_id?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return ReversePennyDropApiFp().vrsReversePennyDropFetchStatus(ref_id, verification_id, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to create a new user profile for the Secure ID, which enables Video KYC (Know Your Customer) verification. The user profile includes basic details such as phone number, name, and address, and is required to initiate the KYC process.
     * @summary Create User for Secure ID
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
     * @param {AddUserRequestSchema} AddUserRequestSchema Request payload for creating a user for Video KYC.
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public static VrsCreateUser(x_api_version: string, AddUserRequestSchema: AddUserRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return UserApiFp().vrsCreateUser(x_api_version, AddUserRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to retrieve the details of a user registered for Video KYC. You can fetch user information using either the **user_id** (provided by you) or the **user_reference_id** (generated by Cashfree).
     * @summary Get User Detail
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {string} [user_reference_id] This is the unique ID generated by Cashfree Payments and returned in the response of the Add User API.
     * @param {string} [user_id] This is the unique ID you created to identify the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public static VrsGetUser(x_api_version: string, x_cf_signature?: string, user_reference_id?: string, user_id?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return UserApiFp().vrsGetUser(x_api_version, x_cf_signature, user_reference_id, user_id, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Update User Detail
     * @summary Update User Detail
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
     * @param {UpdateUserRequestSchema} UpdateUserRequestSchema Find the request for updating a user, phone number field cannot be updated.
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public static VrsUpdateUser(x_api_version: string, UpdateUserRequestSchema: UpdateUserRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return UserApiFp().vrsUpdateUser(x_api_version, UpdateUserRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to check the status of a Video KYC (vKYC) request. You can query the request using the **reference_id** (generated by Cashfree) or the **verification_id** (created by you). The response includes the current status, vKYC link, link expiry, and optional Aadhaar and security question details.
     * @summary Get status of Video KYC
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {string} [verification_id] It is the unique ID generated by the merchant to identify the verification request in the Initiate Video KYC Request API.
     * @param {string} [reference_id] It is the unique ID created by Cashfree Payments that you receive in the response of Initiate Video KYC Request API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VKYCApi
     */
    public static VkycGetStatus(x_api_version: string, x_cf_signature?: string, verification_id?: string, reference_id?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return VKYCApiFp().vkycGetStatus(x_api_version, x_cf_signature, verification_id, reference_id, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }

    /**
     * Use this API to initiate a Video KYC request for a user by generating a secure verification link. The link is sent through selected notification channels (SMS, email, or WhatsApp) and can be customised using user and agent templates.
     * @summary Initiate Video KYC Request
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD.
     * @param {VKYCLinkRequestSchema} VKYCLinkRequestSchema Request parameters to generate Video KYC link.
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VKYCApi
     */
    public static VrsInitiateVKYC(x_api_version: string, VKYCLinkRequestSchema: VKYCLinkRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return VKYCApiFp().vrsInitiateVKYC(x_api_version, VKYCLinkRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to verify the authenticity of vehicle details. We help you find out the complete information of the vehicle including the owner, chassis number, registration date, registration number, and more.  View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#registration-certificate-vehicle) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | Valid                                      | -   | 200              | SUCCESS       | Invalid                                        | Enter a valid registration number of the vehicle   | 400              | ERROR         | vehicle-rc is invalid               | Enter a valid registration number of the vehicle.   | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.                  | Enter a valid verification_id that includes only alphanumeric, period (.), hyphen (-), and underscore ( _ ).  | 400              | ERROR         | verification_id is missing in the request.               | Enter a valid verification ID in the request.   | 400              | ERROR         | verification_id can include a maximum of 50 characters.                  | Enter a valid verification_id that is withing 50 characters.    | 400              | ERROR         | x-client-id is missing in the request.                      | Enter all the header information in the API request.   | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists  | Enter a unique verification_id that includes only alphanumeric, period (.), hyphen (-), and underscore ( _ ).  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 502              | ERROR         | verification attempt failed            | Try again after some time. 
     * @summary Get Vehicle RC Details
     * @param {VehicleRcRequestSchema} VehicleRcRequestSchema Find the request parameters to retrieve the information of a vehicle\&#39;s registration certificate
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleRCApi
     */
    public static VrsVehicleRcVerification(VehicleRcRequestSchema: VehicleRcRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return VehicleRCApiFp().vrsVehicleRcVerification(VehicleRcRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
    /**
     * Use this API to verify the authenticity of your customer\'s voter ID. You need to enter the Electoral Photo Identity Card (EPIC) number and we retrieve complete details including assembly and parliamentary constituency details. View the [test data](https://docs.cashfree.com/docs/data-to-testintegration#voter-id) and use the information to trigger the validations. The test data are usable only in the test environments such as gamma and sandbox.   ### Response Codes   | Sub Code         |     Status    |    Message                                                  | Next Action   | ---------------- |---------------|-------------------------------------------------------------|-------------------------|   | 200              | SUCCESS       | Valid voter ID                                       | -   | 200              | SUCCESS       | Invalid voter ID                                        | -   | 400              | ERROR         | verification_id is missing in the request               | Enter a valid verification_id in the request.  | 400              | ERROR         | verification_id can include only alphanum, dot, hyphen, and underscores.                  | Enter a valid verification_id that includes only alphanumeric, period (.), hyphen (-), and underscore ( _ ).  | 400              | ERROR         | epic_number is missing in the request.                      | Enter a valid EPIC number which is the unique identification number assigned to each voter ID.  | 401              | ERROR         | Invalid clientId and clientSecret combination               | Ensure you enter valid x-client-id and x-client-secret information in the API request.  | 403              | ERROR         | IP not whitelisted                                           | Whitelist the IP address.  | 409              | ERROR         | verification id already exists  | Enter a unique verification_id that includes only alphanumeric, period (.), hyphen (-), and underscore ( _ ).  | 422              | ERROR         | Insufficient balance to process this request                | Try again with sufficient balance.  | 500              | ERROR         | something went wrong                      | Try again after some time.  | 500              | ERROR         | verification attempt failed            | Try again after some time. 
     * @summary Verify Voter ID
     * @param {VoterIdRequestSchema} VoterIdRequestSchema Find the request parameters to fetch voter ID details
     * @param {string} [x_cf_signature] Send the signature if IP is not whitelisted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoterIDApi
     */
    public static VrsVoterIdVerification(VoterIdRequestSchema: VoterIdRequestSchema, x_cf_signature?: string, options?: AxiosRequestConfig) {
        if(Cashfree.XEnableErrorAnalytics) {
        Sentry.init({
            dsn: 'https://63ead829c0a3afc78bb5801edcc8d7cf@o330525.ingest.sentry.io/4506812009021440',
            // Performance Monitoring
            tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
            // Set sampling rate for profiling - this is relative to tracesSampleRate
            profilesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!,
            attachStacktrace: true,
            enableTracing: true,
            beforeSend: (event) => {
                if(event.contexts){
                    delete event.contexts.os;
                    delete event.contexts.device;
                }
                else {
                    // Handle the case where event.contexts is undefined
                    console.warn('event.contexts is undefined. Check your Sentry event data.');
                }
                delete event.server_name;
                if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                            const stackTrace = event.exception.values[0].stacktrace;
                            if (stackTrace && stackTrace.frames) {
                                
								const filteredDomains = stackTrace.frames.filter((x) => x.filename && x.filename.includes("cashfree-verification")).map((x) => x.filename);
                                if (filteredDomains && filteredDomains[0] && filteredDomains[0].includes("cashfree-verification")) {
                                    if(Cashfree.XEnableErrorAnalytics) {
                                        return event;
                                    }
                                    return null;
                                } 
                            }
                        }
						return null;
            },
            });
            Sentry.configureScope((scope) => {
                if(Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                } else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.0");
            });
        }
        try {
            return VoterIDApiFp().vrsVoterIdVerification(VoterIdRequestSchema, x_cf_signature, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        } catch (error) {
            if(Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    
}